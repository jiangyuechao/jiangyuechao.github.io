<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/06/10/drf/"/>
      <url>/2022/06/10/drf/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是restful规范"><a href="#什么是restful规范" class="headerlink" title="什么是restful规范"></a>什么是restful规范</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RESTful是一种定义Web API接口的设计风格，尤其适用于前后端分离的应用模式中。 </span><br><span class="line">数据的安全保障：url链接一般都采用https协议进行传输(数据交互中安全性) 接口特性表现：一看就知道是个api接口，用api关键字标识接口url：https://api.baidu.com </span><br><span class="line">多数据版本共存：在url链接中标识数据版本https://api.baidu.com/v1 </span><br><span class="line">数据即是资源，均使用名词（可复数），尽量不要出现动词 资源操作由请求方式决定（method）：提供请求方式来标识增删改查动作 过滤，通过在url上传参的形式传递搜索条件:例如url后面?=搜索，分页，游标</span><br></pre></td></tr></tbody></table></figure><h3 id="查找模板的顺序"><a href="#查找模板的顺序" class="headerlink" title="查找模板的顺序"></a>查找模板的顺序</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优先查找根目录下：template</span><br><span class="line">根据app的注册顺序去每个app的template目录中查找</span><br></pre></td></tr></tbody></table></figure><h3 id="drf组件提供的功能"><a href="#drf组件提供的功能" class="headerlink" title="drf组件提供的功能"></a>drf组件提供的功能</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、免除csrf认证</span><br><span class="line">2、视图（1.APIView、2.ListAPIview、3.ListModelMixin）</span><br><span class="line">3、权限</span><br><span class="line">4、认证</span><br><span class="line">5、解析器</span><br><span class="line">6、筛选器</span><br><span class="line">7、分页</span><br><span class="line">8、序列化和数据校验：</span><br><span class="line"><span class="code">    可以对queryset进行序列化，也可以对用户提交的数据进行校验</span></span><br><span class="line"><span class="code">    source：无需加括号，在源码内部会去判断是否可以执行，可执行自动加括号</span></span><br><span class="line"><span class="code">    SerializerMethodField定义钩子方法</span></span><br><span class="line"><span class="code">9、渲染器：把json数据渲染到drf自己的页面上</span></span><br></pre></td></tr></tbody></table></figure><h3 id="drf继承过哪些视图类，之间的区别"><a href="#drf继承过哪些视图类，之间的区别" class="headerlink" title="drf继承过哪些视图类，之间的区别"></a>drf继承过哪些视图类，之间的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、APIview</span><br><span class="line"><span class="code">    遵循了CBV模式，功能多但是需要自己写的代码也多</span></span><br><span class="line"><span class="code">    提供了免除csrf认证，版本处理、认证、权限、节流、解析器、筛选器、分页、序列化、渲染器</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">2、ListAPIView,RetrieveAPIView,CreateAPIView,UpdateAPIView,DestroyAPIView</span><br><span class="line"><span class="code">    第二种则在第一种的基础上，封装了许多我们需要自己的写的代码，许多功能的实现只需要给专属的变量名赋值就可以实现该功能</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">3、GenericViewSet、ListModelMixin,RetrieveModelMixin,CreateModelMixin,UpdateModelMixin,DestroyModelMixin</span></span><br><span class="line"><span class="code">    第三种则重构了APIView中的as_view()方法，结合请求方法和不同Mixin类的方法名从而进行执行不同的功能。与前面两种最主要的区别是url路由中as_view()方法中需要传值。</span></span><br><span class="line"><span class="code">     目前使用的主要目的是把第二种的bug(查询全部数据的功能和查询单个数据的功能无法在一个类中实现)实现在一个类中</span></span><br></pre></td></tr></tbody></table></figure><h3 id="GenericAPIView视图类的作用"><a href="#GenericAPIView视图类的作用" class="headerlink" title="GenericAPIView视图类的作用"></a>GenericAPIView视图类的作用</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作用：GenericAPIView主要为drf内部帮助我们提供增删查改的类，提供了执行流程和功能，我们在使用drf内置类做增删查改时，就可以通过自定义静态字段（类变量）或重写方法（get<span class="emphasis">_queryset、get_</span>serializer<span class="emphasis">_class）来做一些更高级的定制</span></span><br></pre></td></tr></tbody></table></figure><h3 id="drf版本的实现过程"><a href="#drf版本的实现过程" class="headerlink" title="drf版本的实现过程"></a>drf版本的实现过程</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">drf自带的版本类"DEFAULT<span class="emphasis">_VERSIONING_</span>CLASS": "rest<span class="emphasis">_framework.versioning.URLPathVersioning",</span></span><br><span class="line"><span class="emphasis">允许出现的版本"ALLOWED_</span>VERSIONS": ['v1', 'v2'],</span><br><span class="line">如果没有传版本，可以使用默认版本</span><br><span class="line"><span class="code">     default_version = api_settings.DEFAULT_VERSION</span></span><br><span class="line"><span class="code">设置url中获取版本的变量，默认是version</span></span><br><span class="line"><span class="code">     version_param = api_settings.VERSION_PARAM</span></span><br><span class="line"><span class="code">     </span></span><br><span class="line"><span class="code">过程：</span></span><br><span class="line"><span class="code">    当前端传来请求，执行了as_view()方法，如果设置了全局版本或者进入了设置了版本的功能函数，则会先执行APIview类中dispatch方法，之后再执行initial方法，然后进入self.determine_version方法，里面会先判断是否有versioning_class，如果没有就返回(None,None)，代表没有版本，有则执行versioning_class(URLPathVersioning)类中的determine_version方法，他会返回版本，里面会判断，如果获取到version为空则返回默认版本，并且还要判断是否存在允许出现的版本列表中，返回版本后再把版本号和版本分类分别赋值给request.version和request.versioning_scheme</span></span><br></pre></td></tr></tbody></table></figure><h3 id="drf组件认证的实现过程"><a href="#drf组件认证的实现过程" class="headerlink" title="drf组件认证的实现过程"></a>drf组件认证的实现过程</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当用户进行登录的时候，运行了登录类的as<span class="emphasis">_view()方法，</span></span><br><span class="line"><span class="emphasis"> 1、进入了APIView类的dispatch方法</span></span><br><span class="line"><span class="emphasis"> 2、执行了self.initialize_</span>request这个方法，是重定义request，并且得到了自己定义的认证类对象</span><br><span class="line"> 3、执行self.initial方法中的self.perform<span class="emphasis">_authentication，里面运行了user方法</span></span><br><span class="line"><span class="emphasis"> 4、再执行了user方法里面的self._</span>authenticate()方法</span><br><span class="line"> 5、然后执行了自己定义的类中的authenticate方法，自己定义的类继承了BaseAuthentication类，里面有  authenticate方法，如果自己定义的类中没有authenticate方法会报错。</span><br><span class="line"> 6、把从authenticate方法得到的user和auth赋值给user和auth方法</span><br><span class="line"> 7、这两个方法把user和auth的值赋值给了request.user：是登录用户的对象,request.auth：是认证的信息字典</span><br></pre></td></tr></tbody></table></figure><h3 id="drf组件权限的实现过程？"><a href="#drf组件权限的实现过程？" class="headerlink" title="drf组件权限的实现过程？"></a>drf组件权限的实现过程？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当用户执行一个业务的时候，运行了as<span class="emphasis">_view方法</span></span><br><span class="line"><span class="emphasis">1、进入了APIView类的dispatch方法</span></span><br><span class="line"><span class="emphasis">2、进入self.initial方法中的self.check_</span>permissions(request)方法</span><br><span class="line">3、里面执行了for循环，把每个权限类实例化对象，</span><br><span class="line">4、执行自己定义的权限类里面的has<span class="emphasis">_permission方法，里面会判断request.user是否存在</span></span><br><span class="line"><span class="emphasis">5、不存在就返回False，存在就返回True</span></span><br><span class="line"><span class="emphasis">6、之后执行self.permission_</span>denied报错方法，返回的是False就报错，可以自定义报错信息，在has<span class="emphasis">_permission方法中写message = {"status": False, "error": "登录成功之后才能评论"}，就实现了自定义报错</span></span><br><span class="line"><span class="emphasis">7、如果返回的是True就让他进入功能</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/10/Django/"/>
      <url>/2022/06/10/Django/</url>
      
        <content type="html"><![CDATA[<h3 id="Django的生命周期"><a href="#Django的生命周期" class="headerlink" title="Django的生命周期"></a>Django的生命周期</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、当用户在浏览器输入url，此时浏览器会生成请求头和请求体随之发送给服务端。</span><br><span class="line">2、url经过Django中的wsgi时完成请求对象创建</span><br><span class="line">3、经过Django的中间件，到路由系统匹配路由</span><br><span class="line">4、完成匹配后进入相应的view视图，执行相关代码返回执行结果</span><br><span class="line">5、Django把客户端想要的数据作为字符串返回客户端</span><br><span class="line">6、客户端接收数据，再渲染到页面展现给用户</span><br></pre></td></tr></tbody></table></figure><img src="C:\Users\91312\AppData\Roaming\Typora\typora-user-images\image-20220603144648987.png" alt="image-20220603144648987" style="zoom:50%;"><h3 id="Django内置组件"><a href="#Django内置组件" class="headerlink" title="Django内置组件"></a>Django内置组件</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin，from，modelfrom，model</span><br></pre></td></tr></tbody></table></figure><h3 id="FBV和CBV"><a href="#FBV和CBV" class="headerlink" title="FBV和CBV"></a>FBV和CBV</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FBV:基于函数的视图函数</span><br><span class="line">CBV:基于类的视图函数</span><br></pre></td></tr></tbody></table></figure><h3 id="session和cookie"><a href="#session和cookie" class="headerlink" title="session和cookie"></a>session和cookie</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">区别：</span><br><span class="line"><span class="code">    cookie数据存放于客户的浏览器中，session的数据存于服务器中，cookie不是很安全，他人可以分析存放于本地的cookie并进行cookie欺骗，若从安全面考虑则应该使用session，session会在一定的时间内保存在服务器上。当访问量增多，会比较占用服务器的性能，所以建议将登陆信息等重要的信息存放在session中，其他信息则放在cookie中</span></span><br></pre></td></tr></tbody></table></figure><h3 id="HTTP请求常见的方式"><a href="#HTTP请求常见的方式" class="headerlink" title="HTTP请求常见的方式"></a>HTTP请求常见的方式</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、opions 返回服务器针对特定资源所支持的HTML请求方法，允许客户端查看服务器性能</span><br><span class="line">2、Get 向特定资源发出请求</span><br><span class="line">3、post 向指定资源位置提交数据进行处理请求（提交表单，上传文件），又可能导致新的资源的建立或原有资源的修改</span><br><span class="line">4、put 向指定资源位置上传最新内容</span><br><span class="line">5、head</span><br><span class="line">6、delete</span><br><span class="line">7、trace</span><br><span class="line">8、connect</span><br></pre></td></tr></tbody></table></figure><h3 id="MVC和MTV模式"><a href="#MVC和MTV模式" class="headerlink" title="MVC和MTV模式"></a>MVC和MTV模式</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Django的MTV模式本质上和MVC是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同。</span><br><span class="line">Django的MTV分别是指： </span><br><span class="line">   M 代表模型（Model）： 负责业务对象和数据库的关系映(ORM) </span><br><span class="line">   T 代表模板 (Template)：负责如何把页面展示给用户(html) </span><br><span class="line">   V 代表视图（View）： 负责业务逻辑，并在适当时候调用Model和Template。 </span><br><span class="line">   除了以上三层之外，还需要一个URL分发器，它的作用是将一个个URL的页面请求分发给不同的View处理，View再调用相应Model Template    优势：低耦合，开发快捷，部署方便，可重用性高，维护成本低。</span><br></pre></td></tr></tbody></table></figure><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象关系映射</span><br><span class="line">优点：ORM使得数据库的交互更加简单了，并且不用考虑开始的sql语句，实现快速开发</span><br><span class="line">缺陷:sql封装死了 有时候查询速度很慢</span><br></pre></td></tr></tbody></table></figure><h3 id="中间件的4种方法及应用场景"><a href="#中间件的4种方法及应用场景" class="headerlink" title="中间件的4种方法及应用场景"></a>中间件的4种方法及应用场景</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">自定义中间件必须继承MiddlewareMixin</span><br><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">方法：</span><br><span class="line"><span class="code">    process_request</span></span><br><span class="line"><span class="code">    process_view</span></span><br><span class="line"><span class="code">    process_exception   view中出现错误执行该方法</span></span><br><span class="line"><span class="code">    process_response</span></span><br><span class="line"><span class="code">    process_template_responseprocess  函数中有render执行</span></span><br></pre></td></tr></tbody></table></figure><h3 id="什么是wsgi、uwsgi、uWSGI"><a href="#什么是wsgi、uwsgi、uWSGI" class="headerlink" title="什么是wsgi、uwsgi、uWSGI"></a>什么是wsgi、uwsgi、uWSGI</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wsgi:</span><br><span class="line"><span class="code">    是web网关接口，是一套协议，用于接收用户请求并将请求进行初次封装，随即将请求交给web框架</span></span><br><span class="line"><span class="code">    实现wsgi协议的模块：</span></span><br><span class="line"><span class="code">        1、wsgiref：本质上就是编写一个socket服务端，用于接收用户请求（django）</span></span><br><span class="line"><span class="code">        2、werkzeug：本质上就是编写一个socket服务端，用于接收用户请求（flask）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">uwsgi:</span><br><span class="line"><span class="code">    与wsgi一样是一种通信协议，它是uWSGI服务器的独占协议，用于定义传输信息的类型</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">uWSGI:</span><br><span class="line"><span class="code">    是一个web服务器，实现了wsgi协议，uWSGI协议，http协议</span></span><br></pre></td></tr></tbody></table></figure><p>ORM中的方法</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、model.表名.objects.all() 获取表中所有对象，结果是对象列表</span><br><span class="line">2、model.表名.objects.get(条件) 获取符合条件的对象</span><br><span class="line">3、model.表名.objects.filter(条件) 筛选所有符合条件的对象</span><br><span class="line">4、model.表名.objects.exclude(条件) 筛选所有不合符条件的对象</span><br><span class="line">5、model.表名.objects.all().values() 字典列表 values()括号内不指定则显示全部，若有指定则显示指定的</span><br><span class="line">6、model.表名.objects.all().values<span class="emphasis">_list() 元祖列表 括号内指定同上</span></span><br><span class="line"><span class="emphasis">7、model.表名.objects.all().order_</span>by('id') 按照ID升序</span><br><span class="line">8、model.表名.objects.all().order<span class="emphasis">_by('-id') 按ID降序</span></span><br><span class="line"><span class="emphasis">9、model.表名.objects.all().order_</span>by('a','-id') 先按a升序，a字段相同的按ID降序</span><br><span class="line">10、model.表名.objects.all().order<span class="emphasis">_by('-id').reverse() 对结果反转，reverse前必须排序，否则无效；或在model中表类下中的Meta中指定ordering=('id',) 注意逗号不能少</span></span><br><span class="line"><span class="emphasis">11、distinct() 去重</span></span><br><span class="line"><span class="emphasis">12、model.表名.objects.filter().exists() 判断列表是否有东西，返回true或false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="ORM中三种能写sql语句的方法"><a href="#ORM中三种能写sql语句的方法" class="headerlink" title="ORM中三种能写sql语句的方法"></a>ORM中三种能写sql语句的方法</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、execute 直接访问数据库，避开模型层</span><br><span class="line">2、extra </span><br><span class="line">3、raw for p in Person.objects.raw('SELECT <span class="emphasis">* FROM myapp_person')   print(p)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="ORM批量处理数据"><a href="#ORM批量处理数据" class="headerlink" title="ORM批量处理数据"></a>ORM批量处理数据</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">插入数据：</span><br><span class="line"><span class="code">    创建一个对象列表，然后调用bulk_create方法，一次性将列表中的数据插入数据库</span></span><br><span class="line"><span class="code">    product_list_to_insert = list()</span></span><br><span class="line"><span class="code">    for x in range(10):</span></span><br><span class="line"><span class="code">        product_list_to_insert.append(Product(name='product name' + str(x),price=x))</span></span><br><span class="line"><span class="code">        Product.objects.bulk_create(product_list_to_insert)</span></span><br><span class="line"><span class="code">更新数据:先进行数据过滤，再调用update方法一次性更新</span></span><br><span class="line"><span class="code">    Product.objects.filter(name_contains='name').update(name='new name')</span></span><br><span class="line"><span class="code">删除数据：先进行数据过滤，然后再调用delete方法删除</span></span><br><span class="line"><span class="code">    Product.objects.filter(name_contains='name query').delete()</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></tbody></table></figure><h3 id="CSRF实现机制"><a href="#CSRF实现机制" class="headerlink" title="CSRF实现机制"></a>CSRF实现机制</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、查看中间件是否启用，未启用则启动中间件</span><br><span class="line">2、post请求</span><br><span class="line">3、验证码</span><br><span class="line">4、表单中添加{% csrf<span class="emphasis">_token %}标签</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Django中提供了runserver为什么不能用户来部署项目-runserver和uWSGI的区别"><a href="#Django中提供了runserver为什么不能用户来部署项目-runserver和uWSGI的区别" class="headerlink" title="Django中提供了runserver为什么不能用户来部署项目(runserver和uWSGI的区别)"></a>Django中提供了runserver为什么不能用户来部署项目(runserver和uWSGI的区别)</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、runserver方法是调试Django时用到的运行方式，是Django自带的</span><br><span class="line">   WSGI server运行主要在测试和开发中使用，runserver开启的是单进程</span><br><span class="line">2、uWSGI是一个web服务器，实现了wsgi协议，uWSGI协议，http协议，它具有超快的性能，低内存占用和多app管理等优点，与nginx搭配可构成一个生产环境，能够将用户访问请求和应用app隔开，实现真正的部署</span><br></pre></td></tr></tbody></table></figure><h3 id="calss-Meta中原信息字段有哪些"><a href="#calss-Meta中原信息字段有哪些" class="headerlink" title="calss Meta中原信息字段有哪些"></a>calss Meta中原信息字段有哪些</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、app<span class="emphasis">_label 应用场景：模型类不在默认的应用程序包下的models文件中，这时候需要指定你这个模型类是哪个应用程序的</span></span><br><span class="line"><span class="emphasis">2、db_</span>table 应用场景：用于指定自定义数据库表名</span><br><span class="line">3、db<span class="emphasis">_tablespace 应用场景：通过该字段指定模型对应的数据库表放在哪个数据库表空间</span></span><br><span class="line"><span class="emphasis">4、verbose_</span>name 应用场景：给模型类起名字，注释</span><br><span class="line">5、verbose<span class="emphasis">_name_</span>plural 应用场景：模型的复数形式是什么</span><br><span class="line">6、ordering 应用场景：对象返回的记录结果集是按哪个字段排序的</span><br></pre></td></tr></tbody></table></figure><h3 id="get和filter方法的区别"><a href="#get和filter方法的区别" class="headerlink" title="get和filter方法的区别"></a>get和filter方法的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入参数：</span><br><span class="line"><span class="code">    get的参数只能是model中定义的字段，只支持严格匹配</span></span><br><span class="line"><span class="code">    filter的参数可以使字段，也可以是扩展的where查询关键字，如in like</span></span><br><span class="line"><span class="code">返回值：</span></span><br><span class="line"><span class="code">    get返回值是一个定义的model对象</span></span><br><span class="line"><span class="code">    filter返回值是一个新的queryset对象，然后可以对queryset再进行查询，再返回新的qureyset对象，支持链式操作，queryset是一个集合对象，支持迭代、遍历、切片等，但不同等于list</span></span><br><span class="line"><span class="code">异常：</span></span><br><span class="line"><span class="code">    get只有一条记录返回的时候才正常，也就是说明get查询的字段必须是主键或唯一约束的字段，其余的都会抛异常</span></span><br><span class="line"><span class="code">    filter有没有匹配记录都不会抛异常</span></span><br></pre></td></tr></tbody></table></figure><h3 id="http请求的执行流程"><a href="#http请求的执行流程" class="headerlink" title="http请求的执行流程"></a>http请求的执行流程</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、域名解析</span><br><span class="line">2、建立连接</span><br><span class="line">3、接收请求 接收客户端访问某一资源的请求</span><br><span class="line"><span class="code">    单进程I/O   多进程I/O    复用I/O</span></span><br><span class="line"><span class="code">4、处理请求</span></span><br><span class="line"><span class="code">5、访问资源</span></span><br><span class="line"><span class="code">6、构建响应报文</span></span><br><span class="line"><span class="code">7、发送响应报文</span></span><br><span class="line"><span class="code">8、记录日志</span></span><br></pre></td></tr></tbody></table></figure><h3 id="select-related和prefetch-related的区别"><a href="#select-related和prefetch-related的区别" class="headerlink" title="select_related和prefetch_related的区别"></a>select_related和prefetch_related的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有外键关系存在时，可以很好的减少数据库的请求次数，减轻数据库的压力，提高性能</span><br><span class="line">select<span class="emphasis">_related通过表关系join关联查询，一次性获取所有数据，只进行一次sql查询</span></span><br><span class="line"><span class="emphasis">prefetch_</span>related分别查询每一个表，根据之间的关系进行处理，执行两次sql查询</span><br></pre></td></tr></tbody></table></figure><h4 id="Django中orm如何设置读写分离"><a href="#Django中orm如何设置读写分离" class="headerlink" title="Django中orm如何设置读写分离"></a>Django中orm如何设置读写分离</h4><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、手动设置：通过using(db<span class="emphasis">_name)来指定使用的数据库</span></span><br><span class="line"><span class="emphasis">2、自动读写分离：</span></span><br><span class="line"><span class="emphasis">    1、定义类</span></span><br><span class="line"><span class="emphasis">    2、配置settings文件，在其中指定DATEBASE</span></span><br></pre></td></tr></tbody></table></figure><h3 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定义：远程过程调用(RPC)是一种协议，程序可使用这种协议向网络中的另一台计算机上的程序请求服务</span><br><span class="line">1、RPC采用客户机/服务器模式，请求程序就是一个客户机，而服务提供程序就是一个服务器</span><br><span class="line">2、客户机调用进程发送一个有进程参数的调用信息到服务进程，等待应答。在服务端，进程保持睡眠状态直至调用信息到达，当第一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，继续等待下一个调用信息</span><br><span class="line">3、客户端调用进程接收答复信息，获得进程结果，调用继续执行</span><br></pre></td></tr></tbody></table></figure><h3 id="如何实现用户的登陆认证"><a href="#如何实现用户的登陆认证" class="headerlink" title="如何实现用户的登陆认证"></a>如何实现用户的登陆认证</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、cookie session</span><br><span class="line">2、token登陆成功后生成加密字符串</span><br><span class="line">3、JWT就是一种用户在登录后生成token并把token存放于前端，后端不需要维护用户的状态信息但是可以进行验证token有效性的认证及状态管理方式</span><br><span class="line">4、最后一步签名的过程其实是对头部以及负载的内容进行签名处理，防止内容被篡改，提高安全性</span><br></pre></td></tr></tbody></table></figure><h3 id="django-rest-framework框架中都有哪些组件"><a href="#django-rest-framework框架中都有哪些组件" class="headerlink" title="django rest framework框架中都有哪些组件"></a>django rest framework框架中都有哪些组件</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、序列化组件：serializers 对queryset序列化以及对请求数据格式教研</span><br><span class="line">2、认证组件：写一个类并注册到认证类 在类的方法中编写认证逻辑</span><br><span class="line">3、权限组件：写一个类并注册到权限类 在类的方法中编写认证逻辑</span><br><span class="line">4、频率组件：写一个类并注册到频率类 在类的方法中编写认证逻辑</span><br><span class="line">5、渲染器：定义数据如何渲染至页面，在渲染器类中注册</span><br><span class="line">6、分页：对获取到的数据进行分页处理</span><br><span class="line"><span class="code">    1、基本分页：pagenumberpagination</span></span><br><span class="line"><span class="code">    2、偏移分页：limitoffsetpagination</span></span><br><span class="line"><span class="code">    3、游标分页：Cursorpagination</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用orm和原生sql的优缺点"><a href="#使用orm和原生sql的优缺点" class="headerlink" title="使用orm和原生sql的优缺点"></a>使用orm和原生sql的优缺点</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、orm的开发速度快，操作简单，但是执行速度较慢，在处理多表联查等复杂操作时orm语法会变得复杂</span><br><span class="line">2、sql开发速度慢，但是执行速度快，性能强</span><br></pre></td></tr></tbody></table></figure><h3 id="F、Q查询"><a href="#F、Q查询" class="headerlink" title="F、Q查询"></a>F、Q查询</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F作用：两个字段之间做比较，专门取对象中某列值的操作</span><br><span class="line">Q作用：对对象进行复杂查询，支持特殊操作符运算来组合生成不同的Q对象</span><br></pre></td></tr></tbody></table></figure><h3 id="你能列举几个减少数据库查询次数的方法吗"><a href="#你能列举几个减少数据库查询次数的方法吗" class="headerlink" title="你能列举几个减少数据库查询次数的方法吗"></a>你能列举几个减少数据库查询次数的方法吗</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、利用Django queryset的惰性和自带缓存的特性</span><br><span class="line"></span><br><span class="line">2、使用select<span class="emphasis">_related和prefetch_</span>related方法在数据库层面进行Join操作</span><br><span class="line"></span><br><span class="line">3、使用缓存</span><br></pre></td></tr></tbody></table></figure><h3 id="Django的模型继承有哪几种方式-它们有什么区别以及何时使用它们"><a href="#Django的模型继承有哪几种方式-它们有什么区别以及何时使用它们" class="headerlink" title="Django的模型继承有哪几种方式? 它们有什么区别以及何时使用它们?"></a>Django的模型继承有哪几种方式? 它们有什么区别以及何时使用它们?</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 抽象模型继承(abstract model)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 多表模型继承(multi-table inheritance)</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 代理模型(proxy model)</span><br><span class="line"></span><br><span class="line">它们的区别如下:</span><br><span class="line"></span><br><span class="line"><span class="code">    1、Django不会为抽象模型在数据库中生成自己的数据表。父类Meta中的abstract=True也不会传递给子类。如果你发现多模型有很多共同字段时，需使用抽象模型继承。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    2、多表模型继承与抽象模型继承最大的区别在于Django也会为父类模型建立自己的数据表，同时隐式地在父类和子类之间建立一个一对一关系。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    3、如果我们只想改变某个模型的行为方法，而不是添加额外的字段或创建额外的数据表，我们就可以使用代理模型(proxy model)。设置一个代理模型，需要在子类模型Meta选项中设置proxy=True， Django不会为代理模型生成新的数据表</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/10/mysql%E9%87%8D%E7%82%B9/"/>
      <url>/2022/06/10/mysql%E9%87%8D%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>⼀ 基础</p><h1 id="1-1-为什么要使⽤数据库"><a href="#1-1-为什么要使⽤数据库" class="headerlink" title="1.1 为什么要使⽤数据库"></a><strong>1.1</strong> <strong>为什么要使⽤数据库</strong></h1><p><strong>数据保存在内存</strong></p><p>优点： 存取速度快</p><p>缺点： 数据不能永久保存</p><p><strong>数据保存在⽂件</strong></p><p>优点： 数据永久保存</p><p>缺点：1）速度⽐内存操作慢，频繁的IO操作。2）查询数据不⽅便</p><p><strong>数据保存在数据库</strong></p><p>1）数据永久保存</p><p>2）使⽤SQL语句，查询⽅便效率⾼。</p><p>3）管理数据⽅便</p><h1 id="1-2-什么是SQL？"><a href="#1-2-什么是SQL？" class="headerlink" title="1.2 什么是SQL？"></a><strong>1.2</strong> <strong>什么是</strong>SQL？</h1><p>结构化查询语⾔(Structured Query Language)简称SQL，是⼀种数据库查询语⾔。</p><p>作⽤：⽤于存取数据、查询、更新和管理关系数据库系统。</p><h1 id="1-3-什么是MySQL"><a href="#1-3-什么是MySQL" class="headerlink" title="1.3 什么是MySQL?"></a><strong>1.3</strong> <strong>什么是</strong>MySQL?</h1><p>MySQL是⼀个关系型数据库管理系统，由瑞典MySQL AB 公司开发，属于 Oracle 旗下产品。MySQL 是最流⾏的</p><p>关系型数据库管理系统之⼀，在 WEB 应⽤⽅⾯，MySQL是最好的 RDBMS (Relational Database Management</p><p>System，关系数据库管理系统) 应⽤软件之⼀。在Java企业级开发中⾮常常⽤，因为 MySQL 是开源免费的，并且</p><p>⽅便扩展。</p><h1 id="1-4-数据库三⼤范式是什么"><a href="#1-4-数据库三⼤范式是什么" class="headerlink" title="1.4 数据库三⼤范式是什么"></a><strong>1.4</strong> <strong>数据库三⼤范式是什么</strong></h1><p>第⼀范式：每个列都不可以再拆分。</p><p>第⼆范式：在第⼀范式的基础上，⾮主键列完全依赖于主键，⽽不能是依赖于主键的⼀部分。</p><p>第三范式：在第⼆范式的基础上，⾮主键列只依赖于主键，不依赖于其他⾮主键。</p><p>在设计数据库结构的时候，要尽量遵守三范式，如果不遵守，必须有⾜够的理由。⽐如性能。事实上我们经常会为</p><p>了性能⽽妥协数据库的设计。</p><h1 id="1-5-mysql有关权限的表都有哪⼏个"><a href="#1-5-mysql有关权限的表都有哪⼏个" class="headerlink" title="1.5 mysql有关权限的表都有哪⼏个"></a><strong>1.5 mysql</strong>有关权限的表都有哪⼏个</h1><p>MySQL服务器通过权限表来控制⽤户对数据库的访问，权限表存放在mysql数据库⾥，由mysql_install_db脚本初</p><p>始化。这些权限表分别user，db，table_priv，columns_priv和host。下⾯分别介绍⼀下这些表的结构和内容：</p><p>user权限表：记录允许连接到服务器的⽤户帐号信息，⾥⾯的权限是全局级的。</p><p>db权限表：记录各个帐号在各个数据库上的操作权限。</p><p>table_priv权限表：记录数据表级的操作权限。</p><p>columns_priv权限表：记录数据列级的操作权限。</p><p>host权限表：配合db权限表对给定主机上数据库级操作权限作更细致的控制。这个权限表不受GRANT和</p><p>REVOKE语句的影响。</p><h1 id="1-6-MySQL的binlog有有⼏种录⼊格式？分别有什么区别？"><a href="#1-6-MySQL的binlog有有⼏种录⼊格式？分别有什么区别？" class="headerlink" title="1.6 MySQL的binlog有有⼏种录⼊格式？分别有什么区别？"></a><strong>1.6 MySQL</strong>的binlog有有⼏种录⼊格式？分别有什么区别？</h1><p>有三种格式，statement，row和mixed。</p><p>statement模式下，每⼀条会修改数据的sql都会记录在binlog中。不需要记录每⼀⾏的变化，减少了binlog⽇志</p><p>量，节约了IO，提⾼性能。由于sql的执⾏是有上下⽂的，因此在保存的时候需要保存相关的信息，同时还有⼀</p><p>些使⽤了函数之类的语句⽆法被记录复制。</p><p>row级别下，不记录sql语句上下⽂相关信息，仅保存哪条记录被修改。记录单元为每⼀⾏的改动，基本是可以</p><p>全部记下来但是由于很多操作，会导致⼤量⾏的改动(⽐如alter table)，因此这种模式的⽂件保存的信息太多，</p><p>⽇志量太⼤。</p><p>mixed，⼀种折中的⽅案，普通操作使⽤statement记录，当⽆法使⽤statement的时候使⽤row。</p><p>此外，新版的MySQL中对row级别也做了⼀些优化，当表结构发⽣变化的时候，会记录语句⽽不是逐⾏记录。</p><p>⼆ 数据类型和引擎<strong>分类</strong> </p><p><strong>类型名称</strong> </p><p><strong>说明</strong></p><p><strong>整数类型</strong> </p><p>tinyInt </p><p>很⼩的整数(8位⼆进制)</p><p>smallint </p><p>⼩的整数(16位⼆进制)</p><p>mediumint </p><p>中等⼤⼩的整数(24位⼆进制)</p><p>int(integer) </p><p>普通⼤⼩的整数(32位⼆进制)</p><p><strong>⼩数类型</strong> </p><p>float </p><p>单精度浮点数</p><p>double </p><p>双精度浮点数</p><p>decimal(m,d) </p><p>压缩严格的定点数</p><p><strong>⽇期类型</strong> </p><p>year </p><p>YYYY 1901~2155</p><p>time </p><p>HH:MM:SS -838:59:59~838:59:59</p><p>date </p><p>YYYY-MM-DD 1000-01-01~9999-12-3</p><p>datetime </p><p>YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31</p><p>23:59:59</p><p>timestamp </p><p>YYYY-MM-DD HH:MM:SS 19700101 00:00:01 UTC~2038-01-19</p><p>03:14:07UTC</p><p><strong>⽂本、⼆进制类</strong></p><p><strong>型</strong></p><p>CHAR(M) </p><p>M为0~255之间的整数</p><p>VARCHAR(M) </p><p>M为0~65535之间的整数</p><p>TINYBLOB </p><p>允许⻓度0~255字节</p><p>BLOB </p><p>允许⻓度0~65535字节</p><p>MEDIUMBLOB </p><p>允许⻓度0~167772150字节</p><p>LONGBLOB </p><p>允许⻓度0~4294967295字节</p><p>TINYTEXT </p><p>允许⻓度0~255字节</p><p>TEXT </p><p>允许⻓度0~65535字节</p><p>MEDIUMTEXT </p><p>允许⻓度0~167772150字节</p><p>LONGTEXT </p><p>允许⻓度0~4294967295字节</p><p>VARBINARY(M) </p><p>允许⻓度0~M个字节的变⻓字节字符串</p><p>BINARY(M) </p><p>允许⻓度0~M个字节的定⻓字节字符串</p><h1 id="2-1-mysql有哪些数据类型"><a href="#2-1-mysql有哪些数据类型" class="headerlink" title="2.1 mysql有哪些数据类型"></a><strong>2.1 mysql</strong>有哪些数据类型</h1><p>1、整数类型 ，包括TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT，分别表示1字节、2字节、3字节、4</p><p>字节、8字节整数。任何整数类型都可以加上UNSIGNED属性，表示数据是⽆符号的，即⾮负整数。</p><p>⻓度 ：整数类型可以被指定⻓度，例如：INT(11)表示⻓度为11的INT类型。⻓度在⼤多数场景是没有意义的，</p><p>它不会限制值的合法范围，只会影响显示字符的个数，⽽且需要和UNSIGNED ZEROFILL属性配合使⽤才有意</p><p>义。</p><p>例⼦ ，假定类型设定为INT(5)，属性为UNSIGNED ZEROFILL，如果⽤户插⼊的数据为12的话，那么数据库实</p><p>际存储数据为00012。 </p><p>2、实数类型 ，包括FLOAT、DOUBLE、DECIMAL。</p><p>DECIMAL可以⽤于存储⽐BIGINT还⼤的整型，能存储精确的⼩数。</p><p>⽽FLOAT和DOUBLE是有取值范围的，并⽀持使⽤标准的浮点进⾏近似计算。</p><p>计算时FLOAT和DOUBLE相⽐DECIMAL效率更⾼⼀些，DECIMAL你可以理解成是⽤字符串进⾏处理。</p><p>3、字符串类型 ，包括VARCHAR、CHAR、TEXT、BLOB</p><p>VARCHAR⽤于存储可变⻓字符串，它⽐定⻓类型更节省空间。</p><p>VARCHAR使⽤额外1或2个字节存储字符串⻓度。列⻓度⼩于255字节时，使⽤1字节表示，否则使⽤2字节表</p><p>示。</p><p>VARCHAR存储的内容超出设置的⻓度时，内容会被截断。</p><p>CHAR是定⻓的，根据定义的字符串⻓度分配⾜够的空间。</p><p>CHAR会根据需要使⽤空格进⾏填充⽅便⽐较。</p><p>CHAR适合存储很短的字符串，或者所有值都接近同⼀个⻓度。</p><p>CHAR存储的内容超出设置的⻓度时，内容同样会被截断。</p><p><strong>使⽤策略：</strong></p><p>对于经常变更的数据来说，CHAR⽐VARCHAR更好，因为CHAR不容易产⽣碎⽚。</p><p>对于⾮常短的列，CHAR⽐VARCHAR在存储空间上更有效率。</p><p>使⽤时要注意只分配需要的空间，更⻓的列排序时会消耗更多内存。</p><p>尽量避免使⽤TEXT/BLOB类型，查询时会使⽤临时表，导致严重的性能开销。</p><p>4、枚举类型（ENUM） ，把不重复的数据存储为⼀个预定义的集合。</p><p>有时可以使⽤ENUM代替常⽤的字符串类型。</p><p>ENUM存储⾮常紧凑，会把列表值压缩到⼀个或两个字节。</p><p>ENUM在内部存储时，其实存的是整数。</p><p>尽量避免使⽤数字作为ENUM枚举的常量，因为容易混乱。</p><p>排序是按照内部存储的整数</p><p>5、⽇期和时间类型 ，尽量使⽤timestamp，空间效率⾼于datetime，</p><p>⽤整数保存时间戳通常不⽅便处理。</p><p>如果需要存储微妙，可以使⽤bigint存储。</p><p>看到这⾥，这道真题是不是就⽐较容易回答了。</p><h1 id="2-2-MySQL存储引擎MyISAM与InnoDB区别"><a href="#2-2-MySQL存储引擎MyISAM与InnoDB区别" class="headerlink" title="2.2 MySQL存储引擎MyISAM与InnoDB区别"></a><strong>2.2 MySQL</strong>存储引擎MyISAM与InnoDB区别</h1><p>存储引擎Storage engine：MySQL中的数据、索引以及其他对象是如何存储的，是⼀套⽂件系统的实现。</p><p>常⽤的存储引擎有以下：</p><p><strong>Innodb****引擎</strong>：Innodb引擎提供了对数据库ACID事务的⽀持。并且还提供了⾏级锁和外键的约束。它的设计的</p><p>⽬标就是处理⼤数据容量的数据库系统。</p><p><strong>MyIASM****引擎</strong>(原本Mysql的默认引擎)：不提供事务的⽀持，也不⽀持⾏级锁和外键。</p><p><strong>MEMORY****引擎</strong>：所有的数据都在内存中，数据的处理速度快，但是安全性不⾼。</p><p><strong>MyISAM<strong><strong>与</strong></strong>InnoDB<strong><strong>区别</strong></strong>MyISAM</strong> </p><p><strong>Innodb</strong></p><p>存储结构 </p><p>每张表被存放在三个⽂件：frm-表格</p><p>定义、MYD(MYData)-数据⽂件、</p><p>MYI(MYIndex)-索引⽂件</p><p>所有的表都保存在同⼀个数据⽂件中（也可</p><p>能是多个⽂件，或者是独⽴的表空间⽂</p><p>件），InnoDB表的⼤⼩只受限于操作系统⽂</p><p>件的⼤⼩，⼀般为2GB</p><p>存储空间 </p><p>MyISAM可被压缩，存储空间较⼩ </p><p>InnoDB的表需要更多的内存和存储，它会在</p><p>主内存中建⽴其专⽤的缓冲池⽤于⾼速缓冲</p><p>数据和索引</p><p>可移植性、备份及恢</p><p>复</p><p>由于MyISAM的数据是以⽂件的形式</p><p>存储，所以在跨平台的数据转移中会</p><p>很⽅便。在备份和恢复时可单独针对</p><p>某个表进⾏操作</p><p>免费的⽅案可以是拷⻉数据⽂件、备份</p><p>binlog，或者⽤ mysqldump，在数据量达到</p><p>⼏⼗G的时候就相对痛苦了</p><p>⽂件格式 </p><p>数据和索引是分别存储的，数</p><p>据 .MYD ，索引 .MYI</p><p>数据和索引是集中存储的， .ibd</p><p>记录存储顺序 </p><p>按记录插⼊顺序保存 </p><p>按主键⼤⼩有序插⼊</p><p>外键 </p><p>不⽀持 </p><p>⽀持</p><p>事务 </p><p>不⽀持 </p><p>⽀持</p><p>锁⽀持（锁是避免资</p><p>源争⽤的⼀个机制，</p><p>MySQL锁对⽤户⼏</p><p>乎是透明的）</p><p>表级锁定 </p><p>⾏级锁定、表级锁定，锁定⼒度⼩并发能⼒</p><p>⾼</p><p>SELECT </p><p>MyISAM更优</p><p>INSERT、</p><p>UPDATE、DELETE</p><p>InnoDB更优</p><p>select count(*) </p><p>myisam更快，因为myisam内部维护</p><p>了⼀个计数器，可以直接调取。</p><p>索引的实现⽅式 </p><p>B+树索引，myisam 是堆表 </p><p>B+树索引，Innodb 是索引组织表</p><p>哈希索引 </p><p>不⽀持 </p><p>⽀持</p><p>全⽂索引 </p><p>⽀持 </p><p>不⽀持</p><h1 id="2-3-MyISAM索引与InnoDB索引的区别？"><a href="#2-3-MyISAM索引与InnoDB索引的区别？" class="headerlink" title="2.3 MyISAM索引与InnoDB索引的区别？"></a><strong>2.3 MyISAM</strong>索引与InnoDB索引的区别？</h1><p>InnoDB索引是聚簇索引，MyISAM索引是⾮聚簇索引。</p><p>InnoDB的主键索引的叶⼦节点存储着⾏数据，因此主键索引⾮常⾼效。</p><p>MyISAM索引的叶⼦节点存储的是⾏数据地址，需要再寻址⼀次才能得到数据。</p><p>InnoDB⾮主键索引的叶⼦节点存储的是主键和其他带索引的列数据，因此查询时做到覆盖索引会⾮常⾼效。<strong>2.4 InnoDB<strong><strong>引擎的</strong></strong>4****⼤特性</strong></p><p>插⼊缓冲（insert buffer)</p><p>⼆次写(double write)</p><p>⾃适应哈希索引(ahi)</p><p>预读(read ahead)</p><p><strong>存储引擎选择</strong></p><p>如果没有特别的需求，使⽤默认的 Innodb 即可。</p><p>MyISAM：以读写插⼊为主的应⽤程序，⽐如博客系统、新闻⻔户⽹站。</p><p>Innodb：更新（删除）操作频率也⾼，或者要保证数据的完整性；并发量⾼，⽀持事务和外键。⽐如OA⾃动化办</p><p>公系统。</p><p>三 索引</p><h1 id="3-1-什么是索引？"><a href="#3-1-什么是索引？" class="headerlink" title="3.1 什么是索引？"></a><strong>3.1</strong> <strong>什么是索引？</strong></h1><p>索引是⼀种特殊的⽂件(InnoDB数据表上的索引是表空间的⼀个组成部分)，它们包含着对数据表⾥所有记录的引⽤</p><p>指针。</p><p>索引是⼀种数据结构。数据库索引，是数据库管理系统中⼀个排序的数据结构，以协助快速查询、更新数据库表中</p><p>数据。索引的实现通常使⽤B树及其变种B+树。</p><p>更通俗的说，索引就相当于⽬录。为了⽅便查找书中的内容，通过对内容建⽴索引形成⽬录。索引是⼀个⽂件，它</p><p>是要占据物理空间的。</p><h1 id="3-2-索引有哪些优缺点？"><a href="#3-2-索引有哪些优缺点？" class="headerlink" title="3.2 索引有哪些优缺点？"></a><strong>3.2</strong> <strong>索引有哪些优缺点？</strong></h1><p>索引的优点</p><p>可以⼤⼤加快数据的检索速度，这也是创建索引的最主要的原因。</p><p>通过使⽤索引，可以在查询的过程中，使⽤优化隐藏器，提⾼系统的性能。</p><p>索引的缺点</p><p>时间⽅⾯：创建索引和维护索引要耗费时间，具体地，当对表中的数据进⾏增加、删除和修改的时候，索引也</p><p>要动态的维护，会降低增/改/删的执⾏效率；</p><p>空间⽅⾯：索引需要占物理空间。</p><h1 id="3-3-索引使⽤场景（重点）"><a href="#3-3-索引使⽤场景（重点）" class="headerlink" title="3.3 索引使⽤场景（重点）"></a><strong>3.3</strong> <strong>索引使⽤场景（重点）</strong></h1><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>上图中，根据 id 查询记录，因为 id 字段仅建⽴了主键索引，因此此SQL执⾏可选的索引只有主键索引，如果有</p><p>多个，最终会选⼀个较优的作为检索的依据。</p><p>可以尝试在⼀个字段未建⽴索引时，根据该字段查询的效率，然后对该字段建⽴索引（ alter table 表 </p><p>名 add index(字段名) ），同样的SQL执⾏的效率，你会发现查询效率会有明显的提升（数据量越⼤越明</p><p>显）。</p><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><p>当我们使⽤ order by 将查询结果按照某个字段排序时，如果该字段没有建⽴索引，那么执⾏计划会将查询出的所</p><p>有数据使⽤外部排序（将数据从硬盘分批读取到内存使⽤内部排序，最后合并排序结果），这个操作是很影响性能</p><p>的，因为需要将查询涉及到的所有数据从磁盘中读到内存（如果单条数据过⼤或者数据量过多都会降低效率），更</p><p>⽆论读到内存之后的排序了。</p><p>但是如果我们对该字段建⽴索引 alter table 表名 add index(字段名) ，那么由于索引本身是有序的，因此直接按</p><p>照索引的顺序和映射关系逐条取出数据即可。⽽且如果分⻚的，那么只⽤<strong>取出索引表某个范围内的索引对应的数</strong></p><p><strong>据</strong>，⽽不⽤像上述那<strong>取出所有数据</strong>进⾏排序再返回某个范围内的数据。（从磁盘取数据是最影响性能的）</p><p>– 增加⼀个没有建⽴索引的字段</p><p>alter table innodb1 add sex char(1);</p><p>– 按sex检索时可选的索引为null</p><p>EXPLAIN SELECT * from innodb1 where sex=’男’;</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>对 join 语句匹配关系（ on ）涉及的字段建⽴索引能够提⾼效率</p><p>索引覆盖</p><p>如果要查询的字段都建⽴过索引，那么引擎会直接在索引表中查询⽽不会访问原始数据（否则只要有⼀个字段没有</p><p>建⽴索引就会做全表扫描），这叫索引覆盖。因此我们需要尽可能的在 select 后只写必要的查询字段，以增加索</p><p>引覆盖的⼏率。</p><p>这⾥值得注意的是不要想着为每个字段建⽴索引，因为优先使⽤索引的优势就在于其体积⼩。</p><h1 id="3-4-索引有哪⼏种类型？"><a href="#3-4-索引有哪⼏种类型？" class="headerlink" title="3.4 索引有哪⼏种类型？"></a><strong>3.4</strong> <strong>索引有哪⼏种类型？</strong></h1><p><strong>主键索引</strong><strong>:</strong> 数据列不允许重复，不允许为NULL，⼀个表只能有⼀个主键。</p><p><strong>唯⼀索引</strong><strong>:</strong> 数据列不允许重复，允许为NULL值，⼀个表允许多个列创建唯⼀索引。</p><p>可以通过 ALTER TABLE table_name ADD UNIQUE (column); 创建唯⼀索引</p><p>可以通过 ALTER TABLE table_name ADD UNIQUE (column1,column2); 创建唯⼀组合索引</p><p><strong>普通索引</strong><strong>:</strong> 基本的索引类型，没有唯⼀性的限制，允许为NULL值。</p><p>可以通过 ALTER TABLE table_name ADD INDEX index_name (column); 创建普通索引</p><p>可以通过 ALTER TABLE table_name ADD INDEX index_name(column1, column2, column3); 创建组合索引</p><p><strong>全⽂索引：</strong> 是⽬前搜索引擎使⽤的⼀种关键技术。</p><p>可以通过 ALTER TABLE table_name ADD FULLTEXT (column); 创建全⽂索引</p><h1 id="3-5-索引的数据结构（b树，hash）"><a href="#3-5-索引的数据结构（b树，hash）" class="headerlink" title="3.5 索引的数据结构（b树，hash）"></a><strong>3.5</strong> <strong>索引的数据结构（</strong>b树，hash）</h1><p>索引的数据结构和具体存储引擎的实现有关，在MySQL中使⽤较多的索引有<strong>Hash****索引</strong>，**B+**<strong>树索引</strong>等，⽽我们经常</p><p>使⽤的InnoDB存储引擎的默认索引实现为：B+树索引。对于哈希索引来说，底层的数据结构就是哈希表，因此在</p><p>绝⼤多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余⼤部分场景，建议选择BTree索</p><p>引。</p><p>1）B树索引</p><p>mysql通过存储引擎取数据，基本上90%的⼈⽤的就是InnoDB了，按照实现⽅式分，InnoDB的索引类型⽬前只有</p><p>两种：BTREE（</p><p>B树）索引和HASH索引。B树索引是Mysql数据库中使⽤最频繁的索引类型，基本所有存储引擎都</p><p>⽀持BTree索引。通常我们说的索引不出意外指的就是（</p><p>B树）索引（实际是⽤B+树实现的，因为在查看表索引</p><p>时，mysql⼀律打印BTREE，所以简称为B树索引）查询⽅式：</p><p>主键索引区:PI(关联保存的时数据的地址)按主键查询,</p><p>普通索引区:si(关联的id的地址,然后再到达上⾯的地址)。所以按主键查询,速度最快</p><p>B+tree性质：</p><p>1.）n棵⼦tree的节点包含n个关键字，不⽤来保存数据⽽是保存数据的索引。</p><p>2.）所有的叶⼦结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶⼦结点本身依关键字的⼤</p><p>⼩⾃⼩⽽⼤顺序链接。</p><p>3.）所有的⾮终端结点可以看成是索引部分，结点中仅含其⼦树中的最⼤（或最⼩）关键字。</p><p>4.）B+ 树中，数据对象的插⼊和删除仅在叶节点上进⾏。</p><p>5.）B+树有2个头指针，⼀个是树的根节点，⼀个是最⼩关键码的叶节点。</p><p>2）哈希索引</p><p>简要说下，类似于数据结构中简单实现的HASH表（散列表）⼀样，当我们在mysql中⽤哈希索引时，主要就是通</p><p>过Hash算法（常⻅的Hash算法有直接定址法、平⽅取中法、折叠法、除数取余法、随机数法），将数据库字段数</p><p>据转换成定⻓的Hash值，与这条数据的⾏指针⼀并存⼊Hash表的对应位置；如果发⽣Hash碰撞（两个不同关键字</p><p>的Hash值相同），则在对应Hash键下以链表形式存储。当然这只是简略模拟图。<strong>3.6</strong> <strong>索引的基本原理</strong></p><p>索引⽤来快速地寻找那些具有特定值的记录。如果没有索引，⼀般来说执⾏查询时遍历整张表。</p><p>索引的原理很简单，就是把⽆序的数据变成有序的查询</p><p>\1. 把创建了索引的列的内容进⾏排序</p><p>\2. 对排序结果⽣成倒排表</p><p>\3. 在倒排表内容上拼上数据地址链</p><p>\4. 在查询的时候，先拿到倒排表内容，再取出数据地址链，从⽽拿到具体数据</p><h1 id="3-7-索引算法有哪些？"><a href="#3-7-索引算法有哪些？" class="headerlink" title="3.7 索引算法有哪些？"></a><strong>3.7</strong> <strong>索引算法有哪些？</strong></h1><p>索引算法有 BTree算法和Hash算法</p><p><strong>BTree****算法</strong></p><p>BTree是最常⽤的mysql数据库索引算法，也是mysql默认的算法。因为它不仅可以被⽤在=,&gt;,&gt;=,&lt;,&lt;=和between这</p><p>些⽐较操作符上，⽽且还可以⽤于like操作符，只要它的查询条件是⼀个不以通配符开头的常量， 例如：</p><p><strong>Hash****算法</strong></p><p>– 只要它的查询条件是⼀个不以通配符开头的常量</p><p>select * from user where name like ‘jack%’;</p><p>– 如果⼀通配符开头，或者没有使⽤常量，则不会使⽤索引，例如：</p><p>select * from user where name like ‘%jack’;</p><p>1234Hash Hash索引只能⽤于对等⽐较，例如=,&lt;=&gt;（相当于=）操作符。由于是⼀次定位数据，不像BTree索引需要从</p><p>根节点到枝节点，最后才能访问到⻚节点这样多次IO访问，所以检索效率远⾼于BTree索引。</p><h1 id="3-8-索引设计的原则？"><a href="#3-8-索引设计的原则？" class="headerlink" title="3.8 索引设计的原则？"></a><strong>3.8</strong> <strong>索引设计的原则？</strong></h1><p>\1. 适合索引的列是出现在where⼦句中的列，或者连接⼦句中指定的列</p><p>\2. 基数较⼩的类，索引效果较差，没有必要在此列建⽴索引</p><p>\3. 使⽤短索引，如果对⻓字符串列进⾏索引，应该指定⼀个前缀⻓度，这样能够节省⼤量索引空间</p><p>\4. 不要过度索引。索引需要额外的磁盘空间，并降低写操作的性能。在修改表内容的时候，索引会进⾏更新甚⾄</p><p>重构，索引列越多，这个时间就会越⻓。所以只保持需要的索引有利于查询即可。</p><h1 id="3-9-创建索引的原则（重中之重）"><a href="#3-9-创建索引的原则（重中之重）" class="headerlink" title="3.9 创建索引的原则（重中之重）"></a><strong>3.9</strong> <strong>创建索引的原则（重中之重）</strong></h1><p>索引虽好，但也不是⽆限制的使⽤，最好符合⼀下⼏个原则</p><p>1） 最左前缀匹配原则，组合索引⾮常重要的原则，mysql会⼀直向右匹配直到遇到范围查询(&gt;、&lt;、between、</p><p>like)就停⽌匹配，⽐如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建⽴(a,b,c,d)顺序的索引，d是⽤不到索引的，如果</p><p>建⽴(a,b,d,c)的索引则都可以⽤到，a,b,d的顺序可以任意调整。</p><p>2）较频繁作为查询条件的字段才去创建索引</p><p>3）更新频繁字段不适合创建索引</p><p>4）若是不能有效区分数据的列不适合做索引列(如性别，男⼥未知，最多也就三种，区分度实在太低) </p><p>5）尽量的扩展索引，不要新建索引。⽐如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引</p><p>即可。</p><p>6）定义有外键的数据列⼀定要建⽴索引。</p><p>7）对于那些查询中很少涉及的列，重复值⽐较多的列不要建⽴索引。</p><p>8）对于定义为text、image和bit的数据类型的列不要建⽴索引。</p><h1 id="3-10-创建索引的三种⽅式，删除索引"><a href="#3-10-创建索引的三种⽅式，删除索引" class="headerlink" title="3.10 创建索引的三种⽅式，删除索引"></a><strong>3.10</strong> <strong>创建索引的三种⽅式，删除索引</strong></h1><p>第⼀种⽅式：在执⾏CREATE TABLE时创建索引CREATE TABLE user_index2 (</p><p> id INT auto_increment PRIMARY KEY,</p><p> first_name VARCHAR (16),</p><p> last_name VARCHAR (16),</p><p> id_card VARCHAR (18),</p><p> information text,</p><p> KEY name (first_name, last_name),</p><p> FULLTEXT KEY (information),</p><p> UNIQUE KEY (id_card)</p><p>);</p><p>12345678910</p><p>第⼆种⽅式：使⽤ALTER TABLE命令去增加索引</p><p>ALTER TABLE table_name ADD INDEX index_name (column_list);</p><p>1</p><p>ALTER TABLE⽤来创建普通索引、UNIQUE索引或PRIMARY KEY索引。</p><p>其中table_name是要增加索引的表名，column_list指出对哪些列进⾏索引，多列时各列之间⽤逗号分隔。</p><p>索引名index_name可⾃⼰命名，缺省时，MySQL将根据第⼀个索引列赋⼀个名称。另外，ALTER TABLE允许在单</p><p>个语句中更改多个表，因此可以在同时创建多个索引。</p><p>第三种⽅式：使⽤CREATE INDEX命令创建</p><p>CREATE INDEX index_name ON table_name (column_list);</p><p>1</p><p>CREATE INDEX可对表增加普通索引或UNIQUE索引。（但是，不能创建PRIMARY KEY索引）</p><p>删除索引</p><p>根据索引名删除普通索引、唯⼀索引、全⽂索引： alter table 表名 drop KEY 索引名</p><p>alter table user_index drop KEY name;</p><p>alter table user_index drop KEY id_card;</p><p>alter table user_index drop KEY information;</p><p>123删除主键索引： alter table 表名 drop primary key （因为主键只有⼀个）。这⾥值得注意的是，如果主键⾃增</p><p>⻓，那么不能直接执⾏此操作（⾃增⻓依赖于主键索引）：</p><p>需要取消⾃增⻓再⾏删除：</p><p>但通常不会删除主键，因为设计主键⼀定与业务逻辑⽆关。</p><h1 id="3-11-创建索引时需要注意什么？"><a href="#3-11-创建索引时需要注意什么？" class="headerlink" title="3.11 创建索引时需要注意什么？"></a><strong>3.11</strong> <strong>创建索引时需要注意什么？</strong></h1><p>⾮空字段：应该指定列为NOT NULL，除⾮你想存储NULL。在mysql中，含有空值的列很难进⾏查询优化，因</p><p>为它们使得索引、索引的统计信息以及⽐较运算更加复杂。你应该⽤0、⼀个特殊的值或者⼀个空串代替空</p><p>值；</p><p>取值离散⼤的字段：（变量各个取值之间的差异程度）的列放到联合索引的前⾯，可以通过count()函数查看字</p><p>段的差异值，返回值越⼤说明字段的唯⼀值越多字段的离散程度⾼；</p><p>索引字段越⼩越好：数据库的数据存储以⻚为单位⼀⻚存储的数据越多⼀次IO操作获取的数据越⼤效率越⾼。</p><h1 id="3-12-使⽤索引查询⼀定能提⾼查询的性能吗？为什么"><a href="#3-12-使⽤索引查询⼀定能提⾼查询的性能吗？为什么" class="headerlink" title="3.12 使⽤索引查询⼀定能提⾼查询的性能吗？为什么"></a><strong>3.12</strong> <strong>使⽤索引查询⼀定能提⾼查询的性能吗？为什么</strong></h1><p>通常，通过索引查询数据⽐全表扫描要快。但是我们也必须注意到它的代价。</p><p>索引需要空间来存储，也需要定期维护， 每当有记录在表中增减或索引列被修改时，索引本身也会被修改。</p><p>这意味着每条记录的INSERT，DELETE，UPDATE将为此多付出4，5 次的磁盘I/O。 因为索引需要额外的存储</p><p>空间和处理，那些不必要的索引反⽽会使查询反应时间变慢。使⽤索引查询不⼀定能提⾼查询性能，索引范围</p><p>查询(INDEX RANGE SCAN)适⽤于两种情况:</p><p>基于⼀个范围的检索，⼀般查询返回结果集⼩于表中记录数的30%</p><p>基于⾮唯⼀性索引的检索</p><p>alter table user_index</p><p>– 重新定义字段</p><p>MODIFY id int,</p><p>drop PRIMARY KEY</p><h1 id="3-13-百万级别或以上的数据如何删除"><a href="#3-13-百万级别或以上的数据如何删除" class="headerlink" title="3.13 百万级别或以上的数据如何删除"></a><strong>3.13</strong> <strong>百万级别或以上的数据如何删除</strong></h1><p>关于索引：由于索引需要额外的维护成本，因为索引⽂件是单独存在的⽂件,所以当我们对数据的增加,修改,删除,都</p><p>会产⽣额外的对索引⽂件的操作,这些操作需要消耗额外的IO,会降低增/改/删的执⾏效率。所以，在我们删除数据库</p><p>百万级别数据的时候，查询MySQL官⽅⼿册得知删除数据的速度和创建的索引数量是成正⽐的。</p><p>\1. 所以我们想要删除百万数据的时候可以先删除索引（此时⼤概耗时三分多钟）</p><p>\2. 然后删除其中⽆⽤数据（此过程需要不到两分钟）</p><p>\3. 删除完成后重新创建索引(此时数据较少了)创建索引也⾮常快，约⼗分钟左右。</p><p>\4. 与之前的直接删除绝对是要快速很多，更别说万⼀删除中断,⼀切删除会回滚。那更是坑了。</p><h1 id="3-14-前缀索引"><a href="#3-14-前缀索引" class="headerlink" title="3.14 前缀索引"></a><strong>3.14</strong> <strong>前缀索引</strong></h1><p>语法： index(field(10)) ，使⽤字段值的前10个字符建⽴索引，默认是使⽤字段的全部内容建⽴索引。</p><p>前提：前缀的标识度⾼。⽐如密码就适合建⽴前缀索引，因为密码⼏乎各不相同。</p><p>实操的难度：在于前缀截取的⻓度。</p><p>我们可以利⽤ select count(*)/count(distinct left(password,prefixLen)); ，通过从调整 prefixLen 的值</p><p>（从1⾃增）查看不同前缀⻓度的⼀个平均匹配度，接近1时就可以了（表示⼀个密码的前 prefixLen 个字符⼏乎</p><p>能确定唯⼀⼀条记录）</p><h1 id="3-15-什么是最左前缀原则？什么是最左匹配原则"><a href="#3-15-什么是最左前缀原则？什么是最左匹配原则" class="headerlink" title="3.15 什么是最左前缀原则？什么是最左匹配原则"></a><strong>3.15</strong> <strong>什么是最左前缀原则？什么是最左匹配原则</strong></h1><p>顾名思义，就是最左优先，在创建多列索引时，要根据业务需求，where⼦句中使⽤最频繁的⼀列放在最左</p><p>边。</p><p>最左前缀匹配原则，⾮常重要的原则，mysql会⼀直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停⽌</p><p>匹配，⽐如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建⽴(a,b,c,d)顺序的索引，d是⽤不到索引的，如果建⽴</p><p>(a,b,d,c)的索引则都可以⽤到，a,b,d的顺序可以任意调整。</p><p>=和in可以乱序，⽐如a = 1 and b = 2 and c = 3 建⽴(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化</p><p>成索引可以识别的形式</p><h1 id="3-16-B树和B-树的区别"><a href="#3-16-B树和B-树的区别" class="headerlink" title="3.16 B树和B+树的区别"></a><strong>3.16 B</strong>树和B+树的区别</h1><p>在B树中，你可以将键和值存放在内部节点和叶⼦节点；但在B+树中，内部节点都是键，没有值，叶⼦节点同</p><p>时存放键和值。</p><p>B+树的叶⼦节点有⼀条链相连，⽽B树的叶⼦节点各⾃独⽴。<strong>3.17</strong> <strong>使⽤<strong><strong>B</strong></strong>树的好处</strong></p><p>B树可以在内部节点同时存储键和值，因此，把频繁访问的数据放在靠近根节点的地⽅将会⼤⼤提⾼热点数据的查</p><p>询效率。这种特性使得B树在特定数据重复多次查询的场景中更加⾼效。</p><h1 id="3-18-使⽤B-树的好处"><a href="#3-18-使⽤B-树的好处" class="headerlink" title="3.18 使⽤B+树的好处"></a><strong>3.18</strong> <strong>使⽤</strong>B+树的好处</h1><p>由于B+树的内部节点只存放键，不存放值，因此，⼀次读取，可以在内存⻚中获取更多的键，有利于更快地缩⼩查</p><p>找范围。 B+树的叶节点由⼀条链相连，因此，当需要进⾏⼀次全数据遍历的时候，B+树只需要使⽤O(logN)时间找</p><p>到最⼩的⼀个节点，然后通过链进⾏O(N)的顺序遍历即可。⽽B树则需要对树的每⼀层进⾏遍历，这会需要更多的</p><p>内存置换次数，因此也就需要花费更多的时间</p><h1 id="3-19-Hash索引和B-树所有有什么区别或者说优劣呢"><a href="#3-19-Hash索引和B-树所有有什么区别或者说优劣呢" class="headerlink" title="3.19 Hash索引和B+树所有有什么区别或者说优劣呢?"></a><strong>3.19 Hash</strong>索引和B+树所有有什么区别或者说优劣呢?</h1><p>⾸先要知道Hash索引和B+树索引的底层实现原理：</p><p>hash索引底层就是hash表，进⾏查找时，调⽤⼀次hash函数就可以获取到相应的键值，之后进⾏回表查询获得实</p><p>际数据。B+树底层实现是多路平衡查找树。对于每⼀次的查询都是从根节点出发，查找到叶⼦节点⽅可以获得所查</p><p>键值，然后根据查询判断是否需要回表查询数据。</p><p>那么可以看出他们有以下的不同：</p><p>hash索引进⾏等值查询更快(⼀般情况下)，但是却⽆法进⾏范围查询。</p><p>因为在hash索引中经过hash函数建⽴索引之后，索引的顺序与原顺序⽆法保持⼀致，不能⽀持范围查询。⽽B+树</p><p>的的所有节点皆遵循(左节点⼩于⽗节点，右节点⼤于⽗节点，多叉树也类似)，天然⽀持范围。</p><p>hash索引不⽀持使⽤索引进⾏排序，原理同上。</p><p>hash索引不⽀持模糊查询以及多列索引的最左前缀匹配。原理也是因为hash函数的不可预测。AAAA和AAAAB</p><p>的索引没有相关性。</p><p>hash索引任何时候都避免不了回表查询数据，⽽B+树在符合某些条件(聚簇索引，覆盖索引等)的时候可以只通</p><p>过索引完成查询。</p><p>hash索引虽然在等值查询上较快，但是不稳定。性能不可预测，当某个键值存在⼤量重复的时候，发⽣hash碰撞，此时效率可能极差。⽽B+树的查询效率⽐较稳定，对于所有的查询都是从根节点到叶⼦节点，且树的⾼度</p><p>较低。</p><p>因此，在⼤多数情况下，直接选择B+树索引可以获得稳定且较好的查询速度。⽽不需要使⽤hash索引。</p><h1 id="3-20-数据库为什么使⽤B-树⽽不是B树"><a href="#3-20-数据库为什么使⽤B-树⽽不是B树" class="headerlink" title="3.20 数据库为什么使⽤B+树⽽不是B树"></a><strong>3.20</strong> <strong>数据库为什么使⽤</strong>B+树⽽不是B树</h1><p>B树只适合随机检索，⽽B+树同时⽀持随机检索和顺序检索；</p><p>B+树空间利⽤率更⾼，可减少I/O次数，磁盘读写代价更低。⼀般来说，索引本身也很⼤，不可能全部存储在</p><p>内存中，因此索引往往以索引⽂件的形式存储的磁盘上。这样的话，索引查找过程中就要产⽣磁盘I/O消耗。</p><p>B+树的内部结点并没有指向关键字具体信息的指针，只是作为索引使⽤，其内部结点⽐B树⼩，盘块能容纳的</p><p>结点中关键字数量更多，⼀次性读⼊内存中可以查找的关键字也就越多，相对的，IO读写次数也就降低了。⽽</p><p>IO读写次数是影响索引检索效率的最⼤因素；</p><p>B+树的查询效率更加稳定。B树搜索有可能会在⾮叶⼦结点结束，越靠近根节点的记录查找时间越短，只要找</p><p>到关键字即可确定记录的存在，其性能等价于在关键字全集内做⼀次⼆分查找。⽽在B+树中，顺序检索⽐较明</p><p>显，随机检索时，任何关键字的查找都必须⾛⼀条从根节点到叶节点的路，所有关键字的查找路径⻓度相同，</p><p>导致每⼀个关键字的查询效率相当。</p><p>B-树在提⾼了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。B+树的叶⼦节点使⽤指针顺序连接在</p><p>⼀起，只要遍历叶⼦节点就可以实现整棵树的遍历。⽽且在数据库中基于范围的查询是⾮常频繁的，⽽B树不</p><p>⽀持这样的操作。</p><p>增删⽂件（节点）时，效率更⾼。因为B+树的叶⼦节点包含所有关键字，并以有序的链表结构存储，这样可很</p><p>好提⾼增删效率。</p><h1 id="3-21-B-树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据"><a href="#3-21-B-树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据" class="headerlink" title="**3.21 B+**树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据"></a>**3.21 B+**树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据</h1><p>在B+树的索引中，叶⼦节点可能存储了当前的key值，也可能存储了当前的key值以及整⾏的数据，这就是聚簇索</p><p>引和⾮聚簇索引。 在InnoDB中，只有主键索引是聚簇索引，如果没有主键，则挑选⼀个唯⼀键建⽴聚簇索引。如</p><p>果没有唯⼀键，则隐式的⽣成⼀个键来建⽴聚簇索引。</p><p>当查询使⽤聚簇索引时，在对应的叶⼦节点，可以获取到整⾏数据，因此不⽤再次进⾏回表查询。</p><h1 id="3-22-什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引"><a href="#3-22-什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引" class="headerlink" title="3.22 什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引"></a><strong>3.22</strong> <strong>什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引</strong></h1><p>聚簇索引：将数据存储与索引放到了⼀块，找到索引也就找到了数据</p><p>⾮聚簇索引：将数据存储于索引分开结构，索引结构的叶⼦节点指向了数据的对应⾏，myisam通过key_buffer</p><p>把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找</p><p>到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因</p><p>澄清⼀个概念：innodb中，在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要⼆次查找，⾮</p><p>聚簇索引都是辅助索引，像复合索引、前缀索引、唯⼀索引，辅助索引叶⼦节点存储的不再是⾏的物理位置，⽽是</p><p>主键值</p><p>何时使⽤聚簇索引与⾮聚簇索引</p><h1 id="3-23-⾮聚簇索引⼀定会回表查询吗？"><a href="#3-23-⾮聚簇索引⼀定会回表查询吗？" class="headerlink" title="3.23 ⾮聚簇索引⼀定会回表查询吗？"></a><strong>3.23</strong> <strong>⾮聚簇索引⼀定会回表查询吗？</strong></h1><p>不⼀定，这涉及到查询语句所要求的字段是否全部命中了索引，如果全部命中了索引，那么就不必再进⾏回表查</p><p>询。</p><p>举个简单的例⼦，假设我们在员⼯表的年龄上建⽴了索引，那么当进⾏ select age from employee where age &lt;</p><p>20 的查询时，在索引的叶⼦节点上，已经包含了age信息，不会再次进⾏回表查询。</p><h1 id="3-24-联合索引是什么？为什么需要注意联合索引中的顺序？"><a href="#3-24-联合索引是什么？为什么需要注意联合索引中的顺序？" class="headerlink" title="3.24 联合索引是什么？为什么需要注意联合索引中的顺序？"></a><strong>3.24</strong> <strong>联合索引是什么？为什么需要注意联合索引中的顺序？</strong></h1><p>MySQL可以使⽤多个字段同时建⽴⼀个索引，叫做联合索引。在联合索引中，如果想要命中索引，需要按照建⽴索</p><p>引时的字段顺序挨个使⽤，否则⽆法命中索引。</p><p>具体原因为:</p><p>MySQL使⽤索引时需要索引有序，假设现在建⽴了”name，age，school”的联合索引，那么索引的排序为: 先按照</p><p>name排序，如果name相同，则按照age排序，如果age的值也相等，则按照school进⾏排序。</p><p>当进⾏查询时，此时索引仅仅按照name严格有序，因此必须⾸先使⽤name字段进⾏等值查询，之后对于匹配到的</p><p>列⽽⾔，其按照age字段严格有序，此时可以使⽤age字段⽤做索引查找，以此类推。因此在建⽴联合索引的时候应</p><p>该注意索引列的顺序，⼀般情况下，将查询需求频繁或者字段选择性⾼的列放在前⾯。此外可以根据特例的查询或</p><p>者表结构进⾏单独的调整。</p><p>四 事务四 事务</p><h1 id="4-1-什么是数据库事务？"><a href="#4-1-什么是数据库事务？" class="headerlink" title="4.1 什么是数据库事务？"></a><strong>4.1</strong> <strong>什么是数据库事务？</strong></h1><p>事务是⼀个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执⾏的结果必须使数据库从⼀种⼀致</p><p>性状态变到另⼀种⼀致性状态。事务是逻辑上的⼀组操作，要么都执⾏，要么都不执⾏。</p><p>事务最经典也经常被拿出来说例⼦就是转账了。</p><p>假如⼩明要给⼩红转账1000元，这个转账会涉及到两个关键操作就是：将⼩明的余额减少1000元，将⼩红的余额</p><p>增加1000元。万⼀在这两个操作之间突然出现错误⽐如银⾏系统崩溃，导致⼩明余额减少⽽⼩红的余额没有增加，</p><p>这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p><h1 id="4-2-事物的四⼤特性-ACID-介绍⼀下"><a href="#4-2-事物的四⼤特性-ACID-介绍⼀下" class="headerlink" title="4.2 事物的四⼤特性(ACID)介绍⼀下?"></a><strong>4.2</strong> <strong>事物的四⼤特性</strong>(ACID)介绍⼀下?</h1><p>关系性数据库需要遵循ACID规则，具体内容如下：</p><p>\1. <strong>原⼦性：</strong> 事务是最⼩的执⾏单位，不允许分割。事务的原⼦性确保动作要么全部完成，要么完全不起作⽤；</p><p>\2. <strong>⼀致性：</strong> 执⾏事务前后，数据保持⼀致，多个事务对同⼀个数据读取的结果是相同的；</p><p>\3. <strong>隔离性：</strong> 并发访问数据库时，⼀个⽤户的事务不被其他事务所⼲扰，各并发事务之间数据库是独⽴的；</p><p>\4. <strong>持久性：</strong> ⼀个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发⽣故障也不应该对其有任何</p><p>影响。</p><h1 id="4-3-什么是脏读？幻读？不可重复读？"><a href="#4-3-什么是脏读？幻读？不可重复读？" class="headerlink" title="4.3 什么是脏读？幻读？不可重复读？"></a><strong>4.3</strong> <strong>什么是脏读？幻读？不可重复读？</strong></h1><p>脏读(Drity Read)：某个事务已更新⼀份数据，另⼀个事务在此时读取了同⼀份数据，由于某些原因，前⼀个</p><p>RollBack了操作，则后⼀个事务所读取的数据就会是不正确的。</p><p>不可重复读(Non-repeatable read):在⼀个事务的两次查询之中数据不⼀致，这可能是两次查询过程中间插⼊了</p><p>⼀个事务更新的原有的数据。</p><p>幻读(Phantom Read):在⼀个事务的两次查询中数据笔数不⼀致，例如有⼀个事务查询了⼏列(Row)数据，⽽另</p><p>⼀个事务却在此时插⼊了新的⼏列数据，先前的事务在接下来的查询中，就会发现有⼏列数据是它先前所没有</p><p>的。</p><h1 id="4-4-什么是事务的隔离级别？MySQL的默认隔离级别是什么？"><a href="#4-4-什么是事务的隔离级别？MySQL的默认隔离级别是什么？" class="headerlink" title="4.4 什么是事务的隔离级别？MySQL的默认隔离级别是什么？"></a><strong>4.4</strong> 什么是事务的隔离级别？MySQL的默认隔离级别是什么？</h1><p>为了达到事务的四⼤特性，数据库定义了4种不同的事务隔离级别，由低到⾼依次为Read uncommitted、Read</p><p>committed、Repeatable read、Serializable，这四个级别可以逐个解决脏读、不可重复读、幻读这⼏类问题。<strong>隔离级别</strong> </p><p><strong>脏读</strong> </p><p><strong>不可重复读</strong> </p><p><strong>幻影读</strong></p><p>READ-UNCOMMITTED </p><p>READ-COMMITTED </p><p>REPEATABLE-READ </p><p>SERIALIZABLE </p><p><strong>SQL</strong> <strong>标准定义了四个隔离级别：</strong></p><p><strong>READ-UNCOMMITTED(<strong><strong>读取未提交</strong></strong>)*<em><strong>：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，</em>*可能会导致脏读、</strong></p><p><strong>幻读或不可重复读</strong>。</p><p><strong>READ-COMMITTED(<strong><strong>读取已提交</strong></strong>)*<em><strong>：</strong> 允许读取并发事务已经提交的数据，</em>*可以阻⽌脏读，但是幻读或不可重复</strong></p><p><strong>读仍有可能发⽣</strong>。</p><p>**REPEATABLE-READ(<strong><strong>可重复读</strong></strong>)**<strong>：</strong> 对同⼀字段的多次读取结果都是⼀致的，除⾮数据是被本身事务⾃⼰所修</p><p>改，<strong>可以阻⽌脏读和不可重复读，但幻读仍有可能发⽣</strong>。</p><p>**SERIALIZABLE(<strong><strong>可串⾏化</strong></strong>)**<strong>：</strong> 最⾼的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执⾏，这样事</p><p>务之间就完全不可能产⽣⼲扰，也就是说，<strong>该级别可以防⽌脏读、不可重复读以及幻读</strong>。</p><p>这⾥需要注意的是：Mysql 默认采⽤的 REPEATABLE_READ隔离级别 Oracle 默认采⽤的 READ_COMMITTED隔离</p><p>级别</p><p>事务隔离机制的实现基于锁机制和并发调度。其中并发调度使⽤的是MVVC（多版本并发控制），通过保存修改的</p><p>旧版本信息来⽀持并发⼀致性读和回滚等特性。</p><p>因为隔离级别越低，事务请求的锁越少，所以⼤部分数据库系统的隔离级别都是**READ-COMMITTED(**<strong>读取提交内</strong></p><p><strong>容</strong>**):*<em>，但是你要知道的是InnoDB 存储引擎默认使⽤ <strong>REPEATABLE-READ</strong></em>*（可重读）**并不会有任何性能损失。</p><p>InnoDB 存储引擎在 <strong>分布式事务</strong> 的情况下⼀般会⽤到**SERIALIZABLE(<strong><strong>可串⾏化</strong></strong>)**隔离级别。</p><p>五 锁</p><h1 id="5-1-对MySQL的锁了解吗"><a href="#5-1-对MySQL的锁了解吗" class="headerlink" title="5.1 对MySQL的锁了解吗"></a><strong>5.1</strong> <strong>对</strong>MySQL的锁了解吗</h1><p>当数据库有并发事务的时候，可能会产⽣数据的不⼀致，这时候需要⼀些机制来保证访问的次序，锁机制就是这样</p><p>的⼀个机制。</p><p>就像酒店的房间，如果⼤家随意进出，就会出现多⼈抢夺同⼀个房间的情况，⽽在房间上装上锁，申请到钥匙的⼈</p><p>才可以⼊住并且将房间锁起来，其他⼈只有等他使⽤完毕才可以再次使⽤。</p><h1 id="5-2-隔离级别与锁的关系"><a href="#5-2-隔离级别与锁的关系" class="headerlink" title="5.2 隔离级别与锁的关系"></a><strong>5.2</strong> <strong>隔离级别与锁的关系</strong></h1><p>在Read Uncommitted级别下，读取数据不需要加共享锁，这样就不会跟被修改的数据上的排他锁冲突</p><p>在Read Committed级别下，读操作需要加共享锁，但是在语句执⾏完以后释放共享锁；</p><p>在Repeatable Read级别下，读操作需要加共享锁，但是在事务提交之前并不释放共享锁，也就是必须等待事务执</p><p>⾏完毕以后才释放共享锁。</p><p>SERIALIZABLE 是限制性最强的隔离级别，因为该级别<strong>锁定整个范围的键</strong>，并⼀直持有锁，直到事务完成。</p><h1 id="5-3-按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法"><a href="#5-3-按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法" class="headerlink" title="5.3 按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法"></a><strong>5.3</strong> <strong>按照锁的粒度分数据库锁有哪些？锁机制与</strong>InnoDB锁算法</h1><p>在关系型数据库中，可以<strong>按照锁的粒度把数据库锁分</strong>为⾏级锁(INNODB引擎)、表级锁(MYISAM引擎)和⻚级锁(BDB</p><p>引擎 )。</p><p><strong>MyISAM<strong><strong>和</strong></strong>InnoDB****存储引擎使⽤的锁：</strong></p><p>MyISAM采⽤表级锁(table-level locking)。</p><p>InnoDB⽀持⾏级锁(row-level locking)和表级锁，默认为⾏级锁</p><p>⾏级锁，表级锁和⻚级锁对⽐</p><p><strong>⾏级锁</strong> ⾏级锁是Mysql中锁定粒度最细的⼀种锁，表示只针对当前操作的⾏进⾏加锁。⾏级锁能⼤⼤减少数据库操</p><p>作的冲突。其加锁粒度最⼩，但加锁的开销也最⼤。⾏级锁分为共享锁 和 排他锁。</p><p>特点：开销⼤，加锁慢；会出现死锁；锁定粒度最⼩，发⽣锁冲突的概率最低，并发度也最⾼。</p><p><strong>表级锁</strong> 表级锁是MySQL中锁定粒度最⼤的⼀种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，</p><p>被⼤部分MySQL引擎⽀持。最常使⽤的MYISAM与INNODB都⽀持表级锁定。表级锁定分为表共享读锁（共享锁）</p><p>与表独占写锁（排他锁）。</p><p>特点：开销⼩，加锁快；不会出现死锁；锁定粒度⼤，发出锁冲突的概率最⾼，并发度最低。</p><p><strong>⻚级锁</strong> ⻚级锁是MySQL中锁定粒度介于⾏级锁和表级锁中间的⼀种锁。表级锁速度快，但冲突多，⾏级冲突少，</p><p>但速度慢。所以取了折衷的⻚级，⼀次锁定相邻的⼀组记录。</p><p>特点：开销和加锁时间界于表锁和⾏锁之间；会出现死锁；锁定粒度界于表锁和⾏锁之间，并发度⼀般</p><h1 id="5-4-从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了"><a href="#5-4-从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了" class="headerlink" title="5.4 从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了"></a>5.4 从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了</h1><p><strong>从锁的类别上来讲</strong>，有共享锁和排他锁。</p><p>共享锁: ⼜叫做读锁。 当⽤户要进⾏数据的读取时，对数据加上共享锁。共享锁可以同时加上多个。排他锁: ⼜叫做写锁。 当⽤户要进⾏数据的写⼊时，对数据加上排他锁。排他锁只可以加⼀个，他和其他的排他</p><p>锁，共享锁都相斥。</p><p>⽤上⾯的例⼦来说就是⽤户的⾏为有两种，⼀种是来看房，多个⽤户⼀起看房是可以接受的。 ⼀种是真正的⼊住⼀</p><p>晚，在这期间，⽆论是想⼊住的还是想看房的都不可以。</p><p>锁的粒度取决于具体的存储引擎，InnoDB实现了⾏级锁，⻚级锁，表级锁。</p><p>他们的加锁开销从⼤到⼩，并发能⼒也是从⼤到⼩。</p><h1 id="5-5-MySQL中InnoDB引擎的⾏锁是怎么实现的"><a href="#5-5-MySQL中InnoDB引擎的⾏锁是怎么实现的" class="headerlink" title="5.5 MySQL中InnoDB引擎的⾏锁是怎么实现的"></a>5.5 MySQL中InnoDB引擎的⾏锁是怎么实现的</h1><p>答：InnoDB是基于索引来完成⾏锁</p><p>例: select * from tab_with_index where id = 1 for update;</p><p>for update 可以根据条件来完成⾏锁锁定，并且 id 是有索引键的列，如果 id 不是索引键那么InnoDB将完成表锁，</p><p>并发将⽆从谈起</p><h1 id="5-6-InnoDB存储引擎的锁的算法有三种"><a href="#5-6-InnoDB存储引擎的锁的算法有三种" class="headerlink" title="5.6 InnoDB存储引擎的锁的算法有三种"></a>5.6 InnoDB存储引擎的锁的算法有三种</h1><p>Record lock：单个⾏记录上的锁</p><p>Gap lock：间隙锁，锁定⼀个范围，不包括记录本身</p><p>Next-key lock：record+gap 锁定⼀个范围，包含记录本身</p><p><strong>相关知识点：</strong></p><p>\1. innodb对于⾏的查询使⽤next-key lock</p><p>\2. Next-locking keying为了解决Phantom Problem幻读问题</p><p>\3. 当查询的索引含有唯⼀属性时，将next-key lock降级为record key</p><p>\4. Gap锁设计的⽬的是为了阻⽌多个事务将记录插⼊到同⼀范围内，⽽这会导致幻读问题的产⽣</p><p>\5. 有两种⽅式显式关闭gap锁：（除了外键约束和唯⼀性检查外，其余情况仅使⽤record lock） A. 将事务隔离级</p><p>别设置为RC B. 将参数innodb_locks_unsafe_for_binlog设置为1</p><h1 id="5-7-什么是死锁？怎么解决？"><a href="#5-7-什么是死锁？怎么解决？" class="headerlink" title="5.7 什么是死锁？怎么解决？"></a><strong>5.7</strong> <strong>什么是死锁？怎么解决？</strong></h1><p>死锁是指两个或多个事务在同⼀资源上相互占⽤，并请求锁定对⽅的资源，从⽽导致恶性循环的现象。</p><p>常⻅的解决死锁的⽅法</p><p>1、如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以⼤⼤降低死锁机会。</p><p>2、在同⼀个事务中，尽可能做到⼀次锁定所需要的所有资源，减少死锁产⽣概率；</p><p>3、对于⾮常容易产⽣死锁的业务部分，可以尝试使⽤升级锁定颗粒度，通过表级锁定来减少死锁产⽣的概率；如果业务处理不好可以⽤分布式事务锁或者使⽤乐观锁</p><h1 id="5-8-数据库的乐观锁和悲观锁是什么？怎么实现的？"><a href="#5-8-数据库的乐观锁和悲观锁是什么？怎么实现的？" class="headerlink" title="5.8 数据库的乐观锁和悲观锁是什么？怎么实现的？"></a><strong>5.8</strong> <strong>数据库的乐观锁和悲观锁是什么？怎么实现的？</strong></h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同⼀数据时不破坏事务的隔离</span><br><span class="line"></span><br><span class="line">性和统⼀性以及数据库的统⼀性。乐观并发控制（乐观锁）和悲观并发控制（悲观锁）是并发控制主要采⽤的技术</span><br><span class="line"></span><br><span class="line">⼿段。</span><br><span class="line"></span><br><span class="line"><span class="strong">**悲观锁**</span>：假定会发⽣并发冲突，屏蔽⼀切可能违反数据完整性的操作。在查询完数据的时候就把事务锁起来，直到</span><br><span class="line"></span><br><span class="line">提交事务。实现⽅式：使⽤数据库中的锁机制</span><br><span class="line"></span><br><span class="line"><span class="strong">**乐观锁**</span>：假设不会发⽣并发冲突，只在提交操作时检查是否违反数据完整性。在修改数据的时候把事务锁起来，通</span><br><span class="line"></span><br><span class="line">过version的⽅式来进⾏锁定。实现⽅式：乐⼀般会使⽤版本号机制或CAS算法实现。</span><br><span class="line"></span><br><span class="line"><span class="strong">**两种锁的使⽤场景**</span></span><br><span class="line"></span><br><span class="line">从上⾯对两种锁的介绍，我们知道两种锁各有优缺点，不可认为⼀种好于另⼀种，像<span class="strong">**乐观锁适⽤于写⽐较少的情况**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**下（多读场景）**</span>，即冲突真的很少发⽣的时候，这样可以省去了锁的开销，加⼤了系统的整个吞吐量。</span><br><span class="line"></span><br><span class="line">但如果是多写的情况，⼀般会经常产⽣冲突，这就会导致上层应⽤会不断的进⾏retry，这样反倒是降低了性能，所</span><br><span class="line"></span><br><span class="line">以<span class="strong">**⼀般多写的场景下⽤悲观锁就⽐较合适。**</span></span><br></pre></td></tr></tbody></table></figure><p>六 视图</p><h1 id="6-1-为什么要使⽤视图？什么是视图？"><a href="#6-1-为什么要使⽤视图？什么是视图？" class="headerlink" title="6.1 为什么要使⽤视图？什么是视图？"></a><strong>6.1</strong> <strong>为什么要使⽤视图？什么是视图？</strong></h1><p>为了提⾼复杂SQL语句的复⽤性和表操作的安全性，MySQL数据库管理系统提供了视图特性。所谓视图，本质上是</p><p>⼀种虚拟表，在物理上是不存在的，其内容与真实的表相似，包含⼀系列带有名称的列和⾏数据。但是，视图并不</p><p>在数据库中以储存的数据值形式存在。⾏和列数据来⾃定义视图的查询所引⽤基本表，并且在具体引⽤视图时动态</p><p>⽣成。</p><p>视图使开发者只关⼼感兴趣的某些特定数据和所负责的特定任务，只能看到视图中所定义的数据，⽽不是视图所引</p><p>⽤表中的数据，从⽽提⾼了数据库中数据的安全性。</p><h1 id="6-2-视图有哪些特点？"><a href="#6-2-视图有哪些特点？" class="headerlink" title="6.2 视图有哪些特点？"></a><strong>6.2</strong> <strong>视图有哪些特点？</strong></h1><p>视图的特点如下:</p><p>视图的列可以来⾃不同的表，是表的抽象和在逻辑意义上建⽴的新关系。</p><p>视图是由基本表(实表)产⽣的表(虚表)。</p><p>视图的建⽴和删除不影响基本表。</p><p>对视图内容的更新(添加，删除和修改)直接影响基本表。</p><p>当视图来⾃多个基本表时，不允许添加和删除数据。视图的操作包括创建视图，查看视图，删除视图和修改视图。</p><h1 id="6-3-视图的使⽤场景有哪些？"><a href="#6-3-视图的使⽤场景有哪些？" class="headerlink" title="6.3 视图的使⽤场景有哪些？"></a><strong>6.3</strong> <strong>视图的使⽤场景有哪些？</strong></h1><p>视图根本⽤途：简化sql查询，提⾼开发效率。如果说还有另外⼀个⽤途那就是兼容⽼的表结构。</p><p>下⾯是视图的常⻅使⽤场景：</p><p>重⽤SQL语句；</p><p>简化复杂的SQL操作。在编写查询后，可以⽅便的重⽤它⽽不必知道它的基本查询细节；</p><p>使⽤表的组成部分⽽不是整个表；</p><p>保护数据。可以给⽤户授予表的特定部分的访问权限⽽不是整个表的访问权限；</p><p>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</p><h1 id="6-4-视图的优点"><a href="#6-4-视图的优点" class="headerlink" title="6.4 视图的优点"></a><strong>6.4</strong> <strong>视图的优点</strong></h1><p>\1. 查询简单化。视图能简化⽤户的操作</p><p>\2. 数据安全性。视图使⽤户能以多种⻆度看待同⼀数据，能够对机密数据提供安全保护</p><p>\3. 逻辑数据独⽴性。视图对重构数据库提供了⼀定程度的逻辑独⽴性</p><h1 id="6-5-视图的缺点"><a href="#6-5-视图的缺点" class="headerlink" title="6.5 视图的缺点"></a><strong>6.5</strong> <strong>视图的缺点</strong></h1><p>\1. 性能。数据库必须把视图的查询转化成对基本表的查询，如果这个视图是由⼀个复杂的多表查询所定义，那</p><p>么，即使是视图的⼀个简单查询，数据库也把它变成⼀个复杂的结合体，需要花费⼀定的时间。</p><p>\2. 修改限制。当⽤户试图修改视图的某些⾏时，数据库必须把它转化为对基本表的某些⾏的修改。事实上，当从</p><p>视图中插⼊或者删除时，情况也是这样。对于简单视图来说，这是很⽅便的，但是，对于⽐较复杂的视图，可</p><p>能是不可修改的</p><p>这些视图有如下特征：1.有UNIQUE等集合操作符的视图。2.有GROUP BY⼦句的视图。3.有诸如</p><p>AVG\SUM\MAX等聚合函数的视图。 4.使⽤DISTINCT关键字的视图。5.连接表的视图（其中有些例外）</p><p><strong>6.6</strong> <strong>什么是游标？</strong></p><p>游标是系统为⽤户开设的⼀个数据缓冲区，存放SQL语句的执⾏结果，每个游标区都有⼀个名字。⽤户可以通过游</p><p>标逐⼀获取记录并赋给主变量，交由主语⾔进⼀步处理。</p><p>七 存储过程与函数</p><h1 id="7-1-什么是存储过程？有哪些优缺点？"><a href="#7-1-什么是存储过程？有哪些优缺点？" class="headerlink" title="7.1 什么是存储过程？有哪些优缺点？"></a><strong>7.1</strong> <strong>什么是存储过程？有哪些优缺点？</strong></h1><p>存储过程是⼀个预编译的SQL语句，优点是允许模块化的设计，就是说只需要创建⼀次，以后在该程序中就可以调</p><p>⽤多次。如果某次操作需要执⾏多次SQL，使⽤存储过程⽐单纯SQL语句执⾏要快。</p><p><strong>优点</strong></p><p>1）存储过程是预编译过的，执⾏效率⾼。</p><p>2）存储过程的代码直接存放于数据库中，通过存储过程名直接调⽤，减少⽹络通讯。</p><p>3）安全性⾼，执⾏存储过程需要有⼀定权限的⽤户。</p><p>4）存储过程可以重复使⽤，减少数据库开发⼈员的⼯作量。</p><p><strong>缺点</strong></p><p>1）调试麻烦，但是⽤ PL/SQL Developer 调试很⽅便！弥补这个缺点。</p><p>2）移植问题，数据库端代码当然是与数据库相关的。但是如果是做⼯程型项⽬，基本不存在移植问题。</p><p>3）重新编译问题，因为后端代码是运⾏前编译的，如果带有引⽤关系的对象发⽣改变时，受影响的存储过程、包</p><p>将需要重新编译（不过也可以设置成运⾏时刻⾃动编译）。</p><p>4）如果在⼀个程序系统中⼤量的使⽤存储过程，到程序交付使⽤的时候随着⽤户需求的增加会导致数据结构的变</p><p>化，接着就是系统的相关问题了，最后如果⽤户想维护该系统可以说是很难很难、⽽且代价是空前的，维护起来更</p><p>麻烦。</p><p><strong>触发器</strong></p><h1 id="7-2-什么是触发器？触发器的使⽤场景有哪些？"><a href="#7-2-什么是触发器？触发器的使⽤场景有哪些？" class="headerlink" title="7.2 什么是触发器？触发器的使⽤场景有哪些？"></a><strong>7.2</strong> <strong>什么是触发器？触发器的使⽤场景有哪些？</strong></h1><p>触发器是⽤户定义在关系表上的⼀类由事件驱动的特殊的存储过程。触发器是指⼀段代码，当触发某个事件时，⾃</p><p>动执⾏这些代码。</p><p>使⽤场景</p><p>可以通过数据库中的相关表实现级联更改。</p><p>实时监控某张表中的某个字段的更改⽽需要做出相应的处理。</p><p>例如可以⽣成某些业务的编号。</p><p>注意不要滥⽤，否则会造成数据库及应⽤程序的维护困难。</p><p>⼤家需要牢记以上基础知识点，重点是理解数据类型CHAR和VARCHAR的差异，表存储引擎InnoDB和</p><p>MyISAM的区别。</p><h1 id="7-3-MySQL中都有哪些触发器？"><a href="#7-3-MySQL中都有哪些触发器？" class="headerlink" title="7.3 MySQL中都有哪些触发器？"></a>7.3 MySQL中都有哪些触发器？</h1><p>在MySQL数据库中有如下六种触发器：</p><p>Before Insert</p><p>After Insert</p><p>Before Update</p><p>After Update</p><p>Before Delete</p><p>After Delete</p><p>⼋ 常⽤SQL语句</p><h1 id="8-1-SQL语句主要分为哪⼏类"><a href="#8-1-SQL语句主要分为哪⼏类" class="headerlink" title="8.1 SQL语句主要分为哪⼏类"></a>8.1 SQL语句主要分为哪⼏类</h1><p>数据定义语⾔DDL（Data Ddefinition Language）CREATE，DROP，ALTER</p><p>主要为以上操作 即对逻辑结构等有操作的，其中包括表结构，视图和索引。</p><p>数据查询语⾔DQL（Data Query Language）SELECT</p><p>这个较为好理解 即查询操作，以select关键字。各种简单查询，连接查询等 都属于DQL。</p><p>数据操纵语⾔DML（Data Manipulation Language）INSERT，UPDATE，DELETE</p><p>主要为以上操作 即对数据进⾏操作的，对应上⾯所说的查询操作 DQL与DML共同构建了多数初级程序员常⽤的增</p><p>删改查操作。⽽查询是较为特殊的⼀种 被划分到DQL中。</p><p>数据控制功能DCL（Data Control Language）GRANT，REVOKE，COMMIT，ROLLBACK</p><p>主要为以上操作 即对数据库安全性完整性等有操作的，可以简单的理解为权限控制等。</p><h1 id="8-2-超键、候选键、主键、外键分别是什么？"><a href="#8-2-超键、候选键、主键、外键分别是什么？" class="headerlink" title="8.2 超键、候选键、主键、外键分别是什么？"></a><strong>8.2</strong> <strong>超键、候选键、主键、外键分别是什么？</strong></h1><p>超键：在关系中能唯⼀标识元组的属性集称为关系模式的超键。⼀个属性可以为作为⼀个超键，多个属性组合</p><p>在⼀起也可以作为⼀个超键。超键包含候选键和主键。</p><p>候选键：是最⼩超键，即没有冗余元素的超键。</p><p>主键：数据库表中对储存数据对象予以唯⼀和完整标识的数据列或属性的组合。⼀个数据列只能有⼀个主键，</p><p>且主键的取值不能缺失，即不能为空值（Null）。</p><p>外键：在⼀个表中存在的另⼀个表的主键称此表的外键。</p><h1 id="8-3-SQL-约束有哪⼏种？"><a href="#8-3-SQL-约束有哪⼏种？" class="headerlink" title="8.3 SQL 约束有哪⼏种？"></a><strong>8.3 SQL</strong> <strong>约束有哪⼏种？</strong></h1><p>NOT NULL: ⽤于控制字段的内容⼀定不能为空（NULL）。</p><p>UNIQUE: 控件字段内容不能重复，⼀个表允许有多个 Unique 约束。</p><p>PRIMARY KEY: 也是⽤于控件字段内容不能重复，但它在⼀个表只允许出现⼀个。</p><p>FOREIGN KEY: ⽤于预防破坏表之间连接的动作，也能防⽌⾮法数据插⼊外键列，因为它必须是它指向的那个</p><p>表中的值之⼀。</p><p>CHECK: ⽤于控制字段的值范围。</p><h1 id="8-4-六种关联查询"><a href="#8-4-六种关联查询" class="headerlink" title="8.4 六种关联查询"></a><strong>8.4</strong> <strong>六种关联查询</strong></h1><p>交叉连接（CROSS JOIN）</p><p>内连接（INNER JOIN）</p><p>外连接（LEFT JOIN/RIGHT JOIN）</p><p>联合查询（UNION与UNION ALL）</p><p>全连接（FULL JOIN）</p><p>交叉连接（CROSS JOIN）</p><p>内连接分为三类</p><p>等值连接：ON A.id=B.id</p><p>不等值连接：ON A.id &gt; B.id</p><p>⾃连接：SELECT * FROM A T1 INNER JOIN A T2 ON T1.id=T2.pid</p><p>外连接（LEFT JOIN/RIGHT JOIN）</p><p>左外连接：LEFT OUTER JOIN, 以左表为主，先查询出左表，按照ON后的关联条件匹配右表，没有匹配到的</p><p>⽤NULL填充，可以简写成LEFT JOIN</p><p>右外连接：RIGHT OUTER JOIN, 以右表为主，先查询出右表，按照ON后的关联条件匹配左表，没有匹配到的</p><p>⽤NULL填充，可以简写成RIGHT JOIN</p><p>联合查询（UNION与UNION ALL）</p><p>就是把多个结果集集中在⼀起，UNION前的结果为基准，需要注意的是联合查询的列数要相等，相同的记录⾏</p><p>SELECT * FROM A,B(,C)或者SELECT * FROM A CROSS JOIN B (CROSS JOIN C)#没有任何关联条件，</p><p>结果是笛卡尔积，结果集会很⼤，没有意义，很少使⽤内连接（INNER JOIN）SELECT * FROM A,B WHERE</p><p>A.id=B.id或者SELECT * FROM A INNER JOIN B ON A.id=B.id多表中同时符合某种条件的数据记录的集</p><p>合，INNER JOIN可以缩写为JOIN</p><p>1</p><p>SELECT * FROM A UNION SELECT * FROM B UNION …</p><p>1<strong>A</strong> </p><p><strong>B</strong> </p><p><strong>C</strong></p><p>a1 </p><p>b1 </p><p>c1</p><p>a2 </p><p>b2 </p><p>c2</p><p>a3 </p><p>b3 </p><p>c3</p><p><strong>C</strong> </p><p><strong>D</strong></p><p>c1 </p><p>d1</p><p>c2 </p><p>d2</p><p>c4 </p><p>d3</p><p>会合并</p><p>如果使⽤UNION ALL，不会合并重复的记录⾏</p><p>效率 UNION ⾼于 UNION ALL</p><p>全连接（FULL JOIN）</p><p>MySQL不⽀持全连接</p><p>可以使⽤LEFT JOIN 和UNION和RIGHT JOIN联合使⽤</p><p>表连接⾯试题</p><p>有2张表，1张R、1张S，R表有ABC三列，S表有CD两列，表中各有三条记录。</p><p>R表</p><p>S表</p><p>\1. 交叉连接(笛卡尔积):</p><p>select r. * ,s. * from r,s</p><p>SELECT * FROM A LEFT JOIN B ON A.id=B.id UNIONSELECT * FROM A RIGHT JOIN B ON</p><p>A.id=B.id</p><p>1<strong>A</strong> </p><p><strong>B</strong> </p><p><strong>C</strong> </p><p><strong>C</strong> </p><p><strong>D</strong></p><p>a1 </p><p>b1 </p><p>c1 </p><p>c1 </p><p>d1</p><p>a2 </p><p>b2 </p><p>c2 </p><p>c1 </p><p>d1</p><p>a3 </p><p>b3 </p><p>c3 </p><p>c1 </p><p>d1</p><p>a1 </p><p>b1 </p><p>c1 </p><p>c2 </p><p>d2</p><p>a2 </p><p>b2 </p><p>c2 </p><p>c2 </p><p>d2</p><p>a3 </p><p>b3 </p><p>c3 </p><p>c2 </p><p>d2</p><p>a1 </p><p>b1 </p><p>c1 </p><p>c4 </p><p>d3</p><p>a2 </p><p>b2 </p><p>c2 </p><p>c4 </p><p>d3</p><p>a3 </p><p>b3 </p><p>c3 </p><p>c4 </p><p>d3</p><p><strong>A</strong> </p><p><strong>B</strong> </p><p><strong>C</strong> </p><p><strong>C</strong> </p><p><strong>D</strong></p><p>a1 </p><p>b1 </p><p>c1 </p><p>c1 </p><p>d1</p><p>a2 </p><p>b2 </p><p>c2 </p><p>c2 </p><p>d2</p><p><strong>A</strong> </p><p><strong>B</strong> </p><p><strong>C</strong> </p><p><strong>C</strong> </p><p><strong>D</strong></p><p>a1 </p><p>b1 </p><p>c1 </p><p>c1 </p><p>d1</p><p>a2 </p><p>b2 </p><p>c2 </p><p>c2 </p><p>d2</p><p>a3 </p><p>b3 </p><p>c3</p><p>\1. 内连接结果：</p><p>select r. * ,s. * from r inner join s on r.c=s.c</p><p>\1. 左连接结果：</p><p>select r. * ,s. * from r left join s on r.c=s.c</p><p>\1. 右连接结果：</p><p>select r. * ,s. * from r right join s on r.c=s.cA </p><p>B </p><p>C </p><p>C </p><p>D</p><p>a1 </p><p>b1 </p><p>c1 </p><p>c1 </p><p>d1</p><p>a2 </p><p>b2 </p><p>c2 </p><p>c2 </p><p>d2</p><p>c4 </p><p>d3</p><p><strong>A</strong> </p><p><strong>B</strong> </p><p><strong>C</strong> </p><p><strong>C</strong> </p><p><strong>D</strong></p><p>a1 </p><p>b1 </p><p>c1 </p><p>c1 </p><p>d1</p><p>a2 </p><p>b2 </p><p>c2 </p><p>c2 </p><p>d2</p><p>a3 </p><p>b3 </p><p>c3</p><p>c4 </p><p>d3</p><p>\1. 全表连接的结果（MySql不⽀持，Oracle⽀持）：</p><p>select r. * ,s. * from r full join s on r.c=s.c</p><h1 id="8-5-什么是⼦查询"><a href="#8-5-什么是⼦查询" class="headerlink" title="8.5 什么是⼦查询"></a><strong>8.5</strong> <strong>什么是⼦查询</strong></h1><p>\1. 条件：⼀条SQL语句的查询结果做为另⼀条查询语句的条件或查询结果</p><p>\2. 嵌套：多条SQL语句嵌套使⽤，内部的SQL查询语句称为⼦查询。</p><h1 id="8-6-⼦查询的三种情况"><a href="#8-6-⼦查询的三种情况" class="headerlink" title="8.6 ⼦查询的三种情况"></a><strong>8.6</strong> <strong>⼦查询的三种情况</strong></h1><p>\1. ⼦查询是单⾏单列的情况：结果集是⼀个值，⽗查询使⽤：=、 &lt;、 &gt; 等运算符</p><p>\1. ⼦查询是多⾏单列的情况：结果集类似于⼀个数组，⽗查询使⽤：in 运算符</p><p>\1. ⼦查询是多⾏多列的情况：结果集类似于⼀张虚拟表，不能⽤于where条件，⽤于select⼦句中做为⼦表</p><p>– 查询⼯资最⾼的员⼯是谁？</p><p>select * from employee where salary=(select max(salary) from employee); </p><p>12</p><p>– 查询⼯资最⾼的员⼯是谁？</p><p>select * from employee where salary=(select max(salary) from employee); </p><h1 id="8-7-mysql中in-和-exists区别"><a href="#8-7-mysql中in-和-exists区别" class="headerlink" title="8.7 mysql中in 和 exists区别"></a>8.7 mysql中in 和 exists区别</h1><p>mysql中的in语句是把外表和内表作hash 连接，⽽exists语句是对外表作loop循环，每次loop循环再对内表进⾏查</p><p>询。⼀直⼤家都认为exists⽐in语句的效率要⾼，这种说法其实是不准确的。这个是要区分环境的。</p><p>\1. 如果查询的两个表⼤⼩相当，那么⽤in和exists差别不⼤。</p><p>\2. 如果两个表中⼀个较⼩，⼀个是⼤表，则⼦查询表⼤的⽤exists，⼦查询表⼩的⽤in。</p><p>\3. not in 和not exists：如果查询语句使⽤了not in，那么内外表都进⾏全表扫描，没有⽤到索引；⽽not extsts的</p><p>⼦查询依然能⽤到表上的索引。所以⽆论那个表⼤，⽤not exists都⽐not in要快。</p><h1 id="8-8-varchar与char的区别"><a href="#8-8-varchar与char的区别" class="headerlink" title="8.8 varchar与char的区别"></a>8.8 varchar与char的区别</h1><p><strong>char****的特点</strong></p><p>char表示定⻓字符串，⻓度是固定的；</p><p>如果插⼊数据的⻓度⼩于char的固定⻓度时，则⽤空格填充；</p><p>因为⻓度固定，所以存取速度要⽐varchar快很多，甚⾄能快50%，但正因为其⻓度固定，所以会占据多余的空</p><p>间，是空间换时间的做法；</p><p>对于char来说，最多能存放的字符个数为255，和编码⽆关</p><p><strong>varchar****的特点</strong></p><p>varchar表示可变⻓字符串，⻓度是可变的；</p><p>插⼊的数据是多⻓，就按照多⻓来存储；</p><p>varchar在存取⽅⾯与char相反，它存取慢，因为⻓度不固定，但正因如此，不占据多余的空间，是时间换空间</p><p>的做法；</p><p>对于varchar来说，最多能存放的字符个数为65532</p><p>总之，结合性能⻆度（char更快）和节省磁盘空间⻆度（varchar更⼩），具体情况还需具体来设计数据库才是妥当</p><p>的做法。</p><p>– 1) 查询出2011年以后⼊职的员⼯信息</p><p>– 2) 查询所有的部⻔信息，与上⾯的虚拟表中的信息⽐对，找出所有部⻔ID相等的员⼯。</p><p>select * from dept d, (select * from employee where join_date &gt; ‘2011-1-1’) e where</p><p>e.dept_id = d.id; </p><p>– 使⽤表连接：</p><p>select d.<em>, e.</em> from dept d inner join employee e on d.id = e.dept_id where</p><p>e.join_date &gt; ‘2011-1-1’ </p><h1 id="8-9-varchar-50-中50的涵义"><a href="#8-9-varchar-50-中50的涵义" class="headerlink" title="8.9 varchar(50)中50的涵义"></a>8.9 varchar(50)中50的涵义</h1><p>最多存放50个字符，varchar(50)和(200)存储hello所占空间⼀样，但后者在排序时会消耗更多内存，因为order by</p><p>col采⽤fixed_length计算col⻓度(memory引擎也⼀样)。在早期 MySQL 版本中， 50 代表字节数，现在代表字符</p><p>数。</p><h1 id="8-10-int-20-中20的涵义"><a href="#8-10-int-20-中20的涵义" class="headerlink" title="8.10 int(20)中20的涵义"></a>8.10 int(20)中20的涵义</h1><p>是指显示字符的⻓度。20表示最⼤显示宽度为20，但仍占4字节存储，存储范围不变；</p><p>不影响内部存储，只是影响带 zerofill 定义的 int 时，前⾯补多少个 0，易于报表展示</p><h1 id="8-11-mysql为什么这么设计"><a href="#8-11-mysql为什么这么设计" class="headerlink" title="8.11 mysql为什么这么设计"></a>8.11 mysql为什么这么设计</h1><p>对⼤多数应⽤没有意义，只是规定⼀些⼯具⽤来显示字符的个数；int(1)和int(20)存储和计算均⼀样；</p><h1 id="8-12-mysql中int-10-和char-10-以及varchar-10-的区别"><a href="#8-12-mysql中int-10-和char-10-以及varchar-10-的区别" class="headerlink" title="8.12 mysql中int(10)和char(10)以及varchar(10)的区别"></a>8.12 mysql中int(10)和char(10)以及varchar(10)的区别</h1><p>int(10)的10表示显示的数据的⻓度，不是存储数据的⼤⼩；chart(10)和varchar(10)的10表示存储数据的⼤⼩，</p><p>即表示存储多少个字符。</p><p>int(10) 10位的数据⻓度 9999999999，占32个字节，int型4位</p><p>char(10) 10位固定字符串，不⾜补空格 最多10个字符</p><p>varchar(10) 10位可变字符串，不⾜补空格 最多10个字符</p><p>char(10)表示存储定⻓的10个字符，不⾜10个就⽤空格补⻬，占⽤更多的存储空间</p><p>varchar(10)表示存储10个变⻓的字符，存储多少个就是多少个，空格也按⼀个字符存储，这⼀点是和char(10)</p><p>的空格不同的，char(10)的空格表示占位不算⼀个字符</p><h1 id="8-13-FLOAT和DOUBLE的区别是什么"><a href="#8-13-FLOAT和DOUBLE的区别是什么" class="headerlink" title="8.13 FLOAT和DOUBLE的区别是什么"></a>8.13 FLOAT和DOUBLE的区别是什么</h1><p>FLOAT类型数据可以存储⾄多8位⼗进制数，并在内存中占4字节。</p><p>DOUBLE类型数据可以存储⾄多18位⼗进制数，并在内存中占8字节。</p><h1 id="8-14-drop、delete与truncate的区别"><a href="#8-14-drop、delete与truncate的区别" class="headerlink" title="8.14 drop、delete与truncate的区别"></a>8.14 drop、delete与truncate的区别</h1><p>三者都表示删除，但是三者有⼀些差别：<strong>Delete</strong> </p><p><strong>Truncate</strong> </p><p><strong>Drop</strong></p><p>类型 </p><p>属于DML </p><p>属于DDL </p><p>属于DDL</p><p>回滚 </p><p>可回滚 </p><p>不可回滚 </p><p>不可回滚</p><p>删除</p><p>内容</p><p>表结构还在，删除表的全部或</p><p>者⼀部分数据⾏</p><p>表结构还在，删除表中</p><p>的所有数据</p><p>从数据库中删除表，所有的数据⾏，索</p><p>引和权限也会被删除</p><p>删除</p><p>速度</p><p>删除速度慢，需要逐⾏删除 </p><p>删除速度快 </p><p>删除速度最快</p><p>因此，在不再需要⼀张表的时候，⽤drop；在想删除部分数据⾏时候，⽤delete；在保留表⽽删除所有数据的时候</p><p>⽤truncate。</p><h1 id="8-15-UNION与UNION-ALL的区别？"><a href="#8-15-UNION与UNION-ALL的区别？" class="headerlink" title="8.15 UNION与UNION ALL的区别？"></a>8.15 UNION与UNION ALL的区别？</h1><p>如果使⽤UNION ALL，不会合并重复的记录⾏</p><p>效率 UNION ⾼于 UNION ALL</p><p>九 SQL优化</p><h1 id="9-1-如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到-或者说怎么才可以知道这条语句运⾏很慢的原因"><a href="#9-1-如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到-或者说怎么才可以知道这条语句运⾏很慢的原因" class="headerlink" title="9.1 如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到?或者说怎么才可以知道这条语句运⾏很慢的原因"></a><strong>9.1</strong> 如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到?或者说怎么才可以知道这条语句运⾏很慢的原因</h1><p>对于低性能的SQL语句的定位，最重要也是最有效的⽅法就是使⽤执⾏计划，MySQL提供了explain命令来查看语</p><p>句的执⾏计划。 我们知道，不管是哪种数据库，或者是哪种数据库引擎，在对⼀条SQL语句进⾏执⾏的过程中都会</p><p>做很多相关的优化，<strong>对于查询语句，最重要的优化⽅式就是使⽤索引</strong>。 ⽽<strong>执⾏计划，就是显示数据库引擎对于****SQL</strong></p><p><strong>语句的执⾏的详细情况，其中包含了是否使⽤索引，使⽤什么索引，使⽤的索引的相关信息等</strong>。</p><p>执⾏计划包含的信息 <strong>id</strong> 有⼀组数字组成。表示⼀个查询中各个⼦查询的执⾏顺序;<strong>id</strong> </p><p><strong>select_type</strong> </p><p><strong>description</strong></p><p>1 </p><p>SIMPLE </p><p>不包含任何⼦查询或union等查询</p><p>2 </p><p>PRIMARY </p><p>包含⼦查询最外层查询就显示为 PRIMARY</p><p>3 </p><p>SUBQUERY </p><p>在select或 where字句中包含的查询</p><p>4 </p><p>DERIVED </p><p>from字句中包含的查询</p><p>5 </p><p>UNION </p><p>出现在union后的查询语句中</p><p>6 </p><p>UNION RESULT </p><p>从UNION中获取结果集，例如上⽂的第三个例⼦</p><p>id相同执⾏顺序由上⾄下。</p><p>id不同，id值越⼤优先级越⾼，越先被执⾏。</p><p>id为null时表示⼀个结果集，不需要使⽤它查询，常出现在包含union等查询语句中。</p><p><strong>select_type</strong> 每个⼦查询的查询类型，⼀些常⻅的查询类型。</p><p><strong>table</strong> 查询的数据表，当从衍⽣表中查数据时会显示 x 表示对应的执⾏计划id <strong>partitions</strong> 表分区、表创建的时候可</p><p>以指定通过那个列进⾏表分区。 举个例⼦：</p><p><strong>type</strong>(⾮常重要，可以看到有没有⾛索引) 访问类型</p><p>ALL 扫描全表数据</p><p>index 遍历索引</p><p>range 索引范围查找</p><p>index_subquery 在⼦查询中使⽤ ref</p><p>unique_subquery 在⼦查询中使⽤ eq_ref</p><p>ref_or_null 对Null进⾏索引的优化的 ref</p><p>fulltext 使⽤全⽂索引</p><p>ref 使⽤⾮唯⼀索引查找数据</p><p>eq_ref 在join查询中使⽤PRIMARY KEYorUNIQUE NOT NULL索引关联。</p><p><strong>possible_keys</strong> 可能使⽤的索引，注意不⼀定会使⽤。查询涉及到的字段上若存在索引，则该索引将被列出来。当</p><p>该列为 NULL时就要考虑当前的SQL是否需要优化了。</p><p>create table tmp (</p><p> id int unsigned not null AUTO_INCREMENT,</p><p> name varchar(255),</p><p> PRIMARY KEY (id)</p><p>) engine = innodb</p><p>partition by key (id) partitions 5;</p><p><strong>key</strong> 显示MySQL在查询中实际使⽤的索引，若没有使⽤索引，显示为NULL。</p><p><strong>TIPS</strong>:查询中若使⽤了覆盖索引(覆盖索引：索引的数据覆盖了需要查询的所有数据)，则该索引仅出现在key列表中</p><p><strong>key_length</strong> 索引⻓度</p><p><strong>ref</strong> 表示上述表的连接匹配条件，即哪些列或常量被⽤于查找索引列上的值</p><p><strong>rows</strong> 返回估算的结果集数⽬，并不是⼀个准确的值。</p><p><strong>extra</strong> 的信息⾮常丰富，常⻅的有：</p><p>\1. Using index 使⽤覆盖索引</p><p>\2. Using where 使⽤了⽤where⼦句来过滤结果集</p><p>\3. Using filesort 使⽤⽂件排序，使⽤⾮索引列进⾏排序时出现，⾮常消耗性能，尽量优化。</p><p>\4. Using temporary 使⽤了临时表 sql优化的⽬标可以参考阿⾥开发⼿册</p><h1 id="9-2-SQL的⽣命周期？"><a href="#9-2-SQL的⽣命周期？" class="headerlink" title="9.2 SQL的⽣命周期？"></a>9.2 SQL的⽣命周期？</h1><p>\1. 应⽤服务器与数据库服务器建⽴⼀个连接</p><p>\2. 数据库进程拿到请求sql</p><p>\3. 解析并⽣成执⾏计划，执⾏</p><p>\4. 读取数据到内存并进⾏逻辑处理</p><p>\5. 通过步骤⼀的连接，发送结果到客户端</p><p>\6. 关掉连接，释放资源</p><p>【推荐】SQL性能优化的⽬标：⾄少要达到 range 级别，要求是ref级别，如果可以是consts最好。</p><p>说明：</p><p>1） consts 单表中最多只有⼀个匹配⾏（主键或者唯⼀索引），在优化阶段即可读取到数据。</p><p>2） ref 指的是使⽤普通的索引（normal index）。</p><p>3） range 对索引进⾏范围检索。</p><p>反例：explain表的结果，type=index，索引物理⽂件全扫描，速度⾮常慢，这个index级别⽐较range还低，</p><p>与全表扫描是⼩巫⻅⼤巫。</p><h1 id="9-3-⼤表数据查询，怎么优化"><a href="#9-3-⼤表数据查询，怎么优化" class="headerlink" title="9.3 ⼤表数据查询，怎么优化"></a><strong>9.3</strong> <strong>⼤表数据查询，怎么优化</strong></h1><p>\1. 优化shema、sql语句+索引；</p><p>\2. 第⼆加缓存，memcached, redis；</p><p>\3. 主从复制，读写分离；</p><p>\4. 垂直拆分，根据你模块的耦合度，将⼀个⼤的系统分为多个⼩的系统，也就是分布式系统；</p><p>\5. ⽔平切分，针对数据量⼤的表，这⼀步最麻烦，最能考验技术⽔平，要选择⼀个合理的sharding key, 为了有好</p><p>的查询效率，表结构也要改动，做⼀定的冗余，应⽤也要改，sql中尽量带sharding key，将数据定位到限定的</p><p>表上去查，⽽不是扫描全部的表；</p><h1 id="9-4-超⼤分⻚怎么处理？"><a href="#9-4-超⼤分⻚怎么处理？" class="headerlink" title="9.4 超⼤分⻚怎么处理？"></a><strong>9.4</strong> <strong>超⼤分⻚怎么处理？</strong></h1><p>超⼤的分⻚⼀般从两个⽅向上来解决.</p><p>数据库层⾯,这也是我们主要集中关注的(虽然收效没那么⼤),类似于 select * from table where age &gt; 20</p><p>limit 1000000,10 这种查询其实也是有可以优化的余地的. 这条语句需要load1000000数据然后基本上全部丢</p><p>弃,只取10条当然⽐较慢. 当时我们可以修改为 select * from table where id in (select id from table</p><p>where age &gt; 20 limit 1000000,10) .这样虽然也load了⼀百万的数据,但是由于索引覆盖,要查询的所有字段都</p><p>在索引中,所以速度会很快. 同时如果ID连续的好,我们还可以 select * from table where id &gt; 1000000</p><p>limit 10 ,效率也是不错的,优化的可能性有许多种,但是核⼼思想都⼀样,就是减少load的数据.</p><p>从需求的⻆度减少这种请求…主要是不做类似的需求(直接跳转到⼏百万⻚之后的具体某⼀⻚.只允许逐⻚查看</p><p>或者按照给定的路线⾛,这样可预测,可缓存)以及防⽌ID泄漏且连续被⼈恶意攻击.</p><p>解决超⼤分⻚,其实主要是靠缓存,可预测性的提前查到内容,缓存⾄redis等k-V数据库中,直接返回即可.</p><p>在阿⾥巴巴《Java开发⼿册》中,对超⼤分⻚的解决办法是类似于上⾯提到的第⼀种.</p><h1 id="9-5-mysql-分⻚"><a href="#9-5-mysql-分⻚" class="headerlink" title="9.5 mysql 分⻚"></a><strong>9.5 mysql</strong> <strong>分⻚</strong></h1><p>LIMIT ⼦句可以被⽤于强制 SELECT 语句返回指定的记录数。LIMIT 接受⼀个或两个数字参数。参数必须是⼀个整</p><p>数常量。如果给定两个参数，第⼀个参数指定第⼀个返回记录⾏的偏移量，第⼆个参数指定返回记录⾏的最⼤数</p><p>⽬。初始记录⾏的偏移量是 0(⽽不是 1)</p><p>为了检索从某⼀个偏移量到记录集的结束所有的记录⾏，可以指定第⼆个参数为 -1：</p><p>【推荐】利⽤延迟关联或者⼦查询优化超多分⻚场景。</p><p>说明：MySQL并不是跳过offset⾏，⽽是取offset+N⾏，然后返回放弃前offset⾏，返回N⾏，那当offset特</p><p>别⼤的时候，效率就⾮常的低下，要么控制返回的总⻚数，要么对超过特定阈值的⻚数进⾏SQL改写。</p><p>正例：先快速定位需要获取的id段，然后再关联：</p><p>SELECT a.* FROM 表1 a, (select id from 表1 where 条件 LIMIT 100000,20 ) b where</p><p>a.id=b.id</p><p>1234567</p><p>mysql&gt; SELECT * FROM table LIMIT 5,10; // 检索记录⾏ 6-15</p><p>1</p><p>mysql&gt; SELECT * FROM table LIMIT 95,-1; // 检索记录⾏ 96-last.</p><p>1如果只给定⼀个参数，它表示返回最⼤的记录⾏数⽬：</p><p>换句话说，LIMIT n 等价于 LIMIT 0,n。</p><h1 id="9-6-慢查询⽇志"><a href="#9-6-慢查询⽇志" class="headerlink" title="9.6 慢查询⽇志"></a><strong>9.6</strong> <strong>慢查询⽇志</strong></h1><p>⽤于记录执⾏时间超过某个临界值的SQL⽇志，⽤于快速定位慢查询，为我们的优化做参考。</p><p>开启慢查询⽇志</p><p>配置项： slow_query_log</p><p>可以使⽤ show variables like ‘slov_query_log’ 查看是否开启，如果状态值为 OFF ，可以使⽤ set GLOBAL</p><p>slow_query_log = on 来开启，它会在 datadir 下产⽣⼀个 xxx-slow.log 的⽂件。</p><p>设置临界时间</p><p>配置项： long_query_time</p><p>查看： show VARIABLES like ‘long_query_time’ ，单位秒</p><p>设置： set long_query_time=0.5</p><p>实操时应该从⻓时间设置到短的时间，即将最慢的SQL优化掉</p><p>查看⽇志，⼀旦SQL超过了我们设置的临界时间就会被记录到 xxx-slow.log 中</p><h1 id="9-7-关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？"><a href="#9-7-关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？" class="headerlink" title="9.7 关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？"></a><strong>9.7</strong> 关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？</h1><p>在业务系统中，除了使⽤主键进⾏的查询，其他的我都会在测试库上测试其耗时，慢查询的统计主要由运维在做，</p><p>会定期将业务中的慢查询反馈给我们。</p><p>慢查询的优化⾸先要搞明⽩慢的原因是什么？ 是查询条件没有命中索引？是load了不需要的数据列？还是数据量太</p><p>⼤？</p><p>所以优化也是针对这三个⽅向来的，</p><p>⾸先分析语句，看看是否load了额外的数据，可能是查询了多余的⾏并且抛弃掉了，可能是加载了许多结果中</p><p>并不需要的列，对语句进⾏分析以及重写。</p><p>分析语句的执⾏计划，然后获得其使⽤索引的情况，之后修改语句或者修改索引，使得语句可以尽可能的命中</p><p>mysql&gt; SELECT * FROM table LIMIT 5; //检索前 5 个记录⾏</p><p>1索引。</p><p>如果对语句的优化已经⽆法进⾏，可以考虑表中的数据量是否太⼤，如果是的话可以进⾏横向或者纵向的分</p><p>表。</p><h1 id="9-8-为什么要尽量设定⼀个主键？"><a href="#9-8-为什么要尽量设定⼀个主键？" class="headerlink" title="9.8 为什么要尽量设定⼀个主键？"></a><strong>9.8</strong> <strong>为什么要尽量设定⼀个主键？</strong></h1><p>主键是数据库确保数据⾏在整张表唯⼀性的保障，即使业务上本张表没有主键，也建议添加⼀个⾃增⻓的ID列作为</p><p>主键。设定了主键之后，在后续的删改查的时候可能更加快速以及确保操作数据范围安全。</p><h1 id="9-9-主键使⽤⾃增ID还是UUID"><a href="#9-9-主键使⽤⾃增ID还是UUID" class="headerlink" title="9.9 主键使⽤⾃增ID还是UUID"></a><strong>9.9</strong> 主键使⽤⾃增ID还是UUID</h1><p>推荐使⽤⾃增ID，不要使⽤UUID。</p><p>因为在InnoDB存储引擎中，主键索引是作为聚簇索引存在的，也就是说，主键索引的B+树叶⼦节点上存储了主键</p><p>索引以及全部的数据(按照顺序)，如果主键索引是⾃增ID，那么只需要不断向后排列即可，如果是UUID，由于到来</p><p>的ID与原来的⼤⼩不确定，会造成⾮常多的数据插⼊，数据移动，然后导致产⽣很多的内存碎⽚，进⽽造成插⼊性</p><p>能的下降。</p><p>总之，在数据量⼤⼀些的情况下，⽤⾃增主键性能会好⼀些。</p><p>关于主键是聚簇索引，如果没有主键，InnoDB会选择⼀个唯⼀键来作为聚簇索引，如果没有唯⼀键，会⽣成⼀个隐</p><p>式的主键。</p><h1 id="9-10-字段为什么要求定义为not-null"><a href="#9-10-字段为什么要求定义为not-null" class="headerlink" title="9.10 字段为什么要求定义为not null"></a><strong>9.10</strong> 字段为什么要求定义为not null</h1><p>null值会占⽤更多的字节，且会在程序中造成很多与预期不符的情况。</p><h1 id="9-11-如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？"><a href="#9-11-如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？" class="headerlink" title="9.11 如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？"></a><strong>9.11</strong> <strong>如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？</strong></h1><p>密码散列，盐，⽤户身份证号等固定⻓度的字符串应该使⽤char⽽不是varchar来存储，这样可以节省空间且提⾼检</p><p>索效率。</p><h1 id="9-12-优化查询过程中的数据访问"><a href="#9-12-优化查询过程中的数据访问" class="headerlink" title="9.12 优化查询过程中的数据访问"></a><strong>9.12</strong> <strong>优化查询过程中的数据访问</strong></h1><p>访问数据太多导致查询性能下降</p><p>确定应⽤程序是否在检索⼤量超过需要的数据，可能是太多⾏或列</p><p>确认MySQL服务器是否在分析⼤量不必要的数据⾏</p><p>避免犯如下SQL语句错误</p><p>查询不需要的数据。解决办法：使⽤limit解决</p><p>多表关联返回全部列。解决办法：指定列名</p><p>总是返回全部列。解决办法：避免使⽤SELECT *</p><p>重复查询相同的数据。解决办法：可以缓存数据，下次直接读取缓存</p><p>是否在扫描额外的记录。解决办法：</p><p>使⽤explain进⾏分析，如果发现查询需要扫描⼤量的数据，但只返回少数的⾏，可以通过如下技巧去优化：</p><p>使⽤索引覆盖扫描，把所有的列都放到索引中，这样存储引擎不需要回表获取对应⾏就可以返回结果。</p><p>改变数据库和表的结构，修改数据表范式重写SQL语句，让优化器可以以更优的⽅式执⾏查询。</p><h1 id="9-13-优化⻓难的查询语句"><a href="#9-13-优化⻓难的查询语句" class="headerlink" title="9.13 优化⻓难的查询语句"></a><strong>9.13</strong> <strong>优化⻓难的查询语句</strong></h1><p>⼀个复杂查询还是多个简单查询</p><p>MySQL内部每秒能扫描内存中上百万⾏数据，相⽐之下，响应数据给客户端就要慢得多</p><p>使⽤尽可能⼩的查询是好的，但是有时将⼀个⼤的查询分解为多个⼩的查询是很有必要的。</p><p>切分查询</p><p>将⼀个⼤的查询分为多个⼩的相同的查询</p><p>⼀次性删除1000万的数据要⽐⼀次删除1万，暂停⼀会的⽅案更加损耗服务器开销。</p><p>分解关联查询，让缓存的效率更⾼。</p><p>执⾏单个查询可以减少锁的竞争。</p><p>在应⽤层做关联更容易对数据库进⾏拆分。</p><p>查询效率会有⼤幅提升。</p><p>较少冗余记录的查询。</p><h1 id="9-14-优化特定类型的查询语句"><a href="#9-14-优化特定类型的查询语句" class="headerlink" title="9.14 优化特定类型的查询语句"></a><strong>9.14</strong> <strong>优化特定类型的查询语句</strong></h1><p>count(*)会忽略所有的列，直接统计所有列数，不要使⽤count(列名)</p><p>MyISAM中，没有任何where条件的count(*)⾮常快。</p><p>当有where条件时，MyISAM的count统计不⼀定⽐其它引擎快。</p><p>可以使⽤explain查询近似值，⽤近似值替代count(*)</p><p>增加汇总表</p><p>使⽤缓存</p><h1 id="9-15-优化关联查询"><a href="#9-15-优化关联查询" class="headerlink" title="9.15 优化关联查询"></a><strong>9.15</strong> <strong>优化关联查询</strong></h1><p>确定ON或者USING⼦句中是否有索引。</p><p>确保GROUP BY和ORDER BY只有⼀个表中的列，这样MySQL才有可能使⽤索引。</p><h1 id="9-16-优化⼦查询"><a href="#9-16-优化⼦查询" class="headerlink" title="9.16 优化⼦查询"></a><strong>9.16</strong> 优化⼦查询</h1><p>⽤关联查询替代</p><p>优化GROUP BY和DISTINCT</p><p>这两种查询据可以使⽤索引来优化，是最有效的优化⽅法</p><p>关联查询中，使⽤标识列分组的效率更⾼</p><p>如果不需要ORDER BY，进⾏GROUP BY时加ORDER BY NULL，MySQL不会再进⾏⽂件排序。</p><p>WITH ROLLUP超级聚合，可以挪到应⽤程序处理</p><h1 id="9-17-优化LIMIT分⻚"><a href="#9-17-优化LIMIT分⻚" class="headerlink" title="9.17 优化LIMIT分⻚"></a><strong>9.17</strong> 优化LIMIT分⻚</h1><p>LIMIT偏移量⼤的时候，查询效率较低</p><p>可以记录上次查询的最⼤ID，下次查询时直接根据该ID来查询<strong>9.18</strong> <strong>优化<strong><strong>UNION</strong></strong>查询</strong></p><p>UNION ALL的效率⾼于UNION</p><h1 id="9-19-优化WHERE⼦句"><a href="#9-19-优化WHERE⼦句" class="headerlink" title="9.19 优化WHERE⼦句"></a><strong>9.19</strong> 优化WHERE⼦句</h1><p>解题⽅法</p><p>对于此类考题，先说明如何定位低效SQL语句，然后根据SQL语句可能低效的原因做排查，先从索引着⼿，如果索</p><p>引没有问题，考虑以上⼏个⽅⾯，数据访问的问题，⻓难查询句的问题还是⼀些特定类型优化的问题，逐⼀回答。</p><p>SQL语句优化的⼀些⽅法？</p><p>1.对查询进⾏优化，应尽量避免全表扫描，⾸先应考虑在 where 及 order by 涉及的列上建⽴索引。</p><p>2.应尽量避免在 where ⼦句中对字段进⾏ null 值判断，否则将导致引擎放弃使⽤索引⽽进⾏全表扫描，如：</p><p>3.应尽量避免在 where ⼦句中使⽤!=或&lt;&gt;操作符，否则引擎将放弃使⽤索引⽽进⾏全表扫描。</p><p>4.应尽量避免在 where ⼦句中使⽤or 来连接条件，否则将导致引擎放弃使⽤索引⽽进⾏全表扫描，如：</p><p>5.in 和 not in 也要慎⽤，否则会导致全表扫描，如：</p><p>6.下⾯的查询也将导致全表扫描：select id from t where name like ‘%李%’若要提⾼效率，可以考虑全⽂检</p><p>索。</p><p>7.如果在 where ⼦句中使⽤参数，也会导致全表扫描。因为SQL只有在运⾏时才会解析局部变量，但优化程序</p><p>不能将访问计划的选择推迟到运⾏时；它必须在编译时进⾏选择。然 ⽽，如果在编译时建⽴访问计划，变量的</p><p>值还是未知的，因⽽⽆法作为索引选择的输⼊项。如下⾯语句将进⾏全表扫描：</p><p>select id from t where num is null</p><p>– 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</p><p>select id from t where num=</p><p>123</p><p>select id from t where num=10 or num=20</p><p>– 可以这样查询：</p><p>select id from t where num=10 union all select id from t where num=20</p><p>123</p><p>select id from t where num in(1,2,3)</p><p>– 对于连续的数值，能⽤ between 就不要⽤ in 了：</p><p>select id from t where num between 1 and 3</p><p>1238.应尽量避免在 where ⼦句中对字段进⾏表达式操作，这将导致引擎放弃使⽤索引⽽进⾏全表扫描。如：</p><p>9.应尽量避免在where⼦句中对字段进⾏函数操作，这将导致引擎放弃使⽤索引⽽进⾏全表扫描。如：</p><p>10.不要在 where ⼦句中的“=”左边进⾏函数、算术运算或其他表达式运算，否则系统将可能⽆法正确使⽤索</p><p>引。</p><p>⼗ 数据库优化</p><h1 id="10-1-为什么要优化"><a href="#10-1-为什么要优化" class="headerlink" title="10.1 为什么要优化"></a><strong>10.1</strong> <strong>为什么要优化</strong></h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">系统的吞吐量瓶颈往往出现在数据库的访问速度上</span><br><span class="line"></span><br><span class="line">随着应⽤程序的运⾏，数据库的中的数据会越来越多，处理时间会相应变慢</span><br><span class="line"></span><br><span class="line">数据是存放在磁盘上的，读写速度⽆法和内存相⽐</span><br><span class="line"></span><br><span class="line">优化原则：减少系统瓶颈，减少资源占⽤，增加系统的反应速度。</span><br></pre></td></tr></tbody></table></figure><h1 id="10-2-数据库结构优化"><a href="#10-2-数据库结构优化" class="headerlink" title="10.2 数据库结构优化"></a><strong>10.2</strong> <strong>数据库结构优化</strong></h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">⼀个好的数据库设计⽅案对于数据库的性能往往会起到事半功倍的效果。</span><br><span class="line"></span><br><span class="line">需要考虑数据冗余、查询和更新的速度、字段的数据类型是否合理等多⽅⾯的内容。</span><br><span class="line"></span><br><span class="line"><span class="strong">**将字段很多的表分解成多个表**</span></span><br><span class="line"></span><br><span class="line">select id from t where num=@num</span><br><span class="line"></span><br><span class="line">-- 可以改为强制查询使⽤索引：</span><br><span class="line"></span><br><span class="line">select id from t with(index(索引名)) where num=@num</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line"></span><br><span class="line">select id from t where num/2=100</span><br><span class="line"></span><br><span class="line">-- 应改为:</span><br><span class="line"></span><br><span class="line">select id from t where num=100<span class="emphasis">*2</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">123</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select id from t where substring(name,1,3)=’abc’</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">-- name以abc开头的id应改为:</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select id from t where name like ‘abc%’</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">123对于字段较多的表，如果有些字段的使⽤频率很低，可以将这些字段分离出来形成新表。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">因为当⼀个表的数据量很⼤时，会由于使⽤频率低的字段的存在⽽变慢。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"><span class="strong">**增加中间表**</span></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">对于需要经常联合查询的表，可以建⽴中间表以提⾼查询效率。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">通过建⽴中间表，将需要通过联合查询的数据插⼊到中间表中，然后将原来的联合查询改为对中间表的查询。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"><span class="strong">**增加冗余字段**</span></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">设计数据表时应尽量遵循范式理论的规约，尽可能的减少冗余字段，让数据库设计看起来精致、优雅。但是，合理</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">的加⼊冗余字段可以提⾼查询速度。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">表的规范化程度越⾼，表和表之间的关系越多，需要连接查询的情况也就越多，性能也就越差。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"><span class="strong">**注意：**</span></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"><span class="strong">**冗余字段的值在⼀个表中修改了，就要想办法在其他表中更新，否则就会导致数据不⼀致的问题。**</span></span></span><br></pre></td></tr></tbody></table></figure><h1 id="10-3-MySQL数据库cpu飙升到500-的话他怎么处理？"><a href="#10-3-MySQL数据库cpu飙升到500-的话他怎么处理？" class="headerlink" title="10.3 MySQL数据库cpu飙升到500%的话他怎么处理？"></a>10.3 MySQL数据库cpu飙升到500%的话他怎么处理？</h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">当 cpu 飙升到 500%时，先⽤操作系统命令 top 命令观察是不是 mysqld 占⽤导致的，如果不是，找出占⽤⾼的进</span><br><span class="line"></span><br><span class="line">程，并进⾏相关处理。</span><br><span class="line"></span><br><span class="line">如果是 mysqld 造成的， show processlist，看看⾥⾯跑的 session 情况，是不是有消耗资源的 sql 在运⾏。找出</span><br><span class="line"></span><br><span class="line">消耗⾼的 sql，看看执⾏计划是否准确， index 是否缺失，或者实在是数据量太⼤造成。</span><br><span class="line"></span><br><span class="line">⼀般来说，肯定要 kill 掉这些线程(同时观察 cpu 使⽤率是否下降)，等进⾏相应的调整(⽐如说加索引、改 sql、改内</span><br><span class="line"></span><br><span class="line">存参数)之后，再重新跑这些 SQL。</span><br><span class="line"></span><br><span class="line">也有可能是每个 sql 消耗资源并不多，但是突然之间，有⼤量的 session 连进来导致 cpu 飙升，这种情况就需要跟</span><br><span class="line"></span><br><span class="line">应⽤⼀起来分析为何连接数会激增，再做出相应的调整，⽐如说限制连接数等</span><br></pre></td></tr></tbody></table></figure><h1 id="10-4-⼤表怎么优化？"><a href="#10-4-⼤表怎么优化？" class="headerlink" title="10.4 ⼤表怎么优化？"></a><strong>10.4</strong> <strong>⼤表怎么优化？</strong></h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">某个表有近千万数据，CRUD⽐较慢，如何优化？分库分表了是怎么做的？分表分库了有什么问题？有⽤到中间件么？他们的原理知道么？</span><br><span class="line"></span><br><span class="line">当MySQL单表记录数过⼤时，数据库的CRUD性能会明显下降，⼀些常⻅的优化措施如下：</span><br><span class="line"></span><br><span class="line">\1. <span class="strong">**限定数据的范围：**</span> 务必禁⽌不带任何限制数据范围条件的查询语句。⽐如：我们当⽤户在查询订单历史的时</span><br><span class="line"></span><br><span class="line">候，我们可以控制在⼀个⽉的范围内。；</span><br><span class="line"></span><br><span class="line">\2. <span class="strong">**读**</span><span class="strong">**/**</span><span class="strong">**写分离：**</span> 经典的数据库拆分⽅案，主库负责写，从库负责读；</span><br><span class="line"></span><br><span class="line">\3. <span class="strong">**缓存：**</span> 使⽤MySQL的缓存，另外对重量级、更新少的数据可以考虑使⽤应⽤级别的缓存；</span><br><span class="line"></span><br><span class="line">还有就是通过分库分表的⽅式进⾏优化，主要有垂直分表和⽔平分表1. <span class="strong">**垂直分区：**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**根据数据库⾥⾯数据表的相关性进⾏拆分。**</span> 例如，⽤户表中既有⽤户的登录信息⼜有⽤户的基本信息，可以将</span><br><span class="line"></span><br><span class="line">⽤户表拆分成两个单独的表，甚⾄放到单独的库做分库。</span><br><span class="line"></span><br><span class="line"><span class="strong">**简单来说垂直拆分是指数据表列的拆分，把⼀张列⽐较多的表拆分为多张表。**</span> 如下图所示，这样来说⼤家应该</span><br><span class="line"></span><br><span class="line">就更容易理解了。</span><br><span class="line"></span><br><span class="line"><span class="strong">**垂直拆分的优点：**</span> 可以使得⾏数据变⼩，在查询时减少读取的Block数，减少I/O次数。此外，垂直分区可以简</span><br><span class="line"></span><br><span class="line">化表的结构，易于维护。</span><br><span class="line"></span><br><span class="line"><span class="strong">**垂直拆分的缺点：**</span> 主键会出现冗余，需要管理冗余列，并会引起Join操作，可以通过在应⽤层进⾏Join来解</span><br><span class="line"></span><br><span class="line">决。此外，垂直分区会让事务变得更加复杂；</span><br><span class="line"></span><br><span class="line">垂直分表</span><br><span class="line"></span><br><span class="line">把主键和⼀些列放在⼀个表，然后把主键和另外的列放在另⼀个表中<span class="strong">**适⽤场景**</span></span><br><span class="line"></span><br><span class="line">1、如果⼀个表中某些列常⽤，另外⼀些列不常⽤</span><br><span class="line"></span><br><span class="line">2、可以使数据⾏变⼩，⼀个数据⻚能存储更多数据，查询时减少I/O次数</span><br><span class="line"></span><br><span class="line"><span class="strong">**缺点**</span></span><br><span class="line"></span><br><span class="line">有些分表的策略基于应⽤层的逻辑算法，⼀旦逻辑算法改变，整个分表逻辑都会改变，扩展性较差</span><br><span class="line"></span><br><span class="line">对于应⽤层来说，逻辑算法增加开发成本</span><br><span class="line"></span><br><span class="line">管理冗余列，查询所有数据需要join操作</span><br><span class="line"></span><br><span class="line">\2. <span class="strong">**⽔平分区：**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**保持数据表结构不变，通过某种策略存储数据分⽚。这样每⼀⽚数据分散到不同的表或者库中，达到了分布式**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**的⽬的。 ⽔平拆分可以⽀撑⾮常⼤的数据量。**</span></span><br><span class="line"></span><br><span class="line">⽔平拆分是指数据表⾏的拆分，表的⾏数超过200万⾏时，就会变慢，这时可以把⼀张的表的数据拆成多张表</span><br><span class="line"></span><br><span class="line">来存放。举个例⼦：我们可以将⽤户信息表拆分成多个⽤户信息表，这样就可以避免单⼀表数据量过⼤对性能</span><br><span class="line"></span><br><span class="line">造成影响。</span><br><span class="line"></span><br><span class="line">⽔品拆分可以⽀持⾮常⼤的数据量。需要注意的⼀点是:分表仅仅是解决了单⼀表数据过⼤的问题，但由于表的</span><br><span class="line"></span><br><span class="line">数据还是在同⼀台机器上，其实对于提升MySQL并发能⼒没有什么意义，所以 <span class="strong">**⽔平拆分最好分库**</span> 。</span><br><span class="line"></span><br><span class="line">⽔平拆分能够 <span class="strong">**⽀持⾮常⼤的数据量存储，应⽤端改造也少**</span>，但 <span class="strong">**分⽚事务难以解决**</span> ，跨界点Join性能较差，逻</span><br><span class="line"></span><br><span class="line">辑复杂。</span><br><span class="line"></span><br><span class="line">《Java⼯程师修炼之道》的作者推荐 <span class="strong">**尽量不要对数据进⾏分⽚，因为拆分会带来逻辑、部署、运维的各种复杂**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**度**</span> ，⼀般的数据表在优化得当的情况下⽀撑千万以下的数据量是没有太⼤问题的。如果实在要分⽚，尽量选择</span><br><span class="line"></span><br><span class="line">客户端分⽚架构，这样可以减少⼀次和中间件的⽹络I/O。</span><br><span class="line"></span><br><span class="line">⽔平分表：</span><br><span class="line"></span><br><span class="line">表很⼤，分割后可以降低在查询时需要读的数据和索引的⻚数，同时也降低了索引的层数，提⾼查询次数<span class="strong">**适⽤场景**</span></span><br><span class="line"></span><br><span class="line">1、表中的数据本身就有独⽴性，例如表中分表记录各个地区的数据或者不同时期的数据，特别是有些数据</span><br><span class="line"></span><br><span class="line">常⽤，有些不常⽤。</span><br><span class="line"></span><br><span class="line">2、需要把数据存放在多个介质上。</span><br><span class="line"></span><br><span class="line"><span class="strong">**⽔平切分的缺点**</span></span><br><span class="line"></span><br><span class="line">1、给应⽤增加复杂度，通常查询时需要多个表名，查询所有数据都需UNION操作</span><br><span class="line"></span><br><span class="line">2、在许多数据库应⽤中，这种复杂度会超过它带来的优点，查询时会增加读⼀个索引层的磁盘次数</span><br><span class="line"></span><br><span class="line"><span class="strong">**下⾯补充⼀下数据库分⽚的两种常⻅⽅案：**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**客户端代理： 分⽚逻辑在应⽤端，封装在**</span><span class="strong">**jar**</span><span class="strong">**包中，通过修改或者封装**</span><span class="strong">**JDBC**</span><span class="strong">**层来实现。**</span> 当当⽹的</span><br><span class="line"></span><br><span class="line"><span class="strong">**Sharding-JDBC**</span> 、阿⾥的TDDL是两种⽐较常⽤的实现。</span><br><span class="line"></span><br><span class="line"><span class="strong">**中间件代理： 在应⽤和数据中间加了⼀个代理层。分⽚逻辑统⼀维护在中间件服务中。**</span> 我们现在谈的</span><br><span class="line"></span><br><span class="line"><span class="strong">**Mycat**</span> 、360的Atlas、⽹易的DDB等等都是这种架构的实现。</span><br><span class="line"></span><br><span class="line"><span class="strong">**分库分表后⾯临的问题**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**事务⽀持**</span> 分库分表后，就成了分布式事务了。如果依赖数据库本身的分布式事务管理功能去执⾏事务，将付出</span><br><span class="line"></span><br><span class="line">⾼昂的性能代价； 如果由应⽤程序去协助控制，形成程序逻辑上的事务，⼜会造成编程⽅⾯的负担。</span><br><span class="line"></span><br><span class="line"><span class="strong">**跨库**</span><span class="strong">**join**</span></span><br><span class="line"></span><br><span class="line">只要是进⾏切分，跨节点Join的问题是不可避免的。但是良好的设计和切分却可以减少此类情况的发⽣。解决</span><br><span class="line"></span><br><span class="line">这⼀问题的普遍做法是分两次查询实现。在第⼀次查询的结果集中找出关联数据的id,根据这些id发起第⼆次请</span><br><span class="line"></span><br><span class="line">求得到关联数据。 分库分表⽅案产品</span><br><span class="line"></span><br><span class="line"><span class="strong">**跨节点的**</span><span class="strong">**count,order by,group by**</span><span class="strong">**以及聚合函数问题**</span> 这些是⼀类问题，因为它们都需要基于全部数据集合进</span><br><span class="line"></span><br><span class="line">⾏计算。多数的代理都不会⾃动处理合并⼯作。解决⽅案：与解决跨节点join问题的类似，分别在各个节点上</span><br><span class="line"></span><br><span class="line">得到结果后在应⽤程序端进⾏合并。和join不同的是每个结点的查询可以并⾏执⾏，因此很多时候它的速度要</span><br><span class="line"></span><br><span class="line">⽐单⼀⼤表快很多。但如果结果集很⼤，对应⽤程序内存的消耗是⼀个问题。<span class="strong">**数据迁移，容量规划，扩容等问题**</span> 来⾃淘宝综合业务平台团队，它利⽤对2的倍数取余具有向前兼容的特性</span><br><span class="line"></span><br><span class="line">（如对4取余得1的数对2取余也是1）来分配数据，避免了⾏级别的数据迁移，但是依然需要进⾏表级别的迁</span><br><span class="line"></span><br><span class="line">移，同时对扩容规模和分表数量都有限制。总得来说，这些⽅案都不是⼗分的理想，多多少少都存在⼀些缺</span><br><span class="line"></span><br><span class="line">点，这也从⼀个侧⾯反映出了Sharding扩容的难度。</span><br><span class="line"></span><br><span class="line"><span class="strong">**ID**</span><span class="strong">**问题**</span></span><br><span class="line"></span><br><span class="line">⼀旦数据库被切分到多个物理结点上，我们将不能再依赖数据库⾃身的主键⽣成机制。⼀⽅⾯，某个分区数据</span><br><span class="line"></span><br><span class="line">库⾃⽣成的ID⽆法保证在全局上是唯⼀的；另⼀⽅⾯，应⽤程序在插⼊数据之前需要先获得ID,以便进⾏SQL路 </span><br><span class="line"></span><br><span class="line">由. ⼀些常⻅的主键⽣成策略</span><br><span class="line"></span><br><span class="line"><span class="strong">**UUID**</span> 使⽤UUID作主键是最简单的⽅案，但是缺点也是⾮常明显的。由于UUID⾮常的⻓，除占⽤⼤量存储空间</span><br><span class="line"></span><br><span class="line">外，最主要的问题是在索引上，在建⽴索引和基于索引进⾏查询时都存在性能问题。 <span class="strong">**Twitter**</span><span class="strong">**的分布式⾃增**</span><span class="strong">**ID**</span><span class="strong">**算法**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**Snowflake**</span> 在分布式系统中，需要⽣成全局UID的场合还是⽐较多的，twitter的snowflake解决了这种需求，实现也</span><br><span class="line"></span><br><span class="line">还是很简单的，除去配置信息，核⼼代码就是毫秒级时间41位 机器ID 10位 毫秒内序列12位。</span><br><span class="line"></span><br><span class="line">跨分⽚的排序分⻚</span><br><span class="line"></span><br><span class="line">般来讲，分⻚时需要按照指定字段进⾏排序。当排序字段就是分⽚字段的时候，我们通过分⽚规则可以⽐较容</span><br><span class="line"></span><br><span class="line">易定位到指定的分⽚，⽽当排序字段⾮分⽚字段的时候，情况就会变得⽐较复杂了。为了最终结果的准确性，</span><br><span class="line"></span><br><span class="line">我们需要在不同的分⽚节点中将数据进⾏排序并返回，并将不同分⽚返回的结果集进⾏汇总和再次排序</span><br></pre></td></tr></tbody></table></figure><h1 id="10-5-MySQL的复制原理以及流程"><a href="#10-5-MySQL的复制原理以及流程" class="headerlink" title="10.5 MySQL的复制原理以及流程"></a>10.5 MySQL的复制原理以及流程</h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">主从复制：将主数据库中的DDL和DML操作通过⼆进制⽇志（BINLOG）传输到从数据库上，然后将这些⽇志重新</span><br><span class="line"></span><br><span class="line">执⾏（重做）；从⽽使得从数据库的数据与主数据库保持⼀致。</span><br><span class="line"></span><br><span class="line"><span class="strong">**主从复制的作⽤**</span></span><br><span class="line"></span><br><span class="line">\1. 主数据库出现问题，可以切换到从数据库。</span><br><span class="line"></span><br><span class="line">\2. 可以进⾏数据库层⾯的读写分离。</span><br><span class="line"></span><br><span class="line">\3. 可以在从数据库上进⾏⽇常备份。</span><br><span class="line"></span><br><span class="line"><span class="strong">**MySQL**</span><span class="strong">**主从复制解决的问题**</span></span><br><span class="line"></span><br><span class="line">数据分布：随意开始或停⽌复制，并在不同地理位置分布数据备份</span><br><span class="line"></span><br><span class="line">负载均衡：降低单个服务器的压⼒</span><br><span class="line"></span><br><span class="line">⾼可⽤和故障切换：帮助应⽤程序避免单点失败</span><br><span class="line"></span><br><span class="line">升级测试：可以⽤更⾼版本的MySQL作为从库</span><br><span class="line"></span><br><span class="line"><span class="strong">**MySQL**</span><span class="strong">**主从复制⼯作原理**</span></span><br><span class="line"></span><br><span class="line">在主库上把数据更⾼记录到⼆进制⽇志</span><br><span class="line"></span><br><span class="line">从库将主库的⽇志复制到⾃⼰的中继⽇志</span><br><span class="line"></span><br><span class="line">从库读取中继⽇志的事件，将其重放到从库数据中</span><br><span class="line"></span><br><span class="line"><span class="strong">**基本原理流程，**</span><span class="strong">**3**</span><span class="strong">**个线程以及之间的关联**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**主**</span>：binlog线程——记录下所有改变了数据库数据的语句，放进master上的binlog中；</span><br><span class="line"></span><br><span class="line"><span class="strong">**从**</span>：io线程——在使⽤start slave 之后，负责从master上拉取 binlog 内容，放进⾃⼰的relay log中；</span><br><span class="line"></span><br><span class="line"><span class="strong">**从**</span>：sql执⾏线程——执⾏relay log中的语句；</span><br><span class="line"></span><br><span class="line"><span class="strong">**复制过程**</span>Binary log：主数据库的⼆进制⽇志</span><br><span class="line"></span><br><span class="line">Relay log：从服务器的中继⽇志</span><br><span class="line"></span><br><span class="line">第⼀步：master在每个事务更新数据完成之前，将该操作记录串⾏地写⼊到binlog⽂件中。</span><br><span class="line"></span><br><span class="line">第⼆步：salve开启⼀个I/O Thread，该线程在master打开⼀个普通连接，主要⼯作是binlog dump process。如果</span><br><span class="line"></span><br><span class="line">读取的进度已经跟上了master，就进⼊睡眠状态并等待master产⽣新的事件。I/O线程最终的⽬的是将这些事件写</span><br><span class="line"></span><br><span class="line">⼊到中继⽇志中。</span><br><span class="line"></span><br><span class="line">第三步：SQL Thread会读取中继⽇志，并顺序执⾏该⽇志中的SQL事件，从⽽与主数据库中的数据保持⼀致。</span><br></pre></td></tr></tbody></table></figure><h1 id="10-6-读写分离有哪些解决⽅案？"><a href="#10-6-读写分离有哪些解决⽅案？" class="headerlink" title="10.6 读写分离有哪些解决⽅案？"></a><strong>10.6</strong> <strong>读写分离有哪些解决⽅案？</strong></h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">读写分离是依赖于主从复制，⽽主从复制⼜是为读写分离服务的。因为主从复制要求 slave 不能写只能读（如果</span><br><span class="line"></span><br><span class="line">对 slave 执⾏写操作，那么 show slave status 将会呈现 Slave<span class="emphasis">_SQL_</span>Running=NO ，此时你需要按照前⾯提到的</span><br><span class="line"></span><br><span class="line">⼿动同步⼀下 slave ）。</span><br><span class="line"></span><br><span class="line"><span class="strong">**⽅案⼀**</span></span><br><span class="line"></span><br><span class="line">使⽤mysql-proxy代理优点：直接实现读写分离和负载均衡，不⽤修改代码，master和slave⽤⼀样的帐号，mysql官⽅不建议实际⽣产中</span><br><span class="line"></span><br><span class="line">使⽤</span><br><span class="line"></span><br><span class="line">缺点：降低性能， 不⽀持事务</span><br><span class="line"></span><br><span class="line"><span class="strong">**⽅案⼆**</span></span><br><span class="line"></span><br><span class="line">使⽤AbstractRoutingDataSource+aop+annotation在dao层决定数据源。</span><br><span class="line"></span><br><span class="line">如果采⽤了mybatis， 可以将读写分离放在ORM层，⽐如mybatis可以通过mybatis plugin拦截sql语句，所有的</span><br><span class="line"></span><br><span class="line">insert/update/delete都访问master库，所有的select 都访问salve库，这样对于dao层都是透明。 plugin实现时可以</span><br><span class="line"></span><br><span class="line">通过注解或者分析语句是读写⽅法来选定主从库。不过这样依然有⼀个问题， 也就是不⽀持事务， 所以我们还需</span><br><span class="line"></span><br><span class="line">要重写⼀下DataSourceTransactionManager， 将read-only的事务扔进读库， 其余的有读有写的扔进写库。</span><br><span class="line"></span><br><span class="line"><span class="strong">**⽅案三**</span></span><br><span class="line"></span><br><span class="line">使⽤AbstractRoutingDataSource+aop+annotation在service层决定数据源，可以⽀持事务.</span><br><span class="line"></span><br><span class="line">缺点：类内部⽅法通过this.xx()⽅式相互调⽤时，aop不会进⾏拦截，需进⾏特殊处理。</span><br></pre></td></tr></tbody></table></figure><h1 id="10-7-备份计划mysqldump以及xtranbackup的实现原理"><a href="#10-7-备份计划mysqldump以及xtranbackup的实现原理" class="headerlink" title="10.7 备份计划mysqldump以及xtranbackup的实现原理"></a>10.7 备份计划mysqldump以及xtranbackup的实现原理</h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**(1)**</span><span class="strong">**备份计划**</span></span><br><span class="line"></span><br><span class="line">视库的⼤⼩来定，⼀般来说 100G 内的库，可以考虑使⽤ mysqldump 来做，因为 mysqldump更加轻巧灵活，备份</span><br><span class="line"></span><br><span class="line">时间选在业务低峰期，可以每天进⾏都进⾏全量备份(mysqldump 备份出来的⽂件⽐较⼩，压缩之后更⼩)。</span><br><span class="line"></span><br><span class="line">100G 以上的库，可以考虑⽤ xtranbackup 来做，备份速度明显要⽐ mysqldump 要快。⼀般是选择⼀周⼀个全</span><br><span class="line"></span><br><span class="line">备，其余每天进⾏增量备份，备份时间为业务低峰期。</span><br><span class="line"></span><br><span class="line"><span class="strong">**(2)**</span><span class="strong">**备份恢复时间**</span></span><br><span class="line"></span><br><span class="line">物理备份恢复快，逻辑备份恢复慢</span><br><span class="line"></span><br><span class="line">这⾥跟机器，尤其是硬盘的速率有关系，以下列举⼏个仅供参考</span><br><span class="line"></span><br><span class="line">20G的2分钟（mysqldump）</span><br><span class="line"></span><br><span class="line">80G的30分钟(mysqldump)</span><br><span class="line"></span><br><span class="line">111G的30分钟（mysqldump)</span><br><span class="line"></span><br><span class="line">288G的3⼩时（xtra)</span><br><span class="line"></span><br><span class="line">3T的4⼩时（xtra)</span><br><span class="line"></span><br><span class="line">逻辑导⼊时间⼀般是备份时间的5倍以上<span class="strong">**(3)**</span><span class="strong">**备份恢复失败如何处理**</span></span><br><span class="line"></span><br><span class="line">⾸先在恢复之前就应该做⾜准备⼯作，避免恢复的时候出错。⽐如说备份之后的有效性检查、权限检查、空间检查</span><br><span class="line"></span><br><span class="line">等。如果万⼀报错，再根据报错的提示来进⾏相应的调整。</span><br><span class="line"></span><br><span class="line"><span class="strong">**(4)mysqldump**</span><span class="strong">**和**</span><span class="strong">**xtrabackup**</span><span class="strong">**实现原理**</span></span><br><span class="line"></span><br><span class="line">mysqldump</span><br><span class="line"></span><br><span class="line">mysqldump 属于逻辑备份。加⼊–single-transaction 选项可以进⾏⼀致性备份。后台进程会先设置 session 的事务</span><br><span class="line"></span><br><span class="line">隔离级别为 RR(SET SESSION TRANSACTION ISOLATION LEVELREPEATABLE READ)，之后显式开启⼀个事务</span><br><span class="line"></span><br><span class="line">(START TRANSACTION /<span class="emphasis">*!40100 WITH CONSISTENTSNAPSHOT *</span>/)，这样就保证了该事务⾥读到的数据都是事</span><br><span class="line"></span><br><span class="line">务事务时候的快照。之后再把表的数据读取出来。如果加上–master-data=1 的话，在刚开始的时候还会加⼀个数据</span><br><span class="line"></span><br><span class="line">库的读锁(FLUSH TABLES WITH READ LOCK),等开启事务后，再记录下数据库此时 binlog 的位置(showmaster</span><br><span class="line"></span><br><span class="line">status)，⻢上解锁，再读取表的数据。等所有的数据都已经导完，就可以结束事务</span><br><span class="line"></span><br><span class="line">Xtrabackup:</span><br><span class="line"></span><br><span class="line">xtrabackup 属于物理备份，直接拷⻉表空间⽂件，同时不断扫描产⽣的 redo ⽇志并保存下来。最后完成 innodb</span><br><span class="line"></span><br><span class="line">的备份后，会做⼀个 flush engine logs 的操作(⽼版本在有 bug，在5.6 上不做此操作会丢数据)，确保所有的 redo</span><br><span class="line"></span><br><span class="line">log 都已经落盘(涉及到事务的两阶段提交</span><br><span class="line"></span><br><span class="line">概念，因为 xtrabackup 并不拷⻉ binlog，所以必须保证所有的 redo log 都落盘，否则可能会丢最后⼀组提交事务</span><br><span class="line"></span><br><span class="line">的数据)。这个时间点就是 innodb 完成备份的时间点，数据⽂件虽然不是⼀致性的，但是有这段时间的 redo 就可</span><br><span class="line"></span><br><span class="line">以让数据⽂件达到⼀致性(恢复的时候做的事</span><br><span class="line"></span><br><span class="line">情)。然后还需要 flush tables with read lock，把 myisam 等其他引擎的表给备份出来，备份完后解锁。这样就做到</span><br><span class="line"></span><br><span class="line">了完美的热备。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="10-8-数据表损坏的修复⽅式有哪些？"><a href="#10-8-数据表损坏的修复⽅式有哪些？" class="headerlink" title="10.8  数据表损坏的修复⽅式有哪些？"></a>10.8  数据表损坏的修复⽅式有哪些？</h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">使⽤ myisamchk 来修复，具体步骤：</span><br><span class="line"></span><br><span class="line">1）修复前将mysql服务停⽌。</span><br><span class="line"></span><br><span class="line">2）打开命令⾏⽅式，然后进⼊到mysql的/bin⽬录。</span><br><span class="line"></span><br><span class="line">3）执⾏myisamchk –recover 数据库所在路径/<span class="emphasis">*.MYI</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">使⽤repair table 或者 OPTIMIZE table命令来修复，REPAIR TABLE table_name 修复表 OPTIMIZE TABLE</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">table_name 优化表 REPAIR TABLE ⽤于修复被破坏的表。 OPTIMIZE TABLE ⽤于回收闲置的数据库空间，当表上</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">的数据⾏被删除时，所占据的磁盘空间并没有⽴即被回收，使⽤了OPTIMIZE TABLE命令后这些空间将被回收，并</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">且对磁盘上的数据⾏进⾏重排（注意：是磁盘上，⽽⾮数据库）</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/10/Redis%E7%BC%93%E5%AD%98/"/>
      <url>/2022/06/10/Redis%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">redis缓存穿透</span><br><span class="line"><span class="code">    你所要查询的key并不存在于redis缓存中，这时又有大连的请求查询这个key，就会使得数据库负载过大，就像是穿过了缓存直接击中数据库，很容易把数据库给打挂了</span></span><br><span class="line"><span class="code">    解决方案：</span></span><br><span class="line"><span class="code">        第一种方法呢就是数据库查询不到的key直接保存在redis中，再次查询数据库的时候，缓存层直接返回空</span></span><br><span class="line"><span class="code">        第二种方法就涉及到了一个叫布隆过滤器的东西，本质上是一个二进制数组，以空间换时间，以低内存空间解决缓存穿透的问题，将所有存在的key提前存入布隆过滤器，在请求进入缓存之前，布隆过滤器进行拦截，若不存在直接返回空</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">redis缓存击穿</span></span><br><span class="line"><span class="code">    某一个热点的key失效了，大量的请求直接到达数据库</span></span><br><span class="line"><span class="code">    解决方法：</span></span><br><span class="line"><span class="code">        第一种设置永不过期</span></span><br><span class="line"><span class="code">        第二种就是加互斥锁，互斥锁就是同一时刻只有一个线程能够进行访问，加了互斥锁之后第一个访问完后，缓存中的数据将会被重建，之后直接从缓存中取就可以了</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">redis缓存雪崩</span></span><br><span class="line"><span class="code">    可能是redis宕机了，也可能是有很多key设置了统一过期时间</span></span><br><span class="line"><span class="code">    解决方案：</span></span><br><span class="line"><span class="code">        第一种构建高可用的Redis缓存：搭建Redis集群，提高Redis的容灾性</span></span><br><span class="line"><span class="code">        第二种使用熔断机制：对存储层增加限流措施，当请求超出限制时，对其提供降级措施，例如：当请求到达一定阈值，直接返回“系统繁忙“等提示，防止过多的请求到达数据库上，这样可以保证一部分用户还可以使用，其他用户多刷新几次也能得到结果</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
