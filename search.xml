<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>限流</title>
      <link href="/2022/11/15/%E9%99%90%E6%B5%81/"/>
      <url>/2022/11/15/%E9%99%90%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>常用限流方式</p><span id="more"></span><p>在电商高并发场景下，我们经常会使用一些常用方法，去应对流量高峰，比如<strong>限流、熔断、降级</strong>，今天我们聊聊限流。</p><p>什么是限流呢？限流是限制到达系统的并发请求数量，保证系统能够正常响应部分用户请求，而对于超过限制的流量，则通过拒绝服务的方式保证整体系统的可用性。</p><p>根据限流作用范围，可以分为<strong>单机限流和分布式限流</strong>；根据限流方式，又分为<strong>计数器、滑动窗口、漏桶限令牌桶限流</strong>，下面我们对这块详细进行讲解。</p><h1 id="常用限流方式"><a href="#常用限流方式" class="headerlink" title="常用限流方式"></a>常用限流方式</h1><h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><p>计数器是一种最简单限流算法，其原理就是：在一段时间间隔内，对请求进行计数，与阀值进行比较判断是否需要限流，一旦到了时间临界点，将计数器清零。</p><p>这个就像你去坐车一样，车厢规定了多少个位置，满了就不让上车了，不然就是超载了，被交警叔叔抓到了就要罚款的，如果我们的系统那就不是罚款的事情了，可能直接崩掉了。</p><p>程序执行逻辑：</p><ul><li>可以在程序中设置一个变量 count，当过来一个请求我就将这个数 +1，同时记录请求时间。</li><li>当下一个请求来的时候判断 count 的计数值是否超过设定的频次，以及当前请求的时间和第一次请求时间是否在 1 分钟内。</li><li>如果在 1 分钟内并且超过设定的频次则证明请求过多，后面的请求就拒绝掉。</li><li>如果该请求与第一个请求的间隔时间大于计数周期，且 count 值还在限流范围内，就重置 count。</li></ul><p>那么问题来了，如果有个需求对于某个接口 /query 每分钟最多允许访问 200 次，假设有个用户在第 59 秒的最后几毫秒瞬间发送 200 个请求，当 59 秒结束后 Counter 清零了，他在下一秒的时候又发送 200 个请求。</p><p>那么在 1 秒钟内这个用户发送了 2 倍的请求，这个是符合我们的设计逻辑的，这也是计数器方法的设计缺陷，系统可能会承受恶意用户的大量请求，甚至击穿系统。<strong>这种方法虽然简单，但也有个大问题就是没有很好的处理单位时间的边界。</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ba261bc04c7442b8d93d6c159b7a992~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p>不过说实话，这个计数引用了锁，在高并发场景，这个方式可能不太实用，我建议将锁去掉，然后将 l.count++ 的逻辑通过原子计数处理，这样就可以保证 l.count 自增时不会被多个线程同时执行，<strong>即通过原子计数的方式实现限流。</strong></p><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>滑动窗口是针对计数器存在的临界点缺陷，所谓滑动窗口（Sliding window）是一种流量控制技术，这个词出现在 TCP 协议中。滑动窗口把固定时间片进行划分，并且随着时间的流逝，进行移动，固定数量的可以移动的格子，进行计数并判断阀值。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5755d987c19740f1a693f7db5294e2a1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p>上图中我们用红色的虚线代表一个时间窗口（一分钟），每个时间窗口有 6 个格子，每个格子是 10 秒钟。每过 10 秒钟时间窗口向右移动一格，可以看红色箭头的方向。我们为每个格子都设置一个独立的计数器 Counter，假如一个请求在 0:45 访问了那么我们将第五个格子的计数器 +1（也是就是 0:40~0:50），在判断限流的时候需要把所有格子的计数加起来和设定的频次进行比较即可。</p><p>那么滑动窗口如何解决我们上面遇到的问题呢？来看下面的图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fde74d994f12411087e6f3c3f4417b66~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p>当用户在 0:59 秒钟发送了 200 个请求就会被第六个格子的计数器记录 +200，当下一秒的时候时间窗口向右移动了一个，此时计数器已经记录了该用户发送的 200 个请求，所以再发送的话就会触发限流，则拒绝新的请求。</p><p>其实计数器就是滑动窗口啊，只不过只有一个格子而已，所以想让限流做的更精确只需要划分更多的格子就可以了，为了更精确我们也不知道到底该设置多少个格子，<strong>格子的数量影响着滑动窗口算法的精度，依然有时间片的概念，无法根本解决临界点问题。</strong></p><h2 id="漏桶"><a href="#漏桶" class="headerlink" title="漏桶"></a>漏桶</h2><p>漏桶算法（Leaky Bucket），原理就是一个固定容量的漏桶，按照固定速率流出水滴。</p><p>用过水龙头都知道，打开龙头开关水就会流下滴到水桶里，而漏桶指的是水桶下面有个漏洞可以出水,如果水龙头开的特别大那么水流速就会过大，这样就可能导致水桶的水满了然后溢出。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4af9ff00cab84a4fa622cd8e2a279f56~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><blockquote><p>图片如果看不清，可单击图片并放大。</p></blockquote><p>一个固定容量的桶，有水流进来，也有水流出去。对于流进来的水来说，我们无法预计一共有多少水会流进来，也无法预计水流的速度。但是对于流出去的水来说，这个桶可以固定水流出的速率（处理速度），从而达到流量整形和流量控制的效果。</p><p>漏桶算法有以下特点：</p><ul><li>漏桶具有固定容量，出水速率是固定常量（流出请求）</li><li>如果桶是空的，则不需流出水滴</li><li>可以以任意速率流入水滴到漏桶（流入请求）</li><li>如果流入水滴超出了桶的容量，则流入的水滴溢出（新请求被拒绝）</li></ul><p>漏桶限制的是常量流出速率（即流出速率是一个固定常量值），<strong>所以最大的速率就是出水的速率，不能出现突发流量。</strong></p><h2 id="令牌桶"><a href="#令牌桶" class="headerlink" title="令牌桶"></a>令牌桶</h2><p>令牌桶算法（Token Bucket）是网络流量整形（Traffic Shaping）和速率限制（Rate Limiting）中最常使用的一种算法。典型情况下，令牌桶算法用来控制发送到网络上的数据的数目，并允许突发数据的发送。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68b7fe323e9e4fe0a83eb14897f018ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><blockquote><p>图片如果看不清，可单击图片并放大。</p></blockquote><p>我们有一个固定的桶，桶里存放着令牌（token）。一开始桶是空的，系统按固定的时间（rate）往桶里添加令牌，直到桶里的令牌数满，多余的请求会被丢弃。当请求来的时候，从桶里移除一个令牌，如果桶是空的则拒绝请求或者阻塞。</p><p>令牌桶有以下特点：</p><ul><li>令牌按固定的速率被放入令牌桶中</li><li>桶中最多存放 B 个令牌，当桶满时，新添加的令牌被丢弃或拒绝</li><li>如果桶中的令牌不足 N 个，则不会删除令牌，且请求将被限流（丢弃或阻塞等待）</li></ul><p><strong>令牌桶限制的是平均流入速率</strong>（允许突发请求，只要有令牌就可以处理，支持一次拿3个令牌，4个令牌…），<strong>并允许一定程度突发流量，所以也是非常常用的限流算法。</strong></p><h2 id="Redis-Lua-分布式限流"><a href="#Redis-Lua-分布式限流" class="headerlink" title="Redis + Lua 分布式限流"></a>Redis + Lua 分布式限流</h2><p>单机版限流仅能保护自身节点，但无法保护应用依赖的各种服务，并且在进行节点扩容、缩容时也无法准确控制整个服务的请求限制。</p><p>而分布式限流，以集群为维度，可以方便的控制这个集群的请求限制，从而保护下游依赖的各种服务资源。</p><p><strong>分布式限流最关键的是要将限流服务做成原子化</strong>，我们可以借助 Redis 的计数器，Lua 执行的原子性，进行分布式限流，大致的 Lua 脚本代码如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">local</span> <span class="token keyword">key</span> <span class="token operator">=</span> <span class="token string">"rate.limit:"</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">KEYS</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">--限流KEY</span><span class="token keyword">local</span> <span class="token keyword">limit</span> <span class="token operator">=</span> tonumber<span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">--限流大小</span><span class="token keyword">local</span> <span class="token keyword">current</span> <span class="token operator">=</span> tonumber<span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token keyword">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token keyword">key</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">current</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">limit</span> <span class="token keyword">then</span> <span class="token comment">--如果超出限流大小</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">else</span>  <span class="token comment">--请求数+1，并设置1秒过期</span>  redis<span class="token punctuation">.</span><span class="token keyword">call</span><span class="token punctuation">(</span><span class="token string">"INCRBY"</span><span class="token punctuation">,</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>   redis<span class="token punctuation">.</span><span class="token keyword">call</span><span class="token punctuation">(</span><span class="token string">"expire"</span><span class="token punctuation">,</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token keyword">current</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">end</span>复制代码</code></pre><p>限流逻辑（Java 语言）：</p><pre class="language-ini" data-language="ini"><code class="language-ini">public static boolean accquire() throws IOException, URISyntaxException {    <span class="token key attr-name">Jedis jedis</span> <span class="token punctuation">=</span> <span class="token value attr-value">new Jedis("127.0.0.1");</span>    <span class="token key attr-name">File luaFile</span> <span class="token punctuation">=</span> <span class="token value attr-value">new File(RedisLimitRateWithLUA.class.getResource("/").toURI().getPath() + "limit.lua");</span>    <span class="token key attr-name">String luaScript</span> <span class="token punctuation">=</span> <span class="token value attr-value">FileUtils.readFileToString(luaFile);</span>    <span class="token key attr-name">String key</span> <span class="token punctuation">=</span> <span class="token value attr-value">"ip:" + System.currentTimeMillis()/1000; // 当前秒</span>    <span class="token key attr-name">String limit</span> <span class="token punctuation">=</span> <span class="token value attr-value">"5"; // 最大限制</span>    <span class="token key attr-name">List&lt;String&gt; keys</span> <span class="token punctuation">=</span> <span class="token value attr-value">new ArrayList&lt;String&gt;();</span>    keys.add(key);    <span class="token key attr-name">List&lt;String&gt; args</span> <span class="token punctuation">=</span> <span class="token value attr-value">new ArrayList&lt;String&gt;();</span>    args.add(limit);    <span class="token key attr-name">Long result</span> <span class="token punctuation">=</span> <span class="token value attr-value">(Long)(jedis.eval(luaScript, keys, args)); // 执行lua脚本，传入参数</span>    <span class="token key attr-name">return result</span> <span class="token punctuation">=</span><span class="token value attr-value">= 1;</span>}复制代码</code></pre><h2 id="聊聊其它"><a href="#聊聊其它" class="headerlink" title="聊聊其它"></a>聊聊其它</h2><p>上面的限流方式，主要是针对服务器进行限流，<strong>我们也可以对容器进行限流，比如 Tomcat、Nginx 等限流手段。</strong></p><p>Tomcat 可以设置最大线程数（maxThreads），当并发超过最大线程数会排队等待执行；而 Nginx 提供了两种限流手段：一是控制速率，二是控制并发连接数。</p><p>对于 Java 语言，我们其实有相关的限流组件，比如<strong>大家常用的 RateLimiter，其实就是基于令牌桶算法</strong>，大家知道为什么唯独选用令牌桶么？</p><p>对于 Go 语言，也有该语言特定的限流方式，比如可以通过 channel 实现并发控制限流，也支持第三方库 httpserver 实现限流，详见这篇 <a href="https://link.juejin.cn/?target=https://mp.weixin.qq.com/s?__biz=Mzg3OTU5NzQ1Mw==&amp;mid=2247484037&amp;idx=1&amp;sn=c638e6def7aee7f14c467202c9a55d4f&amp;chksm=cf034067f874c9712a288149593073c38696c6fd550e215a6f7dd0e0418ac4da8146b6c46970&amp;token=227017804&amp;lang=zh_CN%23rd">《Go 限流的常见方法》</a>。</p><p>在实际的限流场景中，我们也可以控制单个 IP、城市、渠道、设备 id、用户 id 等在一定时间内发送的请求数；如果是开放平台，需要为每个 appkey 设置独立的访问速率规则。</p><h1 id="限流对比"><a href="#限流对比" class="headerlink" title="限流对比"></a>限流对比</h1><p>下面我们就对常用的线程策略，总结它们的优缺点，便于以后选型。</p><p><strong>计数器：</strong></p><ul><li>优点：固定时间段计数，实现简单，适用不太精准的场景；</li><li>缺点：对边界没有很好处理，导致限流不能精准控制。</li></ul><p><strong>滑动窗口：</strong></p><ul><li>优点：将固定时间段分块，时间比“计数器”复杂，适用于稍微精准的场景；</li><li>缺点：实现稍微复杂，还是不能彻底解决“计数器”存在的边界问题。</li></ul><p><strong>漏桶：</strong></p><ul><li>优点：可以很好的控制消费频率；</li><li>缺点：实现稍微复杂，单位时间内，不能多消费，感觉不太灵活。</li></ul><p><strong>令牌桶：</strong></p><ul><li>优点：可以解决“漏桶”不能灵活消费的问题，又能避免过渡消费，强烈推荐；</li><li>缺点：实现稍微复杂，其它缺点没有想到。</li></ul><p><strong>Redis + Lua 分布式限流：</strong></p><ul><li>优点：支持分布式限流，有效保护下游依赖的服务资源；</li><li>缺点：依赖 Redis，对边界没有很好处理，导致限流不能精准控制。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 电商 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Python 3.11</title>
      <link href="/2022/11/07/%E6%B5%85%E8%B0%88Python%203.11/"/>
      <url>/2022/11/07/%E6%B5%85%E8%B0%88Python%203.11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Python 3.11</p><span id="more"></span><h2 id="浅谈Python-3-11"><a href="#浅谈Python-3-11" class="headerlink" title="浅谈Python 3.11"></a>浅谈Python 3.11</h2><h3 id="1、性能提升"><a href="#1、性能提升" class="headerlink" title="1、性能提升"></a>1、性能提升</h3><p>Python 3.11 比 Python 3.10 快10-60%</p><p>（通过dockerbub中 python官方的测试集进行比对 python:bullseye， docker pull python:bullseye）</p><h3 id="2、更好的错误信息提示"><a href="#2、更好的错误信息提示" class="headerlink" title="2、更好的错误信息提示"></a>2、更好的错误信息提示</h3><p>错误提示信息更加准确</p><p>python 2.7</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> <span class="token string">'int'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'__getitem__'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span></code></pre><p>python 3.11</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> <span class="token string">'int'</span> <span class="token builtin">object</span> <span class="token keyword">is</span> <span class="token keyword">not</span> subscriptable<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span></code></pre><h3 id="3、新增异常类的add-note方法"><a href="#3、新增异常类的add-note方法" class="headerlink" title="3、新增异常类的add_note方法"></a>3、新增异常类的add_note方法</h3><p>异常类增加了add_note，可以异常增加更多的提示信息</p><p><img src="https://pic2.zhimg.com/80/v2-97a73714ab0fbe0aecb54dbcdf7ba391_1440w.webp" alt="img"></p><p>python 3.11增加add_note方法</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token keyword">except</span> TypeError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    e<span class="token punctuation">.</span>add_note<span class="token punctuation">(</span><span class="token string">'类型错了'</span><span class="token punctuation">)</span>    e<span class="token punctuation">.</span>add_note<span class="token punctuation">(</span><span class="token string">'该用int'</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span> e</code></pre><p>抛出的异常信息</p><pre class="language-python" data-language="python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"d:\py311\test.py"</span><span class="token punctuation">,</span> line <span class="token number">6</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    <span class="token keyword">raise</span> e  File <span class="token string">"d:\py311\test.py"</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> <span class="token builtin">str</span>类型错了该用<span class="token builtin">int</span></code></pre><h3 id="4、支持抛出抛出异常组"><a href="#4、支持抛出抛出异常组" class="headerlink" title="4、支持抛出抛出异常组"></a>4、支持抛出抛出异常组</h3><p><strong>异常组</strong>是python3.11 新加的概念，需要使用**except***进行捕获</p><p>特别注意是<strong>异常组</strong>ExceptionGroup，不是异常的组合[exception1，exception2,…]</p><p>异常组的定义</p><pre class="language-python" data-language="python"><code class="language-python">eg1 <span class="token operator">=</span> ExceptionGroup<span class="token punctuation">(</span><span class="token string">"one error"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ValueError<span class="token punctuation">(</span><span class="token number">654</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>eg2 <span class="token operator">=</span> ExceptionGroup<span class="token punctuation">(</span><span class="token string">"two errors"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ValueError<span class="token punctuation">(</span><span class="token number">654</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TypeError<span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ExceptionGroup<span class="token punctuation">(</span><span class="token string">'two errors'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ValueError<span class="token punctuation">(</span><span class="token number">654</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TypeError<span class="token punctuation">(</span><span class="token string">'int'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>eg3 <span class="token operator">=</span> ExceptionGroup<span class="token punctuation">(</span><span class="token string">"no errors"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>异常组用于处理抛出的多个异常，在之前Python3.11 之前版本，只能处理一个异常</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> ExceptionGroup<span class="token punctuation">(</span>        <span class="token string">"group"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>TypeError<span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ValueError<span class="token punctuation">(</span><span class="token number">654</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TypeError<span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token keyword">except</span><span class="token operator">*</span> ValueError <span class="token keyword">as</span> eg<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Handling ValueError: </span><span class="token interpolation"><span class="token punctuation">{</span>eg<span class="token punctuation">.</span>exceptions<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token operator">*</span> TypeError <span class="token keyword">as</span> eg<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Handling TypeError: </span><span class="token interpolation"><span class="token punctuation">{</span>eg<span class="token punctuation">.</span>exceptions<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment">#Handling ValueError: (ValueError(654),)</span><span class="token comment">#Handling TypeError: (TypeError('str'), TypeError('int'))</span></code></pre><h3 id="5、增加内置支持toml格式解析"><a href="#5、增加内置支持toml格式解析" class="headerlink" title="5、增加内置支持toml格式解析"></a>5、增加内置支持toml格式解析</h3><p>新增toml格式文本解析，支持从文件读取和字符串中读取</p><p>目前python 3.11 内置的文本格式解析已经包括：json、toml、ini、xml，尚不支持的有<strong>yaml</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tomllib<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'123.toml'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>    data <span class="token operator">=</span> tomllib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fd<span class="token punctuation">)</span>toml_str <span class="token operator">=</span> <span class="token triple-quoted-string string">"""[owner]name = "Tom Preston-Werner"dob = 1979-05-27T07:32:00-08:00"""</span>data <span class="token operator">=</span> tomllib<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>toml_str<span class="token punctuation">)</span></code></pre><h3 id="6、更强的类型标注"><a href="#6、更强的类型标注" class="headerlink" title="6、更强的类型标注"></a>6、更强的类型标注</h3><h4 id="（1）LiteralString"><a href="#（1）LiteralString" class="headerlink" title="（1）LiteralString"></a>（1）LiteralString</h4><p>目前，试了vscode 和mypy 没有报错，需要等mypy更新</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> LiteralStringuser_id <span class="token operator">=</span> <span class="token string">'1'</span>query <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'select * from user where user_id = </span><span class="token interpolation"><span class="token punctuation">{</span>user_id<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>sql<span class="token punctuation">:</span> LiteralString<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>test<span class="token punctuation">(</span>sql<span class="token operator">=</span>query<span class="token punctuation">)</span></code></pre><h4 id="（2）TypedDict、NotRequired、Required"><a href="#（2）TypedDict、NotRequired、Required" class="headerlink" title="（2）TypedDict、NotRequired、Required"></a>（2）TypedDict、NotRequired、Required</h4><p>类型字典，非必选属性和必选属性</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> TypedDict<span class="token punctuation">,</span> NotRequired<span class="token punctuation">,</span> Required<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>TypedDict<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span>    age<span class="token punctuation">:</span> NotRequired<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>TypedDict<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> Required<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span>    students<span class="token punctuation">:</span> NotRequired<span class="token punctuation">[</span>List<span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h4 id="（3）Self"><a href="#（3）Self" class="headerlink" title="（3）Self"></a>（3）Self</h4><p>表示自身的类型</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token punctuation">,</span> Self<span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Self<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JsonPath基础使用</title>
      <link href="/2022/10/27/JsonPath/"/>
      <url>/2022/10/27/JsonPath/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Json Path：处理文件的好帮手</p><span id="more"></span><h3 id="Json-Path介绍"><a href="#Json-Path介绍" class="headerlink" title="Json Path介绍"></a>Json Path介绍</h3><p>son Path和JSON文档有关系，正如<a href="https://so.csdn.net/so/search?q=XPath&amp;spm=1001.2101.3001.7020">XPath</a>之于XML文档一样，JsonPath为Json文档提供了解析能力，通过使用JsonPath，你可以方便的查找节点、获取想要的数据，JsonPath是Json版的XPath</p><h3 id="Json-Path语法"><a href="#Json-Path语法" class="headerlink" title="Json Path语法"></a>Json Path语法</h3><p>JsonPath的语法相对简单，它采用开发语言友好的<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&amp;spm=1001.2101.3001.7020">表达式</a>形式</p><table><thead><tr><th align="left">符号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">$</td><td align="center">查询根节点对象，用于表示json数据，可以使数组或对象</td></tr><tr><td align="left">@</td><td align="center">过滤器断言处理的当前节点对象</td></tr><tr><td align="left">*</td><td align="center">通配符，可以表示一个名字或数字</td></tr><tr><td align="left">..</td><td align="center">递归搜索</td></tr><tr><td align="left">.<name></name></td><td align="center">表示一个子节点</td></tr><tr><td align="left">[‘<name>‘ (,’<name>‘)]</name></name></td><td align="center">表示一个或多个子节点</td></tr><tr><td align="left">[<number> (, <number>)]</number></number></td><td align="center">表示一个人或多个数组下标</td></tr><tr><td align="left">[start:end]</td><td align="center">数组片段、区间，顾头不顾尾</td></tr><tr><td align="left">[?(<expression>)]</expression></td><td align="center">过滤器表达式</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>可以在JsonPath表达式执行后进行调用，其输入值为表达式的结果</p><table><thead><tr><th>名称</th><th align="center">描述</th><th align="right">输出</th></tr></thead><tbody><tr><td>min()</td><td align="center">获取数值类型数组的最小值</td><td align="right">Double</td></tr><tr><td>max()</td><td align="center">获取数值类型数组的最大值</td><td align="right">Double</td></tr><tr><td>avg()</td><td align="center">获取数值类型数组的平均值</td><td align="right">Double</td></tr><tr><td>stddev()</td><td align="center">获取数值类型数组的标准差</td><td align="right">Double</td></tr><tr><td>length()</td><td align="center">获取数值类型数组的长度</td><td align="right">integer</td></tr></tbody></table><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过滤器是用于过滤数组的逻辑表达式，一个通常的表达式形如：[?(@.age &gt; 18)]，可以通过逻辑表达式&amp;&amp;或||组合多个过滤器表达式，例如[?(@.price &lt; 10 &amp;&amp; @.category == ‘fiction’)]，字符串必须用单引号包围，例如[?(@.color == ‘blue’)]。</p><table><thead><tr><th>操作符</th><th align="center">描述</th></tr></thead><tbody><tr><td>!=</td><td align="center">不等于符号</td></tr><tr><td>==</td><td align="center">等于符号，但数字1不等于字符1</td></tr><tr><td>&lt;</td><td align="center">小于</td></tr><tr><td>&lt;=</td><td align="center">小于等于</td></tr><tr><td>&gt;</td><td align="center">大于</td></tr><tr><td>&gt;=</td><td align="center">大于等于</td></tr><tr><td>=~</td><td align="center">判断是否符合正则表达式</td></tr><tr><td>in</td><td align="center">所属符号</td></tr><tr><td>nin</td><td align="center">排除符号</td></tr><tr><td>size</td><td align="center">size of left (array or string) should match right</td></tr><tr><td>empty</td><td align="center">判空符号</td></tr></tbody></table><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre class="language-markup" data-language="markup"><code class="language-markup">{ "store": {    "book": [       { "category": "reference",        "author": "Nigel Rees",        "title": "Sayings of the Century",        "price": 8.95      },      { "category": "fiction",        "author": "Evelyn Waugh",        "title": "Sword of Honour",        "price": 12.99      },      { "category": "fiction",        "author": "Herman Melville",        "title": "Moby Dick",        "isbn": "0-553-21311-3",        "price": 8.99      },      { "category": "fiction",        "author": "J. R. R. Tolkien",        "title": "The Lord of the Rings",        "isbn": "0-395-19395-8",        "price": 22.99      }    ],    "bicycle": {      "color": "red",      "price": 19.95    }  }}</code></pre><table><thead><tr><th><strong>XPath</strong></th><th><strong>JSONPath</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td><code>/store/book/author</code></td><td><code>$.store.book[*].author</code></td><td>书点所有书的作者</td></tr><tr><td><code>//author</code></td><td><code>$..author</code></td><td>所有的作者</td></tr><tr><td><code>/store/*</code></td><td><code>$.store.*</code></td><td>store的所有元素。所有的bookst和bicycle</td></tr><tr><td><code>/store//price</code></td><td><code>$.store..price</code></td><td>store里面所有东西的price</td></tr><tr><td><code>//book[3]</code></td><td><code>$..book[2]</code></td><td>第三个书</td></tr><tr><td><code>//book[last()]</code></td><td><code>$..book[(@.length-1)]</code></td><td>最后一本书</td></tr><tr><td><code>//book[position()&lt;3]</code></td><td><code>$..book[0,1]``$..book[:2]</code></td><td>前面的两本书。</td></tr><tr><td><code>//book[isbn]</code></td><td><code>$..book[?(@.isbn)]</code></td><td>过滤出所有的包含isbn的书。</td></tr><tr><td><code>//book[price&lt;10]</code></td><td><code>$..book[?(@.price&lt;10)]</code></td><td>过滤出价格低于10的书。</td></tr><tr><td><code>//*</code></td><td><code>$..*</code></td><td>所有元素。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JsonPath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS-免费ssl证书-Nginx配置</title>
      <link href="/2022/10/26/HTTPS-%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6-Nginx%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/10/26/HTTPS-%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6-Nginx%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>HTTPS-免费ssl证书-Nginx配置</p><span id="more"></span><h1 id="HTTPS-免费ssl证书-Nginx配置"><a href="#HTTPS-免费ssl证书-Nginx配置" class="headerlink" title="HTTPS-免费ssl证书-Nginx配置"></a>HTTPS-免费ssl证书-Nginx配置</h1><h3 id="一-Http和Https的区别"><a href="#一-Http和Https的区别" class="headerlink" title="一 Http和Https的区别"></a>一 Http和Https的区别</h3><pre class="language-python" data-language="python"><code class="language-python">HTTP协议，英文全称是Hyper Text Transfer Protocol，是超文本传输协议HTTPS协议，英文全称Hyper Text Transfer Protocol over SecureSocket Layer，超文本传输安全协议HTTPS 和 HTTP 的默认端口不同<span class="token punctuation">(</span><span class="token number">443</span>和<span class="token number">80</span><span class="token punctuation">)</span>HTTPS在 HTTP与 TCP 之间加入了一个加密<span class="token operator">/</span>身份验证层，提供了身份验证与加密通讯HTTP<span class="token operator">+</span> SSL <span class="token operator">/</span> TLS，也就是在 http上又加了一层处理加密信息的模块，比 http安全，可防止数据在传输过程中被窃取、改变，确保数据的完整性SSL（Secure Socket Layer，安全套接字层）：<span class="token number">1994</span>年为 Netscape 所研发，SSL 协议位于 TCP<span class="token operator">/</span>IP 协议与各种应用层协议之间，为数据通讯提供安全支持。TLS（Transport Layer Security，传输层安全）：其前身是 SSL，它最初的几个版本（SSL <span class="token number">1.0</span>、SSL <span class="token number">2.0</span>、SSL <span class="token number">3.0</span>）由网景公司开发，<span class="token number">1999</span>年从 <span class="token number">3.1</span> 开始被 IETF 标准化并改名，发展至今已经有 TLS <span class="token number">1.0</span>、TLS <span class="token number">1.1</span>、TLS <span class="token number">1.2</span> 三个版本。SSL3<span class="token punctuation">.</span><span class="token number">0</span>和TLS1<span class="token punctuation">.</span><span class="token number">0</span>由于存在安全漏洞，已经很少被使用到。TLS <span class="token number">1.3</span> 改动会比较大，目前还在草案阶段，目前使用最广泛的是TLS <span class="token number">1.1</span>、TLS <span class="token number">1.2</span></code></pre><h4 id="1-1-HTTP不安全"><a href="#1-1-HTTP不安全" class="headerlink" title="1.1 HTTP不安全"></a><strong>1.1 HTTP不安全</strong></h4><p>HTTP 由于是明文传输，主要存在三大风险：<strong>窃听风险、篡改风险、冒充风险</strong></p><h5 id="1-1-1-窃听风险"><a href="#1-1-1-窃听风险" class="headerlink" title="1.1.1 窃听风险"></a><strong>1.1.1 窃听风险</strong></h5><p>中间人可以获取到通信内容，由于内容是明文，所以获取明文后有安全风险</p><h5 id="1-1-2-篡改风险"><a href="#1-1-2-篡改风险" class="headerlink" title="1.1.2 篡改风险"></a><strong>1.1.2 篡改风险</strong></h5><p>中间人可以篡改报文内容后再发送给对方，风险极大。</p><h5 id="1-1-3冒充风险"><a href="#1-1-3冒充风险" class="headerlink" title="1.1.3冒充风险"></a><strong>1.1.3冒充风险</strong></h5><p>比如你以为是在和某宝通信，但实际上是在和一个钓鱼网站通信。</p><p>HTTPS 是为了解决这三大风险而存在的，接下来我们看看 HTTPS 到底解决了什么问题</p><h4 id="1-2-HTTP向HTTPS的演变"><a href="#1-2-HTTP向HTTPS的演变" class="headerlink" title="1.2 HTTP向HTTPS的演变"></a><strong>1.2 HTTP向HTTPS的演变</strong></h4><p><strong>HTTP 向 HTTPS 演化的过程</strong></p><p>第一步：为了防止上述现象的发生，人们想到一个办法：对传输的信息加密（即使黑客截获，也无法破解）</p><p>对称加密，双方拥有相同的密钥，信息得到安全传输，但此种方式的缺点是：</p><p>（1）不同的客户端、服务器数量庞大，所以双方都需要维护大量的密钥，维护成本很高</p><p>（2）因每个客户端、服务器的安全级别不同，密钥极易泄露</p><p>第二步：既然使用对称加密时，密钥维护这么繁琐，那我们就用非对称加密试试</p><p>客户端用公钥对请求内容加密，服务器使用私钥对内容解密，反之亦然，但上述过程也存在缺点：</p><p>（1）公钥是公开的（也就是黑客也会有公钥），所以私钥加密的信息，如果被黑客截获，其可以使用公钥进行解密，获取其中的内容</p><p>第三步：非对称加密既然也有缺陷，那我们就将对称加密，非对称加密两者结合起来，取其精华、去其糟粕，发挥两者的各自的优势</p><p>（1）客户端说：（咱们后续回话采用对称加密吧，这是对称加密的算法和对称密钥）这段话用公钥进行加密，然后传给服务器</p><p>（2）服务器收到信息后，用私钥解密，提取出对称加密算法和对称密钥后，服务器说：（好的）对称密钥加密</p><p>（3）后续两者之间信息的传输就可以使用对称加密的方式了</p><p>遇到的问题：</p><p>（1）客户端如何获得公钥</p><p>（2）如何确认服务器是真实的而不是黑客</p><p>第四步：获取公钥与确认服务器身份</p><p>1、获取公钥</p><p>（1）提供一个下载公钥的地址，回话前让客户端去下载。（缺点：下载地址有可能是假的；客户端每次在回话前都先去下载公钥也很麻烦） （2）回话开始时，服务器把公钥发给客户端（缺点：黑客冒充服务器，发送给客户端假的公钥）</p><p>2、那有木有一种方式既可以安全的获取公钥，又能防止黑客冒充呢？ 那就需要用到终极武器了：SSL 证书[申购]</p><p>服务器发送了一个SSL证书给客户端，SSL 证书中包含的具体内容有：</p><p>（1）证书的发布机构CA</p><p>（2）证书的有效期</p><p>（3）公钥</p><p>（4）证书所有者</p><p>（5）签名</p><p>3、客户端在接受到服务端发来的SSL证书时，会对证书的真伪进行校验，以浏览器为例说明如下：</p><p>（1）首先浏览器读取证书中的证书所有者、有效期等信息进行一一校验</p><p>（2）浏览器开始查找操作系统中已内置的受信任的证书发布机构CA，与服务器发来的证书中的颁发者CA比对，用于校验证书是否为合法机构颁发</p><p>（3）如果找不到，浏览器就会报错，说明服务器发来的证书是不可信任的。</p><p>（4）如果找到，那么浏览器就会从操作系统中取出 颁发者CA 的公钥，然后对服务器发来的证书里面的签名进行解密</p><p>（5）浏览器使用相同的hash算法计算出服务器发来的证书的hash值，将这个计算的hash值与证书中签名做对比</p><p>（6）对比结果一致，则证明服务器发来的证书合法，没有被冒充</p><p>（7）此时浏览器就可以读取证书中的公钥，用于后续加密了</p><p>4、所以通过发送SSL证书的形式，既解决了公钥获取问题，又解决了黑客冒充问题，一箭双雕，HTTPS加密过程也就此形成</p><p>所以相比HTTP，HTTPS 传输更加安全</p><p>（1） 所有信息都是加密传播，黑客无法窃听。</p><p>（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。</p><p>（3） 配备身份证书，防止身份被冒充</p><h3 id="二-HTTPS认证流程"><a href="#二-HTTPS认证流程" class="headerlink" title="二 HTTPS认证流程"></a>二 HTTPS认证流程</h3><p><a href="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs4.51cto.com%2Foss%2F202001%2F16%2Fe21ecbee958cc8748aeaa66308279833.png&amp;refer=http%3A%2F%2Fs4.51cto.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1667614963&amp;t=2fe7cfe94f212cd4710ac4b9175553f7">HTTPS认证流程</a></p><h3 id="三-ssl证书分类"><a href="#三-ssl证书分类" class="headerlink" title="三 ssl证书分类"></a>三 ssl证书分类</h3><p>SSL证书依据功能和品牌不同分类有所不同，但SSL证书作为国际通用的产品，最为重要的便是产品兼容性（即证书根预埋技术），因为他解决了网民登录网站的信任问题，网民可以通过SSL证书轻松识别网站的真实身份。SSL证书分为如下种类：</p><ul><li>域名型SSL证书（DV SSL）</li><li>企业型SSL证书（OV SSL）</li><li>增强型SSL证书（EV SSL）</li></ul><h3 id="域名型SSL证书（DV-SSL）"><a href="#域名型SSL证书（DV-SSL）" class="headerlink" title="域名型SSL证书（DV SSL）"></a><strong>域名型SSL证书（DV SSL）</strong></h3><p>只验证网站域名所有权的简易型SSL证书，此类证书仅能起到网站机密信息加密的作用，无法向用户证明网站的真实身份。适用于个人网站、小型组织或企业网站、各类加密应用（如数据库和即时通讯协议等）。</p><h3 id="企业型-SSL-证书（OV-SSL）"><a href="#企业型-SSL-证书（OV-SSL）" class="headerlink" title="企业型 SSL 证书（OV SSL）"></a><strong>企业型 SSL 证书（OV SSL）</strong></h3><p>需要验证网站所有单位的真实身份的标准型SSL证书，需要购买者提交组织机构资料和单位授权信等在官方注册的凭证，不仅能起到网站机密信息加密的作用，而且能向用户证明网站的真实身份。所以，推荐在所有电子商务网站使用，因为<a href="https://www.zhihu.com/search?q=%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2323606273%7D">电子商务</a>需要的是在线信任和在线安全。</p><h3 id="增强型-SSL-证书（EV-SSL）"><a href="#增强型-SSL-证书（EV-SSL）" class="headerlink" title="增强型 SSL 证书（EV SSL）"></a><strong>增强型 SSL 证书（EV SSL）</strong></h3><p>同样是基于SSL/TLS安全协议，都是用于网站的身份验证和信息在网上的传输加密，但验证流程更加具体详细，验证步骤更多，证书所绑定的网站就更加的可靠，可信，它跟普通SSL证书的区别也是明显的，证书上面会显示更多的信息，不仅仅是网站所属单位信息，还有公司地址等等；部署证书后，用户打开网站时，浏览器地址栏会显示绿色，在地址栏还会显示网站所属单位的名称，特别适合金融、保险、p2p、电商、网上支付等等行业</p><h3 id="四-申请免费证书"><a href="#四-申请免费证书" class="headerlink" title="四 申请免费证书"></a>四 申请免费证书</h3><p>各大平台都会提供免费ssl证书，一般一年，过期后收费，如阿里云，七牛云，腾讯云等</p><p>免费90天，到期可以继续免费申请的：<a href="https://link.zhihu.com/?target=https://www.sslforfree.com/">https://www.sslforfree.com/</a>（要注册，要翻墙）</p><p><a href="https://zhuanlan.zhihu.com/p/561907474">详细查看原地址</a></p>]]></content>
      
      
      <categories>
          
          <category> ssl证书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssl证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的排序在底层是如何实现</title>
      <link href="/2022/09/18/mysql%E7%9A%84%E6%8E%92%E5%BA%8F%E5%9C%A8%E5%BA%95%E5%B1%82%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/09/18/mysql%E7%9A%84%E6%8E%92%E5%BA%8F%E5%9C%A8%E5%BA%95%E5%B1%82%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>MySQL</p><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在日常的 MySQL 数据库使用过程中，我们通常会遇见排序的需求，例如：按照消费金额排序，按照字母排序，等等。</p><p>下面我们以一个简单的订单表为例：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `sp_order` (`id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',`order_id` int(10) unsigned NOT NULL COMMENT '订单ID',`user_id` mediumint(8) unsigned NOT NULL COMMENT '下订单会员id',`order_number` varchar(32) NOT NULL COMMENT '订单编号',`order_price` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '订单总金额',`order_pay` enum('0','1','2','3') NOT NULL DEFAULT '1' COMMENT '支付方式 0未支付 1支付宝 2微信 3银行卡',`pay_status` enum('0','1') NOT NULL DEFAULT '0' COMMENT '订单状态： 0未付款、1已付款',`create_time` int(10) unsigned NOT NULL COMMENT '记录生成时间',`update_time` int(10) unsigned NOT NULL COMMENT '记录修改时间',PRIMARY KEY (`id`),KEY `index_1` (`order_number`)) ENGINE=InnoDB AUTO_INCREMENT=10000 DEFAULT CHARSET=utf8 COMMENT='订单表';</code></pre><p>我们用 Python 生成一万条测试数据，用来测试数据库排序。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> pymysql<span class="token keyword">import</span> randomn <span class="token operator">=</span> <span class="token number">1</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"test01"</span><span class="token punctuation">)</span><span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment"># 使用cursor()方法创建一个游标对象</span>    cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 使用execute()方法执行SQL语句</span>    sql <span class="token operator">=</span> <span class="token string">"INSERT INTO sp_order(order_id, user_id, order_number, order_price, order_pay, pay_status, create_time, update_time) VALUES(%s,%s,%s,%s,'%s','%s',%s,%s)"</span>    order_id <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">)</span>    user_id <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    order_number <span class="token operator">=</span> <span class="token string">"DD"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span>    order_price <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    order_pay <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    pay_status <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    create_time <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">9999999</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    update_time <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">9999999</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>order_id<span class="token punctuation">,</span> user_id<span class="token punctuation">,</span> order_number<span class="token punctuation">,</span> order_price<span class="token punctuation">,</span> order_pay<span class="token punctuation">,</span> pay_status<span class="token punctuation">,</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 提交数据</span>    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 关闭游标和数据库的连接</span>    cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭数据库连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>假设我们现在需要查询金额大于 100 且按照订单编号进行排序的前 1000 行数据的订单金额、支付方式以订单编号及付款状态，我们就可以得到如下 SQL：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select order_price, order_pay, order_number, pay_status from sp_order where order_price &gt; 100 order by order_number limit 1000;</code></pre><p>这个时候我们可以想一下，MySQL 数据库的底层是怎样进行排序的呢？</p><h3 id="排序原理"><a href="#排序原理" class="headerlink" title="排序原理"></a>排序原理</h3><p>MySQL 数据库在进行排序之前，都会在内存中开辟一段新的内存空间用来进行排序，称：<code>sort_buffer</code>。</p><p>首先 MySQL 数据库会将需要查询的字段（对于上述SQL来说，需要查询的字段是：order_price, order_pay, order_number, pay_status这几个字段）存放于 sort_buffer 内存块中。如果 sort_buffer 的空间（sort_buffer 的空间大小受参数 sort_buffer_size 控制）足够大，MySQL 数据库将会在内存中实现排序，否则将会使用临时文件的方式来承载排序的内容或使用rowid方式进行排序。</p><p>具体如下：</p><p>在 MySQL 数据库中，判断一条 SQL 是否需要排序，我们可以使用 explain 语句来测试，其中 Extra 字段中包含 Using filesort 就代表这条 SQL 需要排序，具体如下：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; explain select order_price, order_pay, order_number, pay_status from sp_order where order_price &gt; 100 order by order_number limit 1000;+----+-------------+----------+------------+------+---------------+------+---------+------+-------+----------+-----------------------------+| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows  | filtered | Extra                       |+----+-------------+----------+------------+------+---------------+------+---------+------+-------+----------+-----------------------------+|  1 | SIMPLE      | sp_order | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 10297 |    33.33 | Using where; Using filesort |+----+-------------+----------+------------+------+---------------+------+---------+------+-------+----------+-----------------------------+1 row in set, 1 warning (0.01 sec)</code></pre><p>我们可以看到，上述的 explain 语句中的 Extra 字段中是包含 Using filesort 的，所以 <code>select order_price, order_pay, order_number, pay_status from sp_order where order_price &gt; 100 order by order_number limit 1000; </code>这条 SQL 在查询的时候是需要再排序的。下面我们就以这条 SQL 为例，来讨论一下 MySQL 数据库是怎样进行排序的</p><h3 id="全字段排序"><a href="#全字段排序" class="headerlink" title="全字段排序"></a>全字段排序</h3><ul><li>第一步：创建 <code>sort buffer</code> 内存空间。</li><li>第二步：首先会根据 <code>WHERE</code> 条件，查询出符合条件的数据（这里指的是 <code>order_price &gt; 100</code> 的所有数据）。</li><li>第三步：在符合条件的数据中，通过主键索引取出需要查询的数据并写入 <code>sort buffer</code> 并排序。</li><li>第四步：通过第三条中取得的数据的主键，再去获取下一条数据的主键，进而获取下一条数据。</li><li>第五步：重复第三和四步，直至取完所有的数据（此时 <code>sort buffer</code> 中只有主键和排序字段并且按照排序字段排好了顺序，如果 <code>sort buffer</code> 空间不足以承载所有的数据时，就需要借助于临时文件进行排序。）。</li><li>第六步：通过排好顺序的数据的主键 id，去取所需要的所有数据。</li><li>第七步：最后将所有排好序的数据返回</li></ul><p>在这个步骤中分为两种情况：</p><ul><li>排序的数据大小超过 <code>sort buffer</code> 的空间大小。</li><li>排序的数据大小未超过 <code>sort buffer</code> 的空间大小。</li></ul><p>我们这个下文着重分析。</p><p>因为上述 SQL 是按照 <code>order_number</code> 字段去排序之后，所得的主键 ID 就变得没有顺序了，这个时候如果通过主键去取数据就会产生很多随机 IO（我们在索引章节讲了，索引实际上就是一个由主键 ID 组成的二叉树，如果主键 ID 是没有顺序的，那么所有的查询都需要从根节点一个一个去匹配，因此产生了很多随机 IO）。</p><p>为了减少排序所产生的随机IO，将需要查询的所有字段全部存放于 <code>sort buffer</code> 中，这样当排序完成之后，数据库不用再次去拿数据，而是直接返回即可，这样就减少了数据库再次取数据的 IO 了。</p><p>但是，随之而来的是，当 <code>sort buffer</code> 的空间无法承载所有的数据的时候，又会造成新的 IO；具体如下：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 设置只在当前客户端有效mysql&gt; SET optimizer_trace='enabled=on';-- 设置sort_buffer_size一个比较小的值，方便测试mysql&gt; set sort_buffer_size=2;-- 执行查询SQLmysql&gt; select order_price, order_pay, order_number, pay_status from sp_order where order_price &gt; 100 order by order_number limit 1000;-- 查看查询信息mysql&gt; SELECT * FROM `information_schema`.`OPTIMIZER_TRACE`;</code></pre><p>我们可以看到的是，出现这种情况的主要原因是当 <code>sort buffer</code> 空间不足以承载需要排序的内容时，MySQL 数据库会采用临时文件来进行辅助排序，但是此次排序会增加新的 <code>磁盘IO</code>，也就是操作临时文件的<code>IO</code>。</p><p>这个时候 MySQL 数据库提供了一个 <code>max_length_for_sort_data</code> 的参数，这个参数主要是用来设置需要排序的每一行的数据最大长度。</p><p>如果需要排序的字段长度没有超过 <code>max_length_for_sort_data</code> 设置的值，那么 MySQL 就会判断需要排序的数据大小；如果没有超过 <code>sort buffer</code> 的空间，则直接在内存中进行排序，如果超过 <code>sort buffer</code> 的空间，则会借助于临时文件（临时表创建的文件）辅助排序。</p><p>如果需要排序的字段长度超过了 <code>max_length_for_sort_data</code> 设置的值，那么 MySQL 就会采用一中新的算法来进行排序，即：rowid。</p><h3 id="ROWID排序"><a href="#ROWID排序" class="headerlink" title="ROWID排序"></a>ROWID排序</h3><p>上面我们介绍到，当需要排序的字段长度超过了 <code>max_length_for_sort_data</code> 设置的值，MySQL 数据库就会采用 rowid 的方式进行排序，在这里我们就来测试一下是否是这样？</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 首先设置 max_length_for_sort_datamysql&gt; SET max_length_for_sort_data = 1;Query OK, 0 rows affected (0.03 sec)-- 执行查询SQLmysql&gt; select order_price, order_pay, order_number, pay_status from sp_order where order_price &gt; 100 order by order_number limit 1000;-- 查看查询信息mysql&gt; SELECT * FROM `information_schema`.`OPTIMIZER_TRACE`;</code></pre><p>我们可以清楚的看到，当我们设置的 <code>max_length_for_sort_data</code> 的值小于需要排序的字段大小时，在排序结果的相关信息中 <code>number_of_tmp_files</code> 的值为0，也就是说未使用任何临时文件。</p><p>但是，此时整个查询流程就有所变化了，具体如下：</p><ul><li>第一步：创建 <code>sort buffer</code> 内存空间。</li><li>第二步：首先会根据 <code>WHERE</code> 条件，查询出符合条件的数据的主键（这里指的是 <code>order_price &gt; 100</code> 的数据行的主键）。</li><li>第三步：在符合条件的数据中，通过主键索引取出id和order_number两个字段的数据写入 <code>sort buffer</code>。</li><li>第四步：通过第三条中取得的数据的主键，再去获取下一条数据的主键，进而获取下一条数据。</li><li>第五步：重复第三和四步，直至取完所有的数据。</li><li>第六步：在 <code>sort buffer</code> 中根据 <code>order_number</code> 进行排序。</li><li>第七步：按照排序好的数据主键ID再去数据表中取相关数据。</li><li>第八步：在排序好的数据中遍历1000行返回。</li></ul><p>我们对比两种排序方式可以看出，rowid的方式在返回数据之前会再去数据表中取一次数据，这无疑是又多了一次磁盘<code>IO</code>，所以我不建议使用这种方式进行排序。</p><p>以上，是关于排序的原理的几种情况，但是也有几种特殊的排序会导致数据库变慢，具体如下。</p><h2 id="有些情况下无法使用索引排序"><a href="#有些情况下无法使用索引排序" class="headerlink" title="有些情况下无法使用索引排序"></a>有些情况下无法使用索引排序</h2><p>MySQL 数据库中，某个字段一旦加上了索引，就意味着底层的数据就是具备某种顺序的；这是因为 MySQL 数据库中的索引通常采用的是 B+ 树算法，而 B+ 树算法底层已经是有序的了，所以不需要再额外地进行排序。具体如下：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 开启optimizer_tracemysql&gt; SET optimizer_trace='enabled=on';-- 执行语句mysql&gt; select * from sp_order order by order_number limit 10;-- 查看optimizer_trace结果mysql&gt; SELECT * FROM `information_schema`.`OPTIMIZER_TRACE`\G</code></pre><p>本次查询直接根据索引查询数据。不过，MySQL 数据库中索引在特殊情况下并不一定能够正常使用，具体如下。</p><ul><li><p>第一种：在多个索引中进行排序时，无法使用索引排序。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 开启optimizer_tracemysql&gt; SET optimizer_trace='enabled=on';-- 添加索引mysql&gt; ALTER TABLE `test01`.`sp_order`    -&gt; ADD INDEX `index_1`(`order_number`),    -&gt; ADD INDEX `index_2`(`order_price`);-- 查询表结构，order_number 和 order_price 是两个相互独立的索引mysql&gt; show create table test01.sp_order\G*************************** 1. row ***************************       Table: sp_orderCreate Table: CREATE TABLE `sp_order` (。。。  KEY `index_1` (`order_number`),  KEY `index_2` (`order_price`)) ENGINE=InnoDB AUTO_INCREMENT=10202 DEFAULT CHARSET=utf8 COMMENT='订单表'1 row in set (0.00 sec)-- 执行语句mysql&gt; select * from sp_order order by order_number,order_price limit 10;-- 查看optimizer_trace结果mysql&gt; SELECT * FROM `information_schema`.`OPTIMIZER_TRACE`\G</code></pre></li></ul><p>我们可以看到参与排序的字段也有两个，而并未显示命中任何索引。</p><ul><li><p>第二种：同时包含升序与降序时，无法使用索引排序。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 开启optimizer_tracemysql&gt; SET optimizer_trace='enabled=on';-- 添加索引mysql&gt; ALTER TABLE `test01`.`sp_order`    -&gt; ADD INDEX `index_4`(`order_price`);Query OK, 0 rows affected (0.09 sec)Records: 0  Duplicates: 0  Warnings: 0-- 查询表结构，order_number 和 order_price 属于一个共同的索引mysql&gt; show create table test01.sp_order\G*************************** 1. row ***************************       Table: sp_orderCreate Table: CREATE TABLE `sp_order` (    。。。  KEY `index_3` (`order_number`,`order_price`)) ENGINE=InnoDB AUTO_INCREMENT=10202 DEFAULT CHARSET=utf8 COMMENT='订单表'1 row in set (0.00 sec)-- 执行语句mysql&gt; select * from sp_order order by order_price ASC,order_number DESC limit 10;-- 查看optimizer_trace结果mysql&gt; SELECT * FROM `information_schema`.`OPTIMIZER_TRACE`\G</code></pre></li></ul><p>我们可以看到参与排序的字段也是两个且也未命中任何索引。</p><p>综上，我们可以得出，要想正常地使用索引排序，进而降低排序造成的延时时，我们要尽量避免在多个索引中进行排序；如果非用不可时，要尽量避免同时包含升序与降序这两种情况。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天我们介绍了 MySQL 数据库排序的底层逻辑。</p><p>其中主要介绍了两种排序算法：</p><ul><li><p>第一种算法是当需要排序的字段长度小于等于</p><pre class="language-none"><code class="language-none">max_length_for_sort_data</code></pre><p>设置的值时，这时 MySQL 排序可以分为两种情况，分别是：</p><ul><li>当排序的数据大小大于 <code>sort buffer</code> 时，MySQL 会借助临时文件辅助排序。</li><li>当排序的数据大小小于等于 <code>sort buffer</code> 时，MySQL 将直接在内存中进行排序（这种是最快的一种排序方式）。</li></ul></li><li><p>第二种算法是当需要排序的字段长度大于 <code>max_length_for_sort_data</code> 设置的值时，这个时候排序会多出来一次磁盘<code>IO</code>的。</p></li></ul><p>另外，还介绍了几种无法使用索引特殊情况，分别是在多个索引中进行排序、排序的顺序与索引的顺序不一致和同时包含升序与降序三种情况。</p><p>在实际的运用中，我建议你合理配置 <code>max_length_for_sort_data</code> 的值，MySQL 5.7默认设置的是1024，这适用于大部分场景，但特殊场景需要特殊对待。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas</title>
      <link href="/2022/09/12/pandas/"/>
      <url>/2022/09/12/pandas/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>数据分析必备</p><span id="more"></span><h3 id="pandas处理缺失数据"><a href="#pandas处理缺失数据" class="headerlink" title="pandas处理缺失数据"></a>pandas处理缺失数据</h3><pre class="language-python" data-language="python"><code class="language-python">dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>    过滤掉值为NaN的行fillna<span class="token punctuation">(</span><span class="token punctuation">)</span>    填充缺失数据isnull<span class="token punctuation">(</span><span class="token punctuation">)</span>    返回布尔数组notnull<span class="token punctuation">(</span><span class="token punctuation">)</span>   返回布尔数组补充对数据进行处理返回一个新的结果，原数据不变，如果想要直接影响原数据需要参数inplace<span class="token operator">=</span>Ture    数组名<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>根据行索引取值数组名<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>根据左侧标签名取值删除操作<span class="token keyword">del</span>时 无法使用上述两个方法</code></pre><h3 id="pandas小例题"><a href="#pandas小例题" class="headerlink" title="pandas小例题"></a>pandas小例题</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1.</span>读取excel文件直接使用pd<span class="token punctuation">.</span>read_xxx<span class="token punctuation">(</span><span class="token string">'文件名'</span><span class="token punctuation">)</span>     前提是notebook和数据源文件在同一级目录，否则使用绝对路径    <span class="token number">2.</span>读取excel文件的指定行数据data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_xxx<span class="token punctuation">(</span><span class="token string">"某招聘网站数据.csv"</span><span class="token punctuation">,</span>nrows <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>    nrows<span class="token operator">=</span><span class="token number">20</span> 代表文件的前<span class="token number">20</span>行    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_xxx<span class="token punctuation">(</span><span class="token string">"某招聘网站数据.csv"</span><span class="token punctuation">,</span>skiprows <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    skiprows  代表跳过文件的指定行        <span class="token number">3.</span>读取当前目录下 某招聘网站数据<span class="token punctuation">.</span>csv 文件的 positionId、positionName、salary 列data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"某招聘网站数据.csv"</span><span class="token punctuation">,</span>usecols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'positionId'</span><span class="token punctuation">,</span><span class="token string">'positionName'</span><span class="token punctuation">,</span><span class="token string">'salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token number">4.</span>读取当前目录下 某招聘网站数据<span class="token punctuation">.</span>csv 文件，并在读取时将 positionId 设置为索引列data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'某招聘网站数据.csv'</span><span class="token punctuation">,</span>index_col<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'positionId'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token number">5.</span>读取当前目录下 某招聘网站数据<span class="token punctuation">.</span>csv 文件的 positionId、positionName、salary 列，并将标题设置为 ID、岗位名称、薪资data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'某招聘网站数据.csv'</span><span class="token punctuation">,</span> usecols<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span>header <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">,</span><span class="token string">'岗位名称'</span><span class="token punctuation">,</span><span class="token string">'薪资'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token number">6.</span>读取当前目录下 某招聘网站数据<span class="token punctuation">.</span>csv 文件，并不将缺失值标记为 NAdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'某招聘网站数据.csv'</span><span class="token punctuation">,</span> keep_default_na<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token number">7.</span>读取当前目录下 某招聘网站数据<span class="token punctuation">.</span>csv 文件，并将<span class="token punctuation">[</span><span class="token punctuation">]</span>标记为缺失值data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'某招聘网站数据.csv'</span><span class="token punctuation">,</span>na_values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'[]'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token number">8.</span>读取当前目录下 某招聘网站数据<span class="token punctuation">.</span>csv 文件，但不处理缺失值data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"某招聘网站数据.csv"</span><span class="token punctuation">,</span>na_filter<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token number">9.</span>读取当前目录下 某招聘网站数据<span class="token punctuation">.</span>csv 文件，并将 positionId<span class="token punctuation">,</span>companyId 设置为字符串格式data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"某招聘网站数据.csv"</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'positionId'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span><span class="token string">'companyId'</span><span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre><h3 id="pandas文本文件读取"><a href="#pandas文本文件读取" class="headerlink" title="pandas文本文件读取"></a>pandas文本文件读取</h3><pre class="language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>read_xxx<span class="token punctuation">(</span>filepath_or_buffer<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token string">'infer'</span><span class="token punctuation">,</span>names<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>usecols<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>skiprows<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>skipfooter<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>converters<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 参数说明</span>filepath_or_buffer：指定txt文件或csv文件所在的具体路径sep：指定原数据集中各字段的分隔符，默认为<span class="token string">'，'</span>header：是否需要将原数据集中的第一行作为表头，默认将第一行用作字段名称        如果原数据没有表头，需要将该参数设置为<span class="token boolean">None</span>names：如果原数据集中没有字段，可以通过该参数在数据读取时给数据框添加具体的表头usecols：指定需要读取原数据中的哪些变量名skiprows：数据读取时，指定需要跳过原数据集中开头的行数          有些表格开头是有几行文字说明的，读取时需要跳过skipfooter：数据读取时，指定需要跳过原数据集中的末尾行数converters：用于数据类型的转换<span class="token punctuation">(</span>以字典的形式指定<span class="token punctuation">)</span>encoding：若文件有中文，指定编码</code></pre><h3 id="pandas-Excel文件读取"><a href="#pandas-Excel文件读取" class="headerlink" title="pandas Excel文件读取"></a>pandas Excel文件读取</h3><pre class="language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>read_execl<span class="token punctuation">(</span>io<span class="token punctuation">,</span>sheetname<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>skiprows<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>skip_footer<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>index_col<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>names<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>na_values<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>thousands<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>convert_float<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 参数说明</span>io：指定电子表格的具体路径sheetname：指定需要读取电子表格中的第几个sheet，既可以传递整数也可以传递具体的sheet名称header：是否需要将数据集的第一行用作表头，默认为是需要的skiprows：读取数据时，指定跳过的开始行数skip_footer：读取数据时，指定跳过的末尾行数index_col：指定哪些列用作数据框的行索引<span class="token punctuation">(</span>标签<span class="token punctuation">)</span>na_values：指定原始数据集中哪些特殊值代表了缺失值thousands：指定原始数据集中的千分位符convert_float：默认将所有的数值型字段转换为浮点型字段converters：通过字典的形式，指定某些列需要转换的形式 <span class="token punctuation">{</span><span class="token string">'序号'</span><span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">}</span></code></pre><h3 id="pandas读取MySQL数据"><a href="#pandas读取MySQL数据" class="headerlink" title="pandas读取MySQL数据"></a>pandas读取MySQL数据</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqlconn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>    port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>    user<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>    password<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>    db<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>    charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">,</span>    autocommit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>res <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token string">'select * from user'</span><span class="token punctuation">,</span>con<span class="token operator">=</span>conn<span class="token punctuation">)</span></code></pre><h3 id="pandas常用方法"><a href="#pandas常用方法" class="headerlink" title="pandas常用方法"></a>pandas常用方法</h3><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>index  读索引df<span class="token punctuation">.</span>columns  读列字段df<span class="token punctuation">.</span>values  获取数据df<span class="token punctuation">.</span>shape   获取表格的行数与列数，结果是元祖df。dtypes  获取列字段名称存储的数据类型df<span class="token punctuation">.</span>describe  统计描述默认只会统计数字类型的数据，非数字类型统计需要加参数include    sec_buildings<span class="token punctuation">.</span>describe<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>  取头部多条数据，默认读取<span class="token number">5</span>条df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span>  取尾部多条数据，默认读取<span class="token number">5</span>条<span class="token triple-quoted-string string">'''在Dataframe中  字符串类型统一都叫做object'''</span></code></pre><h3 id="pandas行列操作"><a href="#pandas行列操作" class="headerlink" title="pandas行列操作"></a>pandas行列操作</h3><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'旧列名称'</span><span class="token punctuation">:</span><span class="token string">'薪列名称'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  修改列名称  inplace<span class="token operator">=</span><span class="token boolean">True</span>修改原数据添加列字段df<span class="token punctuation">[</span><span class="token string">'列字段名'</span><span class="token punctuation">]</span><span class="token operator">=</span>’字段所属内容‘   有则获取字段数据，无则添加自定义插入位置df<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'新列名称'</span><span class="token punctuation">,</span><span class="token string">'新列数据'</span><span class="token punctuation">)</span>  <span class="token number">3</span> 要插入的索引位置删除列字段df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">'字段名'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>添加行df<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df1<span class="token punctuation">)</span>获取多列数据df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>过滤数据 返回布尔值df<span class="token punctuation">[</span><span class="token string">'字段名'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'过滤的条件'</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'字段名'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'过滤的条件'</span><span class="token punctuation">]</span>  布尔选择器多个条件<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'字段名'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'过滤的条件'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'字段名'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'过滤的条件'</span><span class="token punctuation">)</span>获取品牌是众泰并且Dischange是国<span class="token number">4</span>的数据的品牌、name、New_pricedf<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Dischange'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'国4'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'品牌'</span><span class="token punctuation">]</span><span class="token operator">==</span> <span class="token string">'众泰'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'品牌'</span><span class="token punctuation">,</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'New_price'</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy</title>
      <link href="/2022/09/09/numpy/"/>
      <url>/2022/09/09/numpy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>数据分析必备</p><span id="more"></span><h3 id="numpy创建数组的概念"><a href="#numpy创建数组的概念" class="headerlink" title="numpy创建数组的概念"></a>numpy创建数组的概念</h3><pre class="language-python" data-language="python"><code class="language-python">创建数组的语法结构np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>列表，元祖<span class="token punctuation">)</span>    一维数组    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    二维数组    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    三维数组<span class="token punctuation">(</span>很少使用<span class="token punctuation">)</span>    再嵌套一个        np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        元祖形式同上  总结：numpy中很多数学操作都需要依赖于数组对象                    针对numpy数组中的元素    <span class="token number">1.</span>数组内的元素必须是同一类型（若定义时出现类型错乱，内部也会自动统一）</code></pre><h3 id="numpy中的数据类型"><a href="#numpy中的数据类型" class="headerlink" title="numpy中的数据类型"></a>numpy中的数据类型</h3><pre class="language-python" data-language="python"><code class="language-python">由于numpy主要是进行数据计算，所以numpy数据类型为数字类型为主<span class="token triple-quoted-string string">"""为了不和python中数据类型关键字冲突   numpy在所有冲突的关键字后加下划线区分"""</span><span class="token number">1.</span>布尔型：bool_<span class="token number">2.</span>整型：int_<span class="token punctuation">,</span>int32，int64无符号整型：unint8，unint16，unint32，unint64<span class="token number">3.</span>复数型：complex_<span class="token punctuation">,</span>complex32，complex64<span class="token number">4.</span>浮点型：float_<span class="token punctuation">,</span>float32，float64针对数字类型后面的数字    int32只能表示（<span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span>），因为他只有<span class="token number">32</span>个位，只能表示<span class="token number">2</span><span class="token operator">**</span><span class="token number">32</span>个数，int64同理</code></pre><h3 id="numpy常用属性"><a href="#numpy常用属性" class="headerlink" title="numpy常用属性"></a>numpy常用属性</h3><pre class="language-python" data-language="python"><code class="language-python">T：转置（行列互换）dtype：类似于python中的<span class="token builtin">type</span>，用于查看数据类型size：统计数组内元素的个数ndim：数组的维数shape：获取数组的行、列数reshape：修改数组行、列数</code></pre><h3 id="numpy常用方法"><a href="#numpy常用方法" class="headerlink" title="numpy常用方法"></a>numpy常用方法</h3><pre class="language-python" data-language="python"><code class="language-python">固定格式：np<span class="token punctuation">.</span>常见方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">)</span> 创建数组<span class="token number">2</span><span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token punctuation">)</span> 和<span class="token builtin">range</span>使用方法一致，第三个参数为步长<span class="token number">3</span><span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token punctuation">)</span> 和arange使用方法一致<span class="token punctuation">,</span>区别在于arange顾头不顾尾，                    linspace顾头也顾尾<span class="token number">4</span><span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   创建一个全为<span class="token number">0</span>的 <span class="token number">3</span>行<span class="token number">4</span>列数组<span class="token number">5</span><span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  创建一个全为<span class="token number">0</span>的 <span class="token number">3</span>行<span class="token number">4</span>列数组<span class="token number">6</span><span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>数组<span class="token number">1</span>，数组<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  竖向拼接两个数组<span class="token number">7</span><span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>数组<span class="token number">1</span>，数组<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  水平拼接两个数组<span class="token number">8</span><span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       读取矩阵的长度 <span class="token number">0</span>代表第一维度<span class="token number">9</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>t<span class="token punctuation">.</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> 获取最大值的位置<span class="token number">10</span><span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>t<span class="token punctuation">.</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> 获取最小值的位置<span class="token number">11</span><span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>           创建一个对角线位<span class="token number">1</span>的正方形数组<span class="token number">12</span><span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   根据指定形状和dtype创建空数组（随机值）</code></pre><h3 id="numpy的索引与切片"><a href="#numpy的索引与切片" class="headerlink" title="numpy的索引与切片"></a>numpy的索引与切片</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1.</span>针对一维数组，索引与切片的使用方式与python中的列表一致<span class="token number">2.</span>针对多维数组，有行索引和列索引  res<span class="token operator">=</span><span class="token punctuation">[</span>行索引，列索引<span class="token punctuation">]</span>  res<span class="token operator">=</span><span class="token punctuation">[</span>行索引，<span class="token punctuation">:</span><span class="token punctuation">]</span>  ：代表所有</code></pre><h3 id="numpy的运算符"><a href="#numpy的运算符" class="headerlink" title="numpy的运算符"></a>numpy的运算符</h3><pre class="language-python" data-language="python"><code class="language-python">比较运算符<span class="token operator">&gt;</span>    等价于np<span class="token punctuation">.</span>greater<span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span>    判断arr1的元素是否大于arr2的元素<span class="token operator">&gt;=</span>    等价于np<span class="token punctuation">.</span>greater_equal<span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span>    判断arr1的元素是否大于等于arr2的元素<span class="token operator">&lt;</span>    等价于np<span class="token punctuation">.</span>less<span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span>    判断arr1的元素是否小于arr2的元素<span class="token operator">&lt;=</span>    等价于np<span class="token punctuation">.</span>less_equal<span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span>    判断arr1的元素是否小于等于arr2的元素<span class="token operator">==</span>    等价于np<span class="token punctuation">.</span>equal<span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span>    判断arr1的元素是否等于arr2的元素<span class="token operator">!=</span>    等价于np<span class="token punctuation">.</span>not_equal<span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span>    判断arr1的元素是否不等于arr2的元素</code></pre><h3 id="numpy常用函数"><a href="#numpy常用函数" class="headerlink" title="numpy常用函数"></a>numpy常用函数</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 基本函数</span>np<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>decimals<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> 对各元素四舍五入，decimals代表指定小数点之后的位数np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>计算各元素的算术平方根np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>计算各元素的平方值np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>计算以e为底数的指数np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>a<span class="token punctuation">)</span>计算各元素的指数np<span class="token punctuation">.</span>log2<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>计算以<span class="token number">2</span>为底各元素的对数np<span class="token punctuation">.</span>log10<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>计算以<span class="token number">10</span>为底各元素的对数np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>计算以e为底各元素的对数<span class="token comment"># 必会常用统计函数</span><span class="token triple-quoted-string string">"""其中参数axis用来控制行列axis=1 代表行axis=0 代表列"""</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>axis<span class="token punctuation">)</span>按照轴的方向计算最小值np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>axis<span class="token punctuation">)</span>按照轴的方向计算最大值</code></pre><h3 id="numpy随机数子模块"><a href="#numpy随机数子模块" class="headerlink" title="numpy随机数子模块"></a>numpy随机数子模块</h3><pre class="language-python" data-language="python"><code class="language-python">numpy中的random子模块np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand   给定形状产生随即数组（<span class="token number">0</span>到<span class="token number">1</span>之间的约数）<span class="token punctuation">.</span>randint         给定形状产生随机整数<span class="token punctuation">.</span>choice          给定形状产生随机选择<span class="token punctuation">.</span>shuffle         将序列的所有元素随机排序<span class="token punctuation">.</span>uniform         给定形状产生随即数组（随机均匀分布）<span class="token punctuation">.</span>normal          随机正态分布</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django实现websocket</title>
      <link href="/2022/07/07/Django%E5%AE%9E%E7%8E%B0websocket/"/>
      <url>/2022/07/07/Django%E5%AE%9E%E7%8E%B0websocket/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Django实现websocket</p><span id="more"></span><h3 id="Django实现websocket完成实时通讯，聊天室，在线客服等"><a href="#Django实现websocket完成实时通讯，聊天室，在线客服等" class="headerlink" title="Django实现websocket完成实时通讯，聊天室，在线客服等"></a>Django实现websocket完成实时通讯，聊天室，在线客服等</h3><h4 id="一-什么是Websocket"><a href="#一-什么是Websocket" class="headerlink" title="一 什么是Websocket"></a>一 什么是Websocket</h4><p>WebSocket是一种在单个TCP连接上进行全双工通信的协议</p><p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输</p><p>现在，很多网站为了实现推送技术，所用的技术都是轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。<br>而比较新的技术去做轮询的效果是Comet。这种技术虽然可以双向通信，但依然需要反复发出请求。而且在Comet中，普遍采用的长链接，也会消耗服务器资源。<br>在这种情况下，HTML5定义了WebSocket协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯</p><h4 id="二-Django实现Websocket"><a href="#二-Django实现Websocket" class="headerlink" title="二 Django实现Websocket"></a>二 Django实现Websocket</h4><p>django实现websocket大致上有两种方式，一种channels，一种是dwebsocket。channels依赖于redis，twisted等，相比之下使用dwebsocket要更为方便一些</p><h4 id="三-dwebsocket安装"><a href="#三-dwebsocket安装" class="headerlink" title="三 dwebsocket安装"></a>三 dwebsocket安装</h4><p>pip3 install dwebsocket</p><h4 id="四-dwebsocket配置"><a href="#四-dwebsocket配置" class="headerlink" title="四 dwebsocket配置"></a>四 dwebsocket配置</h4><p>INSTALLED_APPS = [<br>    …..<br>    …..<br>    ‘dwebsocket’,<br>]</p><p>MIDDLEWARE_CLASSES = [<br>    ……<br>    ……<br>    ‘dwebsocket.middleware.WebSocketMiddleware’  # 为所有的URL提供websocket，如果只是单独的视图需要可以不选</p><p>]<br>WEBSOCKET_ACCEPT_ALL=True   # 可以允许每一个单独的视图实用websockets</p><h4 id="五-使用"><a href="#五-使用" class="headerlink" title="五 使用"></a>五 使用</h4><p>html代码：<br>    <br>    <br>    <br>        <meta charset="UTF-8"><br>        <title>Title</title><br>    <br>    </p><pre><code>&lt;button onclick="WebSocketTest()"&gt;test&lt;/button&gt;&lt;/body&gt;&lt;script&gt;    function WebSocketTest() {        alert(1)        if ("WebSocket" in window) {            alert("您的浏览器支持 WebSocket!");            // 打开一个 web socket            ws = new WebSocket("ws://127.0.0.1:8000/path/");            ws.onopen = function () {                // Web Socket 已连接上，使用 send() 方法发送数据                ws.send("发送数据");                alert("数据发送中...");            };            ws.onmessage = function (evt) {                var received_msg = evt.data;                alert("数据已接收...");                alert("数据:" + received_msg)            };            ws.onclose = function () {                // 关闭 websocket                alert("连接已关闭...");            };        }        else {            // 浏览器不支持 WebSocket            alert("您的浏览器不支持 WebSocket!");        }    }&lt;/script&gt;&lt;/html&gt;</code></pre><p>View Code<br>views视图层：<br>    from django.shortcuts import render,HttpResponse</p><pre><code># Create your views here.def login(request):    return render(request,'login.html')from dwebsocket.decorators import accept_websocket@accept_websocketdef path(request):    if request.is_websocket():        print(1)        request.websocket.send('下载完成'.encode('utf-8'))</code></pre><p>View Code<br>路由层：<br>    from django.conf.urls import url<br>    from django.contrib import admin<br>    from app01 import views<br>    urlpatterns = [<br>        url(r’^admin/‘, admin.site.urls),<br>        url(r’^login/‘, views.login),<br>        url(r’^path/‘, views.path),<br>    ]</p><p>View Code</p><h4 id="六-详解"><a href="#六-详解" class="headerlink" title="六 详解"></a>六 详解</h4><p>dwebsocket有两种装饰器：require_websocket和accept_websocekt，使用require_websocket装饰器会导致视图函数无法接收导致正常的http请求，一般情况使用accept_websocket方式就可以了，</p><p>dwebsocket的一些内置方法：</p><p>request.is_websocket（）：判断请求是否是websocket方式，是返回true，否则返回false<br>request.websocket： 当请求为websocket的时候，会在request中增加一个websocket属性，<br>WebSocket.wait（） 返回客户端发送的一条消息，没有收到消息则会导致阻塞<br>WebSocket.read（） 和wait一样可以接受返回的消息，只是这种是非阻塞的，没有消息返回None<br>WebSocket.count_messages（）返回消息的数量<br>WebSocket.has_messages（）返回是否有新的消息过来<br>WebSocket.send（message）像客户端发送消息，message为byte类型</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django实现websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常见场景解析</title>
      <link href="/2022/07/07/%E5%B8%B8%E8%A7%81redis%E5%9C%BA%E6%99%AF/"/>
      <url>/2022/07/07/%E5%B8%B8%E8%A7%81redis%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Redis常见场景</p><span id="more"></span><h3 id="Redis常见场景解析"><a href="#Redis常见场景解析" class="headerlink" title="Redis常见场景解析"></a>Redis常见场景解析</h3><p><strong>一 前言</strong><br>Redis是一个key-value存储系统，现在在各种系统中的使用越来越多，大部分情况下是因为其高性能的特性，被当做缓存使用，这里介绍下Redis经常遇到的使用场景。</p><p><strong>二 Redis特性</strong><br>一个产品的使用场景肯定是需要根据产品的特性，先列举一下Redis的特点：</p><p>读写性能优异<br>持久化<br>数据类型丰富<br>单线程<br>数据自动过期<br>发布订阅<br>分布式<br>这里我们通过几个场景，不同维度说下Redis的应用</p><p><strong>三 应用场景</strong><br>高性能适合当做缓存<br>缓存是Redis最常见的应用场景，之所有这么使用，主要是因为Redis读写性能优异。而且逐渐有取代memcached，成为首选服务端缓存的组件。而且，Redis内部是支持事务的，在使用时候能有效保证数据的一致性。 作为缓存使用时，一般有两种方式保存数据：</p><p>1、读取前，先去读Redis，如果没有数据，读取数据库，将数据拉入Redis。<br>2、插入数据时，同时写入Redis。<br>方案一：实施起来简单，但是有两个需要注意的地方：<br>1、避免缓存击穿。（数据库没有就需要命中的数据，导致Redis一直没有数据，而一直命中数据库。）<br>2、数据的实时性相对会差一点。</p><p>方案二：数据实时性强，但是开发时不便于统一处理。 。</p><p>当然，两种方式根据实际情况来适用。如：方案一适用于对于数据实时性要求不是特别高的场景。方案二适用于字典表、数据量不大的数据存储。</p><p>丰富的数据格式性能更高，应用场景丰富<br>Redis相比其他缓存，有一个非常大的优势，就是支持多种数据类型。</p><p>数据类型说明string字符串，最简单的k-v存储hashhash格式，value为field和value，适合ID-Detail这样的场景。list简单的list，顺序列表，支持首位或者末尾插入数据set无序list，查找速度快，适合交集、并集、差集处理sorted set有序的set</p><p>其实，通过上面的数据类型的特性，基本就能想到合适的应用场景了。</p><p>string——适合最简单的k-v存储，类似于memcached的存储结构，短信验证码，配置信息等，就用这种类型来存储。<br>hash——一般key为ID或者唯一标示，value对应的就是详情了。如商品详情，个人信息详情，新闻详情等。<br>list——因为list是有序的，比较适合存储一些有序且数据相对固定的数据。如省市区表、字典表等。因为list是有序的，适合根据写入的时间来排序，如：最新的***，消息队列等。<br>set——可以简单的理解为ID-List的模式，如微博中一个人有哪些好友，set最牛的地方在于，可以对两个set提供交集、并集、差集操作。例如：查找两个人共同的好友等。<br>Sorted Set——是set的增强版本，增加了一个score参数，自动会根据score的值进行排序。比较适合类似于top 10等不根据插入的时间来排序的数据。<br>如上所述，虽然Redis不像关系数据库那么复杂的数据结构，但是，也能适合很多场景，比一般的缓存数据结构要多。了解每种数据结构适合的业务场景，不仅有利于提升开发效率，也能有效利用Redis的性能。</p><p>单线程可以作为分布式锁<br>谈到Redis和Memcached 的区别，大家更多的是谈到数据结构和持久化这两个特性，其实还有一个比较大的区别就是：</p><p>Redis 是单线程，多路复用方式提高处理效率。<br>Memcached 是多线程的，通过CPU线程切换来提高处理效率。<br>所以Redis单线程的这个特性，其实也是很重要的应用场景，最常用的就是分布式锁。<br>应对高并发的系统，都是用多服务器部署，每个技术框架针对数据锁都有很好的处理方式，如 .net 的lock,java 的synchronized,都能通过锁住某个对象来应对线程导致的数据污染问题。但是毕竟，只能控制本服务器的线程，分布式部署以后数据污染问题，就比较难处理了。Redis的单线程这个特性，就非常符合这个需求，伪代码如下</p><p>//产生锁<br>while lock!=1<br>    //过期时间是为了避免死锁<br>    now = int(time.time())<br>    lock_timeout = now + LOCK_TIMEOUT + 1<br>    lock = redis_client.setnx(lock_key, lock_timeout)</p><p>//真正要处理的业务<br>doing() </p><p>//释放锁<br>now = int(time.time())<br>    if now &lt; lock_timeout:<br>        redis_client.delete(lock_key)</p><p>以上是一个只说明流程的伪代码，其实整体的逻辑是很简单的，只要考虑到死锁时的情况，就比较好处理了。Redis作为分布式锁，因为其性能的优势，不会成为瓶颈，一般会产生瓶颈的是真正的业务处理内容，还是尽量缩小锁的范围来确保系统性能。</p><p>自动过期能有效提升开发效率<br>Redis针对数据都可以设置过期时间，这个特点也是大家应用比较多的，过期的数据清理无需使用方去关注，所以开发效率也比较高，当然，性能也比较高。最常见的就是：短信验证码、具有时间性的商品展示等。无需像数据库还要去查时间进行对比。因为使用比较简单，就不赘述了。</p><p>分布式和持久化有效应对海量数据和高并发<br>Redis初期的版本官方只是支持单机或者简单的主从，大多应用则都是自己去开发集群的中间件，但是随着应用越来越广泛，用户关于分布式的呼声越来越高，所以Redis 3.0版本时候官方加入了分布式的支持，主要是两个方面：</p><p>Redis服务器主从热备，确保系统稳定性<br>Redis分片应对海量数据和高并发<br>而且Redis虽然是一个内存缓存，数据存在内存，但是Redis支持多种方式将数据持久化，写入硬盘，所有，Redis数据的稳定性也是非常有保障的，结合Redis的集群方案，有的系统已经将Redis当做一种NoSql数据存储来适用。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>52条SQL优化规则</title>
      <link href="/2022/06/26/52%E6%9D%A1SQL%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%99/"/>
      <url>/2022/06/26/52%E6%9D%A1SQL%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>SQL优化规则</p><span id="more"></span><h3 id="52条SQL优化规则"><a href="#52条SQL优化规则" class="headerlink" title="52条SQL优化规则"></a>52条SQL优化规则</h3><p>1、对查询进行优化，应尽量<code>避免全表扫描</code>，首先应考虑在 <code>WHERE</code> 及 ORDER BY 涉及的列上<code>建立索引</code>。</p><p>2、应尽量避免在 <code>WHERE</code> 子句中对字段进行 <code>NULL</code> 值判断，创建表时 <code>NULL</code> 是默认值，但大多数时候应该使用 <code>NOT NULL</code>，或者使用一个<code>特殊的值</code>，如 0，-1 作为默认值。</p><p>3、应尽量避免在 <code>WHERE </code>子句中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符。MySQL 只有对以下操作符才使用索引：<code>&lt;</code>，<code>&lt;=</code>，<code>=</code>，<code>&gt;</code>，<code>&gt;=</code>，<code>BETWEEN</code>，<code>IN</code>，以及某些时候的 <code>LIKE</code>。</p><p>4、应尽量避免在 WHERE 子句中使用 <code>OR</code> 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，可以使用 <code>UNION</code> 合并查询：<code>select id from t where num=10 union all select id from t where num=20</code>。</p><p>5、<code>IN</code> 和 <code>NOT IN</code> 也要慎用，否则会导致全表扫描。对于<code>连续的数值</code>，能用 <code>BETWEEN</code> 就不要用 <code>IN</code>：<code>select id from t where num between 1 and 3</code>。</p><p>6、下面的查询也将导致全表扫描：<code>select id from t where name like'%abc%'</code> 或者<code>select id from t where name like'%abc'</code>若要提高效率，可以考虑全文检索。而<code>select id from t where name like'abc%'</code>才用到索引。</p><p>7、如果在 <code>WHERE</code> 子句中使用参数，也会导致全表扫描。</p><p>8、应尽量避免在 <code>WHERE</code> 子句中对字段进行表达式操作，应尽量<code>避免在 WHERE 子句中对字段进行函数操作</code>。</p><p>9、很多时候<code>用 EXISTS 代替 IN </code>是一个好的选择：<code>select num from a where num in(select num from b)</code>。用下面的语句替换：<code>select num from a where exists(select 1 from b where num=a.num)</code>。</p><p>10、<code>索引</code>固然可以提高相应的 SELECT 的效率，但同时也<code>降低了 INSERT 及 UPDATE 的效率</code>。因为<code> INSERT</code> 或 <code>UPDATE</code> 时有可能会<code>重建索引</code>，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的<code>索引数最好不要超过 6 个</code>，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p><p>11、应尽可能的避免更新 clustered 索引数据列， 因为 <code>clustered 索引数据列的顺序就是表记录的物理存储顺序</code>，一旦该列值改变将导致整个表记录的顺序的调整，会<code>耗费相当大的资源</code>。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p><p>12、<code>尽量使用数字型字段</code>，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。</p><p>13、尽可能的使用 <code>varchar/nvarchar</code> 代替 <code>char/nchar </code>。因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p>14、最好不要使用返回所有：<code>select * from t </code>，用<code>具体的字段</code>列表代替 <code>*</code>，不要返回用不到的任何字段。</p><p>15、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><p>16、使用表的<code>别名（Alias）</code>：当在 SQL 语句中连接多个表时，请使用表的别名并把别名前缀于每个 Column 上。这样一来，就可以减少解析的时间并减少那些由 Column 歧义引起的语法错误。</p><p>17、使用“<code>临时表</code>”暂存中间结果 ：</p><p>简化 SQL 语句的重要方法就是采用临时表暂存中间结果。但是临时表的好处远远不止这些，将临时结果暂存在临时表，后面的查询就在 tempdb 中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。</p><p>18、一些 SQL 查询语句应加上 nolock，读、写是会相互阻塞的，为了提高并发性能。对于一些查询，可以加上 nolock，这样读的时候可以允许写，但缺点是可能读到未提交的脏数据。</p><p>使用 nolock 有3条原则：</p><ul><li>查询的结果用于“插、删、改”的不能加 nolock；</li><li>查询的表属于频繁发生页分裂的，慎用 nolock ；</li><li>使用临时表一样可以保存“数据前影”，起到类似 Oracle 的 undo 表空间的功能，能采用临时表提高并发性能的，不要用 nolock。</li></ul><p>19、常见的简化规则如下：</p><p>不要有超过 5 个以上的表连接（JOIN），考虑使用临时表或表变量存放中间结果。少用子查询，视图嵌套不要过深，一般视图嵌套不要超过 2 个为宜。</p><p>20、将需要查询的结果预先计算好放在表中，查询的时候再Select。这在SQL7.0以前是最重要的手段，例如医院的住院费计算。</p><p>21、用 OR 的字句可以分解成多个查询，并且通过 UNION 连接多个查询。他们的速度只同是否使用索引有关，如果查询需要用到联合索引，用 UNION all 执行的效率更高。多个 OR 的字句没有用到索引，改写成 UNION 的形式再试图与索引匹配。一个关键的问题是否用到索引。</p><p>22、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数。</p><p>23、尽量将数据的处理工作放在服务器上，减少网络的开销，如使用存储过程。</p><p>存储过程是编译好、优化过、并且被组织到一个执行规划里、且存储在数据库中的 SQL 语句，是控制流语言的集合，速度当然快。反复执行的动态 SQL，可以使用临时存储过程，该过程（临时表）被放在 Tempdb 中。</p><p>24、当服务器的内存够多时，配制线程数量 = 最大连接数+5，这样能发挥最大的效率；否则使用配制线程数量&lt; 最大连接数，启用 SQL SERVER 的线程池来解决，如果还是数量 = 最大连接数+5，严重的损害服务器的性能。</p><p>25、查询的关联同写的顺序 ：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select a.personMemberID, * from chineseresume a,personmember b where personMemberID = b.referenceid and a.personMemberID = 'JCNPRH39681' （A = B, B = '号码'） select a.personMemberID, * from chineseresume a,personmember b where a.personMemberID = b.referenceid and a.personMemberID = 'JCNPRH39681' and b.referenceid = 'JCNPRH39681' （A = B, B = '号码', A = '号码'） select a.personMemberID, * from chineseresume a,personmember b where b.referenceid = 'JCNPRH39681' and a.personMemberID = 'JCNPRH39681' （B = '号码', A = '号码'）</code></pre><p><strong>Mysql</strong></p><p>26、尽量使用 EXISTS 代替 select count(1) 来判断是否存在记录。count 函数只有在统计表中所有行数时使用，而且 count(1) 比 count(*) 更有效率。</p><p>27、尽量使用 “&gt;=”，不要使用 “&gt;”。</p><p>28、索引的使用规范：</p><ul><li>索引的创建要与应用结合考虑，建议大的 OLTP 表不要超过 6 个索引；</li><li>尽可能的使用索引字段作为查询条件，尤其是聚簇索引，必要时可以通过 index index_name 来强制指定索引；</li><li>避免对大表查询时进行 table scan，必要时考虑新建索引；</li><li>在使用索引字段作为条件时，如果该索引是联合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用；</li><li>要注意索引的维护，周期性重建索引，重新编译存储过程。</li></ul><p>29、下列 SQL 条件语句中的列都建有恰当的索引，但执行速度却非常慢：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM record WHERE substrINg(card_no, 1, 4) = '5378' --13秒 SELECT * FROM record WHERE amount/30 &lt; 1000 --11秒 SELECT * FROM record WHERE convert(char(10), date, 112) = '19991201' --10秒</code></pre><p><strong>Mysql</strong></p><p>分析：</p><p>WHERE 子句中对列的任何操作结果都是在 SQL 运行时逐列计算得到的，因此它不得不进行表搜索，而没有使用该列上面的索引。</p><p>如果这些结果在查询编译时就能得到，那么就可以被 SQL 优化器优化，使用索引，避免表搜索，因此将 SQL 重写成下面这样：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM record WHERE card_no like '5378%' -- &lt; 1秒 SELECT * FROM record WHERE amount &lt; 1000*30 -- &lt; 1秒 SELECT * FROM record WHERE date = '1999/12/01' -- &lt; 1秒</code></pre><p><strong>Mysql</strong></p><p>30、当有一批处理的插入或更新时，用批量插入或批量更新，绝不会一条条记录的去更新。</p><p>31、在所有的存储过程中，能够用 SQL 语句的，我绝不会用循环去实现。</p><p>32、选择最有效率的表名顺序（只在基于规则的优化器中有效）：</p><p>Oracle 的解析器按照从右到左的顺序处理 FROM 子句中的表名，FROM 子句中写在最后的表（基础表 driving table）将被最先处理，在 FROM 子句中包含多个表的情况下，你必须选择记录条数最少的表作为基础表。</p><p>如果有 3 个以上的表连接查询，那就需要选择交叉表（intersection table）作为基础表，交叉表是指那个被其他表所引用的表。</p><p>33、提高 GROUP BY 语句的效率，可以通过将不需要的记录在 GROUP BY 之前过滤掉。下面两个查询返回相同结果，但第二个明显就快了许多。</p><p>低效：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT JOB, AVG(SAL) FROM EMP GROUP BY JOB HAVING JOB = 'PRESIDENT' OR JOB = 'MANAGER' </code></pre><p><strong>Mysql</strong></p><p>高效：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT JOB, AVG(SAL) FROM EMPWHERE JOB = 'PRESIDENT' OR JOB = 'MANAGER' GROUP BY JOB</code></pre><p><strong>Mysql</strong></p><p>34、SQL 语句用大写，因为 Oracle 总是先解析 SQL 语句，把小写的字母转换成大写的再执行。</p><p>35、别名的使用，别名是大型数据库的应用技巧，就是表名、列名在查询中以一个字母为别名，查询速度要比建连接表快 1.5 倍。</p><p>36、避免死锁，在你的存储过程和触发器中访问同一个表时总是以相同的顺序；事务应经可能地缩短，在一个事务中应尽可能减少涉及到的数据量；永远不要在事务中等待用户输入。</p><p>37、避免使用临时表，除非却有需要，否则应尽量避免使用临时表，相反，可以使用表变量代替。大多数时候（99%），表变量驻扎在内存中，因此速度比临时表更快，临时表驻扎在 TempDb 数据库中，因此临时表上的操作需要跨数据库通信，速度自然慢。</p><p>38、最好不要使用触发器：</p><ul><li>触发一个触发器，执行一个触发器事件本身就是一个耗费资源的过程；</li><li>如果能够使用约束实现的，尽量不要使用触发器；</li><li>不要为不同的触发事件（Insert、Update 和 Delete）使用相同的触发器；</li><li>不要在触发器中使用事务型代码。</li></ul><p>39、索引创建规则：</p><ul><li>表的主键、外键必须有索引；</li><li>数据量超过 300 的表应该有索引；</li><li>经常与其他表进行连接的表，在连接字段上应该建立索引；</li><li>经常出现在 WHERE 子句中的字段，特别是大表的字段，应该建立索引；</li><li>索引应该建在选择性高的字段上；</li><li>索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；</li><li>复合索引的建立需要进行仔细分析，尽量考虑用单字段索引代替；</li><li>正确选择复合索引中的主列字段，一般是选择性较好的字段；</li><li>复合索引的几个字段是否经常同时以 AND 方式出现在 WHERE子句中？单字段查询是否极少甚至没有？如果是，则可以建立复合索引；否则考虑单字段索引；</li><li>如果复合索引中包含的字段经常单独出现在 WHERE 子句中，则分解为多个单字段索引；</li><li>如果复合索引所包含的字段超过 3 个，那么仔细考虑其必要性，考虑减少复合的字段；</li><li>如果既有单字段索引，又有这几个字段上的复合索引，一般可以删除复合索引；</li><li>频繁进行数据操作的表，不要建立太多的索引；</li><li>删除无用的索引，避免对执行计划造成负面影响；</li><li>表上建立的每个索引都会增加存储开销，索引对于插入、删除、更新操作也会增加处理上的开销。另外，过多的复合索引，在有单字段索引的情况下，一般都是没有存在价值的；相反，还会降低数据增加删除时的性能，特别是对频繁更新的表来说，负面影响更大。</li><li>尽量不要对数据库中某个含有大量重复的值的字段建立索引。</li></ul><p>40、MySQL 查询优化总结：</p><p>使用慢查询日志去发现慢查询，使用执行计划去判断查询是否正常运行，总是去测试你的查询看看是否他们运行在最佳状态下。</p><p>久而久之性能总会变化，避免在整个表上使用 count(*)，它可能锁住整张表，使查询保持一致以便后续相似的查询可以使用查询缓存，在适当的情形下使用 GROUP BY 而不是 DISTINCT，在 WHERE、GROUP BY 和 ORDER BY 子句中使用有索引的列，保持索引简单，不在多个索引中包含同一个列。</p><p>有时候 MySQL 会使用错误的索引，对于这种情况使用 USE INDEX，检查使用 SQL_MODE=STRICT 的问题，对于记录数小于5的索引字段，在 UNION 的时候使用LIMIT不是是用OR。</p><p>为了避免在更新前 SELECT，使用 INSERT ON DUPLICATE KEY 或者 INSERT IGNORE；不要用 UPDATE 去实现，不要使用 MAX；使用索引字段和 ORDER BY子句 LIMIT M，N 实际上可以减缓查询在某些情况下，有节制地使用，在 WHERE 子句中使用 UNION 代替子查询，在重新启动的 MySQL，记得来温暖你的数据库，以确保数据在内存和查询速度快，考虑持久连接，而不是多个连接，以减少开销。</p><p>基准查询，包括使用服务器上的负载，有时一个简单的查询可以影响其他查询，当负载增加在服务器上，使用 SHOW PROCESSLIST 查看慢的和有问题的查询，在开发环境中产生的镜像数据中测试的所有可疑的查询。</p><p>41、MySQL 备份过程：</p><ul><li>从二级复制服务器上进行备份；</li><li>在进行备份期间停止复制，以避免在数据依赖和外键约束上出现不一致；</li><li>彻底停止 MySQL，从数据库文件进行备份；</li><li>如果使用 MySQL dump 进行备份，请同时备份二进制日志文件 – 确保复制没有中断；</li><li>不要信任 LVM 快照，这很可能产生数据不一致，将来会给你带来麻烦；</li><li>为了更容易进行单表恢复，以表为单位导出数据——如果数据是与其他表隔离的。</li><li>当使用 mysqldump 时请使用 –opt；</li><li>在备份之前检查和优化表；</li><li>为了更快的进行导入，在导入时临时禁用外键约束。；</li><li>为了更快的进行导入，在导入时临时禁用唯一性检测；</li><li>在每一次备份后计算数据库，表以及索引的尺寸，以便更够监控数据尺寸的增长；</li><li>通过自动调度脚本监控复制实例的错误和延迟；</li><li>定期执行备份。</li></ul><p>42、查询缓冲并不自动处理空格，因此，在写 SQL 语句时，应尽量减少空格的使用，尤其是在 SQL 首和尾的空格（因为查询缓冲并不自动截取首尾空格）。</p><p>43、member 用 mid 做标准进行分表方便查询么？一般的业务需求中基本上都是以 username 为查询依据，正常应当是 username 做 hash 取模来分表。</p><p>而分表的话 MySQL 的 partition 功能就是干这个的，对代码是透明的；在代码层面去实现貌似是不合理的。</p><p>44、我们应该为数据库里的每张表都设置一个 ID 做为其主键，而且最好的是一个 INT 型的（推荐使用 UNSIGNED），并设置上自动增加的 AUTO_INCREMENT 标志。</p><p>45、在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON，在结束时设置 SET NOCOUNT OFF。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p><p>46、MySQL 查询可以启用高速查询缓存。这是提高数据库性能的有效MySQL优化方法之一。当同一个查询被执行多次时，从缓存中提取数据和直接从数据库中返回数据快很多。</p><p>47、EXPLAIN SELECT 查询用来跟踪查看效果：</p><p>使用 EXPLAIN 关键字可以让你知道 MySQL 是如何处理你的 SQL 语句的。这可以帮你分析你的查询语句或是表结构的性能瓶颈。EXPLAIN 的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的。</p><p>48、当只要一行数据时使用 LIMIT 1 ：</p><p>当你查询表的有些时候，你已经知道结果只会有一条结果，但因为你可能需要去fetch游标，或是你也许会去检查返回的记录数。</p><p>在这种情况下，加上 LIMIT 1 可以增加性能。这样一来，MySQL 数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。</p><p>49、选择表合适存储引擎：</p><ul><li>myisam：应用时以读和插入操作为主，只有少量的更新和删除，并且对事务的完整性，并发性要求不是很高的。</li><li>InnoDB：事务处理，以及并发条件下要求数据的一致性。除了插入和查询外，包括很多的更新和删除。（InnoDB<br>有效地降低删除和更新导致的锁定）。</li><li>对于支持事务的 InnoDB类 型的表来说，影响速度的主要原因是 AUTOCOMMIT 默认设置是打开的，而且程序没有显式调用<br>BEGIN开始事务，导致每插入一条都自动提交，严重影响了速度。可以在执行 SQL 前调用 begin，多条 SQL 形成一个事物（即使autocommit 打开也可以），将大大提高性能。</li></ul><p>50、优化表的数据类型，选择合适的数据类型：</p><p>原则：更小通常更好，简单就好，所有字段都得有默认值，尽量避免 NULL。</p><p>例如：数据库表设计时候更小的占磁盘空间尽可能使用更小的整数类型。(mediumint 就比 int 更合适)</p><p>比如时间字段：datetime 和 timestamp。datetime 占用8个字节，timestamp 占用4个字节，只用了一半。而 timestamp 表示的范围是 1970—2037 适合做更新时间。</p><p>MySQL可以很好的支持大数据量的存取，但是一般说来，数据库中的表越小，在它上面执行的查询也就会越快。</p><p>因此，在创建表的时候，为了获得更好的性能，我们可以将表中字段的宽度设得尽可能小。</p><p>例如：在定义邮政编码这个字段时，如果将其设置为 CHAR(255)，显然给数据库增加了不必要的空间。甚至使用VARCHAR 这种类型也是多余的，因为 CHAR(6) 就可以很好的完成任务了。</p><p>同样的，如果可以的话，我们应该使用 MEDIUMINT 而不是 BIGIN 来定义整型字段，应该尽量把字段设置为 NOT NULL，这样在将来执行查询的时候，数据库不用去比较 NULL 值。</p><p>对于某些文本字段，例如“省份”或者“性别”，我们可以将它们定义为 ENUM 类型。因为在 MySQL 中，ENUM 类型被当作数值型数据来处理，而数值型数据被处理起来的速度要比文本类型快得多。这样，我们又可以提高数据库的性能。</p><p>51、字符串数据类型：char, varchar, text 选择区别。</p><p>52、任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL语句优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis与Mysql双写一致性方案解析</title>
      <link href="/2022/06/23/Redis%E4%B8%8EMysql%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/06/23/Redis%E4%B8%8EMysql%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Redis与Mysql双写一致性</p><span id="more"></span><p><strong>Redis与Mysql双写一致性方案解析</strong></p><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>首先，缓存由于其高并发和高性能的特性，已经在项目中被广泛使用。在读取缓存方面，大家没啥疑问，都是按照流程来进行。</p><p>但是在更新缓存方面，对于更新完数据库，是更新缓存呢，还是删除缓存。又或者是先删除缓存，再更新数据库，其实大家存在很大的争议</p><p>本文由以下三个部分组成 1、讲解缓存更新策略 2、对每种策略进行缺点分析 3、针对缺点给出改进方案</p><h2 id="二-一致性方案"><a href="#二-一致性方案" class="headerlink" title="二 一致性方案"></a>二 一致性方案</h2><p>先做一个说明，从理论上来说，给缓存设置过期时间，是保证最终一致性的解决方案。这种方案下，我们可以对存入缓存的数据设置过期时间，所有的写操作以数据库为准，对缓存操作只是尽最大努力即可。也就是说如果数据库写成功，缓存更新失败，那么只要到达过期时间，则后面的读请求自然会从数据库中读取新值然后回填缓存。因此，接下来讨论的思路不依赖于给缓存设置过期时间这个方案。 在这里，我们讨论<strong>三种</strong>更新策略：</p><ul><li>\1. 先更新数据库，再更新缓存</li><li>\2. 先删除缓存，再更新数据库</li><li>\3. 先更新数据库，再删除缓存</li></ul><h2 id="三-先更新数据库，再更新缓存"><a href="#三-先更新数据库，再更新缓存" class="headerlink" title="三 先更新数据库，再更新缓存"></a>三 先更新数据库，再更新缓存</h2><p>这套方案，大家是普遍反对的。为什么呢？有如下两点原因。</p><p><strong>原因一（线程安全角度）</strong> 同时有请求A和请求B进行更新操作，那么会出现</p><ul><li>（1）线程A更新了数据库</li><li>（2）线程B更新了数据库</li><li>（3）线程B更新了缓存</li><li>（4）线程A更新了缓存</li></ul><p>这就出现请求A更新缓存应该比请求B更新缓存早才对，但是因为网络等原因，B却比A更早更新了缓存。这就导致了脏数据，因此不考虑。</p><p><strong>原因二（业务场景角度）</strong> 有如下两点：</p><ul><li>（1）如果你是一个写数据库场景比较多，而读数据场景比较少的业务需求，采用这种方案就会导致，数据压根还没读到，缓存就被频繁的更新，浪费性能。</li><li>（2）如果你写入数据库的值，并不是直接写入缓存的，而是要经过一系列复杂的计算再写入缓存。那么，每次写入数据库后，都再次计算写入缓存的值，无疑是浪费性能的。显然，删除缓存更为适合。</li></ul><p>接下来讨论的就是争议最大的，先删缓存，再更新数据库。还是先更新数据库，再删缓存的问题。</p><h2 id="四-先删缓存，再更新数据库"><a href="#四-先删缓存，再更新数据库" class="headerlink" title="四 先删缓存，再更新数据库"></a>四 先删缓存，再更新数据库</h2><p>该方案会导致不一致的原因是。同时有一个请求A进行更新操作，另一个请求B进行查询操作。那么会出现如下情形:</p><ul><li>（1）请求A进行写操作，删除缓存</li><li>（2）请求B查询发现缓存不存在</li><li>（3）请求B去数据库查询得到旧值</li><li>（4）请求B将旧值写入缓存</li><li>（5）请求A将新值写入数据库 上述情况就会导致不一致的情形出现。而且，如果不采用给缓存设置过期时间策略，该数据永远都是脏数据。</li></ul><p>那么，<strong>如何解决呢？采用延时双删策略</strong> 伪代码如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        redis<span class="token punctuation">.</span><span class="token function">delKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        db<span class="token punctuation">.</span><span class="token function">updateData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redis<span class="token punctuation">.</span><span class="token function">delKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>转化为中文描述就是</p><ul><li>（1）先淘汰缓存</li><li>（2）再写数据库（这两步和原来一样）</li><li>（3）休眠1秒，再次淘汰缓存 这么做，可以将1秒内所造成的缓存脏数据，再次删除。</li></ul><p><strong>那么，这个1秒怎么确定的，具体该休眠多久呢？</strong></p><p>针对上面的情形，读者应该自行评估自己的项目的读数据业务逻辑的耗时。然后写数据的休眠时间则在读数据业务逻辑的耗时基础上，加几百ms即可。这么做的目的，就是确保读请求结束，写请求可以删除读请求造成的缓存脏数据。</p><p><strong>如果你用了mysql的读写分离架构怎么办？</strong></p><p>ok，在这种情况下，造成数据不一致的原因如下，还是两个请求，一个请求A进行更新操作，另一个请求B进行查询操作。</p><ul><li>（1）请求A进行写操作，删除缓存</li><li>（2）请求A将数据写入数据库了，</li><li>（3）请求B查询缓存发现，缓存没有值</li><li>（4）请求B去从库查询，这时，还没有完成主从同步，因此查询到的是旧值</li><li>（5）请求B将旧值写入缓存</li><li>（6）数据库完成主从同步，从库变为新值 上述情形，就是数据不一致的原因。还是使用双删延时策略。只是，睡眠时间修改为在主从同步的延时时间基础上，加几百ms。</li></ul><p><strong>采用这种同步淘汰策略，吞吐量降低怎么办？</strong></p><p>ok，那就将第二次删除作为异步的。自己起一个线程，异步删除。这样，写的请求就不用沉睡一段时间后了，再返回。这么做，加大吞吐量。</p><p><strong>第二次删除,如果删除失败怎么办？</strong></p><p>这是个非常好的问题，因为第二次删除失败，就会出现如下情形。还是有两个请求，一个请求A进行更新操作，另一个请求B进行查询操作，为了方便，假设是单库：</p><ul><li>（1）请求A进行写操作，删除缓存</li><li>（2）请求B查询发现缓存不存在</li><li>（3）请求B去数据库查询得到旧值</li><li>（4）请求B将旧值写入缓存</li><li>（5）请求A将新值写入数据库</li><li>（6）请求A试图去删除请求B写入对缓存值，结果失败了。 ok,这也就是说。如果第二次删除缓存失败，会再次出现缓存和数据库不一致的问题。 <strong>如何解决呢？</strong> 具体解决方案，且看博主对第(3)种更新策略的解析。</li></ul><h2 id="五-先更新数据库，再删缓存"><a href="#五-先更新数据库，再删缓存" class="headerlink" title="五 先更新数据库，再删缓存"></a>五 先更新数据库，再删缓存</h2><p>首先，先说一下。老外提出了一个缓存更新套路，名为<a href="https://link.zhihu.com/?target=https://docs.microsoft.com/en-us/azure/architecture/patterns/cache-aside">《Cache-Aside pattern》</a>。其中就指出</p><ol><li><strong>失效</strong>：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li><li><strong>命中</strong>：应用程序从cache中取数据，取到后返回。</li><li><strong>更新</strong>：先把数据存到数据库中，成功后，再让缓存失效。</li></ol><p>另外，知名社交网站facebook也在论文<a href="https://link.zhihu.com/?target=https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf">《Scaling Memcache at Facebook》</a>中提出，他们用的也是先更新数据库，再删缓存的策略。</p><p><strong>这种情况不存在并发问题么？</strong></p><p>不是的。假设这会有两个请求，一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生</p><p>（1）缓存刚好失效</p><p>（2）请求A查询数据库，得一个旧值</p><p>（3）请求B将新值写入数据库</p><p>（4）请求B删除缓存</p><p>（5）请求A将查到的旧值写入缓存 ok，如果发生上述情况，确实是会发生脏数据。</p><p><strong>然而，发生这种情况的概率又有多少呢？</strong></p><p>发生上述情况有一个先天性条件，就是步骤（3）的写数据库操作比步骤（2）的读数据库操作耗时更短，才有可能使得步骤（4）先于步骤（5）。</p><p>可是，大家想想，数据库的读操作的速度远快于写操作的（不然做读写分离干嘛，做读写分离的意义就是因为读操作比较快，耗资源少），因此步骤（3）耗时比步骤（2）更短，这一情形很难出现。 假设，有人非要抬杠，有强迫症，一定要解决怎么办？</p><p><strong>如何解决上述并发问题？</strong></p><p>首先，给缓存设有效时间是一种方案。其次，采用策略（2）里给出的异步延时删除策略，保证读请求完成以后，再进行删除操作。</p><p><strong>还有其他造成不一致的原因么？</strong></p><p>有的，这也是缓存更新策略（2）和缓存更新策略（3）都存在的一个问题，如果删缓存失败了怎么办，那不是会有不一致的情况出现么。比如一个写数据请求，然后写入数据库了，删缓存失败了，这会就出现不一致的情况了。这也是缓存更新策略（2）里留下的最后一个疑问。</p><p><strong>如何解决？</strong> 提供一个保障的重试机制即可，这里给出两套方案。</p><p><strong>方案一</strong>： </p><p>流程如下所示</p><ul><li>（1）更新数据库数据；</li><li>（2）缓存因为种种问题删除失败</li><li>（3）将需要删除的key发送至消息队列</li><li>（4）自己消费消息，获得需要删除的key</li><li>（5）继续重试删除操作，直到成功 然而，该方案有一个缺点，对业务线代码造成大量的侵入。于是有了方案二，在方案二中，启动一个订阅程序去订阅数据库的binlog，获得需要操作的数据。在应用程序中，另起一段程序，获得这个订阅程序传来的信息，进行删除缓存操作。</li></ul><p><strong>方案二</strong>：</p><p>流程如下所示：</p><ul><li>（1）更新数据库数据</li><li>（2）数据库会将操作信息写入binlog日志当中</li><li>（3）订阅程序提取出所需要的数据以及key</li><li>（4）另起一段非业务代码，获得该信息</li><li>（5）尝试删除缓存操作，发现删除失败</li><li>（6）将这些信息发送至消息队列</li><li>（7）重新从消息队列中获得该数据，重试操作。</li></ul><p><strong>备注说明：</strong>上述的订阅binlog程序在mysql中有现成的中间件叫canal，可以完成订阅binlog日志的功能。至于oracle中，博主目前不知道有没有现成中间件可以使用。另外，重试机制，博主是采用的是消息队列的方式。如果对一致性要求不是很高，直接在程序中另起一个线程，每隔一段时间去重试即可，这些大家可以灵活自由发挥，只是提供一个思路。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL面试</title>
      <link href="/2022/06/19/mysql%E9%87%8D%E7%82%B9/"/>
      <url>/2022/06/19/mysql%E9%87%8D%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>MySQL面试重点</p><span id="more"></span><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="1-1-为什么要使⽤数据库"><a href="#1-1-为什么要使⽤数据库" class="headerlink" title="1.1 为什么要使⽤数据库"></a><strong>1.1</strong> <strong>为什么要使⽤数据库</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">数据保存在内存</span><span class="token punctuation">**</span></span>优点： 存取速度快缺点： 数据不能永久保存<span class="token bold"><span class="token punctuation">**</span><span class="token content">数据保存在⽂件</span><span class="token punctuation">**</span></span>优点： 数据永久保存缺点：1）速度⽐内存操作慢，频繁的IO操作。2）查询数据不⽅便<span class="token bold"><span class="token punctuation">**</span><span class="token content">数据保存在数据库</span><span class="token punctuation">**</span></span>1）数据永久保存2）使⽤SQL语句，查询⽅便效率⾼。3）管理数据⽅便</code></pre><h3 id="1-2-什么是SQL？"><a href="#1-2-什么是SQL？" class="headerlink" title="1.2 什么是SQL？"></a><strong>1.2</strong> <strong>什么是</strong>SQL？</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">结构化查询语⾔(Structured Query Language)简称SQL，是⼀种数据库查询语⾔。作⽤：⽤于存取数据、查询、更新和管理关系数据库系统。</code></pre><h3 id="1-3-什么是MySQL"><a href="#1-3-什么是MySQL" class="headerlink" title="1.3 什么是MySQL?"></a><strong>1.3</strong> <strong>什么是</strong>MySQL?</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">MySQL是⼀个关系型数据库管理系统，由瑞典MySQL AB 公司开发，属于 Oracle 旗下产品。MySQL 是最流⾏的关系型数据库管理系统之⼀，在 WEB 应⽤⽅⾯，MySQL是最好的 RDBMS (Relational Database ManagementSystem，关系数据库管理系统) 应⽤软件之⼀。在Java企业级开发中⾮常常⽤，因为 MySQL 是开源免费的，并且⽅便扩展。</code></pre><h3 id="1-4-数据库三⼤范式是什么"><a href="#1-4-数据库三⼤范式是什么" class="headerlink" title="1.4 数据库三⼤范式是什么"></a><strong>1.4</strong> <strong>数据库三⼤范式是什么</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">第⼀范式：每个列都不可以再拆分。第⼆范式：在第⼀范式的基础上，⾮主键列完全依赖于主键，⽽不能是依赖于主键的⼀部分。第三范式：在第⼆范式的基础上，⾮主键列只依赖于主键，不依赖于其他⾮主键。在设计数据库结构的时候，要尽量遵守三范式，如果不遵守，必须有⾜够的理由。⽐如性能。事实上我们经常会为了性能⽽妥协数据库的设计。</code></pre><h3 id="1-5-mysql有关权限的表都有哪⼏个"><a href="#1-5-mysql有关权限的表都有哪⼏个" class="headerlink" title="1.5 mysql有关权限的表都有哪⼏个"></a><strong>1.5 mysql</strong>有关权限的表都有哪⼏个</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">MySQL服务器通过权限表来控制⽤户对数据库的访问，权限表存放在mysql数据库⾥，由mysql_install_db脚本初始化。这些权限表分别user，db，table_priv，columns_priv和host。下⾯分别介绍⼀下这些表的结构和内容：user权限表：记录允许连接到服务器的⽤户帐号信息，⾥⾯的权限是全局级的。db权限表：记录各个帐号在各个数据库上的操作权限。table_priv权限表：记录数据表级的操作权限。columns_priv权限表：记录数据列级的操作权限。host权限表：配合db权限表对给定主机上数据库级操作权限作更细致的控制。这个权限表不受GRANT和REVOKE语句的影响。</code></pre><h3 id="1-6-MySQL的binlog有有⼏种录⼊格式？分别有什么区别？"><a href="#1-6-MySQL的binlog有有⼏种录⼊格式？分别有什么区别？" class="headerlink" title="1.6 MySQL的binlog有有⼏种录⼊格式？分别有什么区别？"></a><strong>1.6 MySQL</strong>的binlog有有⼏种录⼊格式？分别有什么区别？</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">有三种格式，statement，row和mixed。statement模式下，每⼀条会修改数据的sql都会记录在binlog中。不需要记录每⼀⾏的变化，减少了binlog⽇志量，节约了IO，提⾼性能。由于sql的执⾏是有上下⽂的，因此在保存的时候需要保存相关的信息，同时还有⼀些使⽤了函数之类的语句⽆法被记录复制。row级别下，不记录sql语句上下⽂相关信息，仅保存哪条记录被修改。记录单元为每⼀⾏的改动，基本是可以全部记下来但是由于很多操作，会导致⼤量⾏的改动(⽐如alter table)，因此这种模式的⽂件保存的信息太多，⽇志量太⼤。mixed，⼀种折中的⽅案，普通操作使⽤statement记录，当⽆法使⽤statement的时候使⽤row。此外，新版的MySQL中对row级别也做了⼀些优化，当表结构发⽣变化的时候，会记录语句⽽不是逐⾏记录。</code></pre><h1 id="⼆-数据类型和引擎分类"><a href="#⼆-数据类型和引擎分类" class="headerlink" title="⼆ 数据类型和引擎分类"></a>⼆ 数据类型和引擎<strong>分类</strong></h1><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">类型名称</span><span class="token punctuation">**</span></span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">说明</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">整数类型</span><span class="token punctuation">*</span></span>* tinyInt 很⼩的整数(8位⼆进制)smallint ⼩的整数(16位⼆进制)mediumint 中等⼤⼩的整数(24位⼆进制)int(integer) 普通⼤⼩的整数(32位⼆进制)<span class="token bold"><span class="token punctuation">**</span><span class="token content">⼩数类型</span><span class="token punctuation">**</span></span> float 单精度浮点数double 双精度浮点数decimal(m,d) 压缩严格的定点数<span class="token bold"><span class="token punctuation">**</span><span class="token content">⽇期类型</span><span class="token punctuation">**</span></span> year YYYY 1901~2155time HH:MM:SS -838:59:59~838:59:59date YYYY-MM-DD 1000-01-01~9999-12-3datetime YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59timestamp YYYY-MM-DD HH:MM:SS 19700101 00:00:01 UTC~2038-01-19 03:14:07UTC<span class="token bold"><span class="token punctuation">**</span><span class="token content">⽂本、⼆进制类</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">型</span><span class="token punctuation">**</span></span>CHAR(M) M为0~255之间的整数VARCHAR(M) M为0~65535之间的整数TINYBLOB 允许⻓度0~255字节BLOB 允许⻓度0~65535字节MEDIUMBLOB 允许⻓度0~167772150字节LONGBLOB 允许⻓度0~4294967295字节TINYTEXT 允许⻓度0~255字节TEXT 允许⻓度0~65535字节MEDIUMTEXT 允许⻓度0~167772150字节LONGTEXT 允许⻓度0~4294967295字节VARBINARY(M) 允许⻓度0~M个字节的变⻓字节字符串BINARY(M) 允许⻓度0~M个字节的定⻓字节字符串</code></pre><h3 id="2-1-mysql有哪些数据类型"><a href="#2-1-mysql有哪些数据类型" class="headerlink" title="2.1 mysql有哪些数据类型"></a><strong>2.1 mysql</strong>有哪些数据类型</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、整数类型 ，包括TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT，分别表示1字节、2字节、3字节、4字节、8字节整数。任何整数类型都可以加上UNSIGNED属性，表示数据是⽆符号的，即⾮负整数。⻓度 ：整数类型可以被指定⻓度，例如：INT(11)表示⻓度为11的INT类型。⻓度在⼤多数场景是没有意义的，它不会限制值的合法范围，只会影响显示字符的个数，⽽且需要和UNSIGNED ZEROFILL属性配合使⽤才有意义。例⼦ ，假定类型设定为INT(5)，属性为UNSIGNED ZEROFILL，如果⽤户插⼊的数据为12的话，那么数据库实际存储数据为00012。 2、实数类型 ，包括FLOAT、DOUBLE、DECIMAL。DECIMAL可以⽤于存储⽐BIGINT还⼤的整型，能存储精确的⼩数。⽽FLOAT和DOUBLE是有取值范围的，并⽀持使⽤标准的浮点进⾏近似计算。计算时FLOAT和DOUBLE相⽐DECIMAL效率更⾼⼀些，DECIMAL你可以理解成是⽤字符串进⾏处理。3、字符串类型 ，包括VARCHAR、CHAR、TEXT、BLOBVARCHAR⽤于存储可变⻓字符串，它⽐定⻓类型更节省空间。VARCHAR使⽤额外1或2个字节存储字符串⻓度。列⻓度⼩于255字节时，使⽤1字节表示，否则使⽤2字节表示。VARCHAR存储的内容超出设置的⻓度时，内容会被截断。CHAR是定⻓的，根据定义的字符串⻓度分配⾜够的空间。CHAR会根据需要使⽤空格进⾏填充⽅便⽐较。CHAR适合存储很短的字符串，或者所有值都接近同⼀个⻓度。CHAR存储的内容超出设置的⻓度时，内容同样会被截断。<span class="token bold"><span class="token punctuation">**</span><span class="token content">使⽤策略：</span><span class="token punctuation">**</span></span>对于经常变更的数据来说，CHAR⽐VARCHAR更好，因为CHAR不容易产⽣碎⽚。对于⾮常短的列，CHAR⽐VARCHAR在存储空间上更有效率。使⽤时要注意只分配需要的空间，更⻓的列排序时会消耗更多内存。尽量避免使⽤TEXT/BLOB类型，查询时会使⽤临时表，导致严重的性能开销。4、枚举类型（ENUM） ，把不重复的数据存储为⼀个预定义的集合。有时可以使⽤ENUM代替常⽤的字符串类型。ENUM存储⾮常紧凑，会把列表值压缩到⼀个或两个字节。ENUM在内部存储时，其实存的是整数。尽量避免使⽤数字作为ENUM枚举的常量，因为容易混乱。排序是按照内部存储的整数5、⽇期和时间类型 ，尽量使⽤timestamp，空间效率⾼于datetime，⽤整数保存时间戳通常不⽅便处理。如果需要存储微妙，可以使⽤bigint存储。</code></pre><h3 id="2-2-MySQL存储引擎MyISAM与InnoDB区别"><a href="#2-2-MySQL存储引擎MyISAM与InnoDB区别" class="headerlink" title="2.2 MySQL存储引擎MyISAM与InnoDB区别"></a><strong>2.2 MySQL</strong>存储引擎MyISAM与InnoDB区别</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">存储引擎Storage engine：MySQL中的数据、索引以及其他对象是如何存储的，是⼀套⽂件系统的实现。常⽤的存储引擎有以下：<span class="token bold"><span class="token punctuation">**</span><span class="token content">Innodb</span><span class="token punctuation">**</span></span>引擎：Innodb引擎提供了对数据库ACID事务的⽀持。并且还提供了⾏级锁和外键的约束。它的设计的⽬标就是处理⼤数据容量的数据库系统。<span class="token bold"><span class="token punctuation">**</span><span class="token content">MyIASM</span><span class="token punctuation">**</span></span>引擎(原本Mysql的默认引擎)：不提供事务的⽀持，也不⽀持⾏级锁和外键。<span class="token bold"><span class="token punctuation">**</span><span class="token content">MEMORY</span><span class="token punctuation">**</span></span>引擎：所有的数据都在内存中，数据的处理速度快，但是安全性不⾼。MyISAM与InnoDB区别MyISAM<span class="token bold"><span class="token punctuation">**</span><span class="token content">Innodb</span><span class="token punctuation">**</span></span>存储结构 每张表被存放在三个⽂件：frm-表格定义、MYD(MYData)-数据⽂件、MYI(MYIndex)-索引⽂件所有的表都保存在同⼀个数据⽂件中（也可能是多个⽂件，或者是独⽴的表空间⽂件），InnoDB表的⼤⼩只受限于操作系统⽂件的⼤⼩，⼀般为2GB存储空间 MyISAM可被压缩，存储空间较⼩ InnoDB的表需要更多的内存和存储，它会在主内存中建⽴其专⽤的缓冲池⽤于⾼速缓冲数据和索引可移植性、备份及恢复由于MyISAM的数据是以⽂件的形式存储，所以在跨平台的数据转移中会很⽅便。在备份和恢复时可单独针对某个表进⾏操作免费的⽅案可以是拷⻉数据⽂件、备份binlog，或者⽤ mysqldump，在数据量达到⼏⼗G的时候就相对痛苦了⽂件格式 数据和索引是分别存储的，数据 .MYD ，索引 .MYI数据和索引是集中存储的， .ibd记录存储顺序 按记录插⼊顺序保存 按主键⼤⼩有序插⼊外键 不⽀持 ⽀持事务 锁⽀持（锁是避免资源争⽤的⼀个机制，MySQL锁对⽤户⼏乎是透明的）表级锁定 ⾏级锁定、表级锁定，锁定⼒度⼩并发能⼒⾼SELECT  MyISAM更优INSERT、UPDATE、DELETEInnoDB更优select count(*) myisam更快，因为myisam内部维护了⼀个计数器，可以直接调取。索引的实现⽅式 B+树索引，myisam 是堆表 B+树索引，Innodb 是索引组织表</code></pre><h3 id="2-3-MyISAM索引与InnoDB索引的区别？"><a href="#2-3-MyISAM索引与InnoDB索引的区别？" class="headerlink" title="2.3 MyISAM索引与InnoDB索引的区别？"></a><strong>2.3 MyISAM</strong>索引与InnoDB索引的区别？</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">InnoDB索引是聚簇索引，MyISAM索引是⾮聚簇索引。InnoDB的主键索引的叶⼦节点存储着⾏数据，因此主键索引⾮常⾼效。MyISAM索引的叶⼦节点存储的是⾏数据地址，需要再寻址⼀次才能得到数据。InnoDB⾮主键索引的叶⼦节点存储的是主键和其他带索引的列数据，因此查询时做到覆盖索引会⾮常⾼效。<span class="token bold"><span class="token punctuation">**</span><span class="token content">2.4 InnoDB</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">引擎的</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">4</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>*⼤特性**插⼊缓冲（insert buffer)⼆次写(double write)⾃适应哈希索引(ahi)预读(read ahead)<span class="token bold"><span class="token punctuation">**</span><span class="token content">存储引擎选择</span><span class="token punctuation">**</span></span>如果没有特别的需求，使⽤默认的 Innodb 即可。MyISAM：以读写插⼊为主的应⽤程序，⽐如博客系统、新闻⻔户⽹站。Innodb：更新（删除）操作频率也⾼，或者要保证数据的完整性；并发量⾼，⽀持事务和外键。⽐如OA⾃动化办公系统。</code></pre><h1 id="三-索引"><a href="#三-索引" class="headerlink" title="三 索引"></a>三 索引</h1><h3 id="3-1-什么是索引？"><a href="#3-1-什么是索引？" class="headerlink" title="3.1 什么是索引？"></a><strong>3.1</strong> <strong>什么是索引？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">索引是⼀种特殊的⽂件(InnoDB数据表上的索引是表空间的⼀个组成部分)，它们包含着对数据表⾥所有记录的引⽤指针。索引是⼀种数据结构。数据库索引，是数据库管理系统中⼀个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使⽤B树及其变种B+树。更通俗的说，索引就相当于⽬录。为了⽅便查找书中的内容，通过对内容建⽴索引形成⽬录。索引是⼀个⽂件，它是要占据物理空间的。</code></pre><h3 id="3-2-索引有哪些优缺点？"><a href="#3-2-索引有哪些优缺点？" class="headerlink" title="3.2 索引有哪些优缺点？"></a><strong>3.2</strong> <strong>索引有哪些优缺点？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">索引的优点可以⼤⼤加快数据的检索速度，这也是创建索引的最主要的原因。通过使⽤索引，可以在查询的过程中，使⽤优化隐藏器，提⾼系统的性能。索引的缺点时间⽅⾯：创建索引和维护索引要耗费时间，具体地，当对表中的数据进⾏增加、删除和修改的时候，索引也要动态的维护，会降低增/改/删的执⾏效率；空间⽅⾯：索引需要占物理空间。</code></pre><h3 id="3-3-索引使⽤场景（重点）"><a href="#3-3-索引使⽤场景（重点）" class="headerlink" title="3.3 索引使⽤场景（重点）"></a><strong>3.3</strong> <strong>索引使⽤场景（重点）</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">###</span> where</span>上图中，根据 id 查询记录，因为 id 字段仅建⽴了主键索引，因此此SQL执⾏可选的索引只有主键索引，如果有多个，最终会选⼀个较优的作为检索的依据。可以尝试在⼀个字段未建⽴索引时，根据该字段查询的效率，然后对该字段建⽴索引（ alter table 表 名 add index(字段名) ），同样的SQL执⾏的效率，你会发现查询效率会有明显的提升（数据量越⼤越明显）。<span class="token title important"><span class="token punctuation">###</span> order by</span>当我们使⽤ order by 将查询结果按照某个字段排序时，如果该字段没有建⽴索引，那么执⾏计划会将查询出的所有数据使⽤外部排序（将数据从硬盘分批读取到内存使⽤内部排序，最后合并排序结果），这个操作是很影响性能的，因为需要将查询涉及到的所有数据从磁盘中读到内存（如果单条数据过⼤或者数据量过多都会降低效率），更⽆论读到内存之后的排序了。但是如果我们对该字段建⽴索引 alter table 表名 add index(字段名) ，那么由于索引本身是有序的，因此直接按照索引的顺序和映射关系逐条取出数据即可。⽽且如果分⻚的，那么只⽤<span class="token bold"><span class="token punctuation">**</span><span class="token content">取出索引表某个范围内的索引对应的数</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">据</span><span class="token punctuation">**</span></span>，⽽不⽤像上述那<span class="token bold"><span class="token punctuation">**</span><span class="token content">取出所有数据</span><span class="token punctuation">**</span></span>进⾏排序再返回某个范围内的数据。（从磁盘取数据是最影响性能的）-- 增加⼀个没有建⽴索引的字段alter table innodb1 add sex char(1);-- 按sex检索时可选的索引为nullEXPLAIN SELECT * from innodb1 where sex='男';<span class="token title important"><span class="token punctuation">###</span> join</span>对 join 语句匹配关系（ on ）涉及的字段建⽴索引能够提⾼效率索引覆盖如果要查询的字段都建⽴过索引，那么引擎会直接在索引表中查询⽽不会访问原始数据（否则只要有⼀个字段没有建⽴索引就会做全表扫描），这叫索引覆盖。因此我们需要尽可能的在 select 后只写必要的查询字段，以增加索引覆盖的⼏率。这⾥值得注意的是不要想着为每个字段建⽴索引，因为优先使⽤索引的优势就在于其体积⼩。</code></pre><h3 id="3-4-索引有哪种类型？"><a href="#3-4-索引有哪种类型？" class="headerlink" title="3.4 索引有哪种类型？"></a><strong>3.4</strong> <strong>索引有哪种类型？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">主键索引</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">:</span><span class="token punctuation">*</span></span>* 数据列不允许重复，不允许为NULL，⼀个表只能有⼀个主键。<span class="token bold"><span class="token punctuation">**</span><span class="token content">唯⼀索引</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">:</span><span class="token punctuation">*</span></span>* 数据列不允许重复，允许为NULL值，⼀个表允许多个列创建唯⼀索引。可以通过 ALTER TABLE table_name ADD UNIQUE (column); 创建唯⼀索引可以通过 ALTER TABLE table_name ADD UNIQUE (column1,column2); 创建唯⼀组合索引<span class="token bold"><span class="token punctuation">**</span><span class="token content">普通索引</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">:</span><span class="token punctuation">*</span></span>* 基本的索引类型，没有唯⼀性的限制，允许为NULL值。可以通过 ALTER TABLE table_name ADD INDEX index_name (column); 创建普通索引可以通过 ALTER TABLE table_name ADD INDEX index_name(column1, column2, column3); 创建组合索引<span class="token bold"><span class="token punctuation">**</span><span class="token content">全⽂索引：</span><span class="token punctuation">**</span></span> 是⽬前搜索引擎使⽤的⼀种关键技术。可以通过 ALTER TABLE table_name ADD FULLTEXT (column); 创建全⽂索引</code></pre><h3 id="3-5-索引的数据结构（b树，hash）"><a href="#3-5-索引的数据结构（b树，hash）" class="headerlink" title="3.5 索引的数据结构（b树，hash）"></a><strong>3.5</strong> <strong>索引的数据结构（</strong>b树，hash）</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">索引的数据结构和具体存储引擎的实现有关，在MySQL中使⽤较多的索引有<span class="token bold"><span class="token punctuation">**</span><span class="token content">Hash</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">索引<span class="token bold"><span class="token punctuation">**</span><span class="token content">，</span><span class="token punctuation">**</span></span>B+</span><span class="token punctuation">*</span></span>*<span class="token bold"><span class="token punctuation">**</span><span class="token content">树索引</span><span class="token punctuation">**</span></span>等，⽽我们经常使⽤的InnoDB存储引擎的默认索引实现为：B+树索引。对于哈希索引来说，底层的数据结构就是哈希表，因此在绝⼤多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余⼤部分场景，建议选择BTree索引。1）B树索引mysql通过存储引擎取数据，基本上90%的⼈⽤的就是InnoDB了，按照实现⽅式分，InnoDB的索引类型⽬前只有两种：BTREE（B树）索引和HASH索引。B树索引是Mysql数据库中使⽤最频繁的索引类型，基本所有存储引擎都⽀持BTree索引。通常我们说的索引不出意外指的就是（B树）索引（实际是⽤B+树实现的，因为在查看表索引时，mysql⼀律打印BTREE，所以简称为B树索引）查询⽅式：主键索引区:PI(关联保存的时数据的地址)按主键查询,普通索引区:si(关联的id的地址,然后再到达上⾯的地址)。所以按主键查询,速度最快B+tree性质：1.）n棵⼦tree的节点包含n个关键字，不⽤来保存数据⽽是保存数据的索引。2.）所有的叶⼦结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶⼦结点本身依关键字的⼤⼩⾃⼩⽽⼤顺序链接。3.）所有的⾮终端结点可以看成是索引部分，结点中仅含其⼦树中的最⼤（或最⼩）关键字。4.）B+ 树中，数据对象的插⼊和删除仅在叶节点上进⾏。5.）B+树有2个头指针，⼀个是树的根节点，⼀个是最⼩关键码的叶节点。2）哈希索引简要说下，类似于数据结构中简单实现的HASH表（散列表）⼀样，当我们在mysql中⽤哈希索引时，主要就是通过Hash算法（常⻅的Hash算法有直接定址法、平⽅取中法、折叠法、除数取余法、随机数法），将数据库字段数据转换成定⻓的Hash值，与这条数据的⾏指针⼀并存⼊Hash表的对应位置；如果发⽣Hash碰撞（两个不同关键字的Hash值相同），则在对应Hash键下以链表形式存储。当然这只是简略模拟图。<span class="token bold"><span class="token punctuation">**</span><span class="token content">3.6</span><span class="token punctuation">**</span></span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">索引的基本原理</span><span class="token punctuation">**</span></span>索引⽤来快速地寻找那些具有特定值的记录。如果没有索引，⼀般来说执⾏查询时遍历整张表。索引的原理很简单，就是把⽆序的数据变成有序的查询\1. 把创建了索引的列的内容进⾏排序\2. 对排序结果⽣成倒排表\3. 在倒排表内容上拼上数据地址链\4. 在查询的时候，先拿到倒排表内容，再取出数据地址链，从⽽拿到具体数据</code></pre><h3 id="3-7-索引算法有哪些？"><a href="#3-7-索引算法有哪些？" class="headerlink" title="3.7 索引算法有哪些？"></a><strong>3.7</strong> <strong>索引算法有哪些？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">索引算法有 BTree算法和Hash算法<span class="token bold"><span class="token punctuation">**</span><span class="token content">BTree</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">算法</span><span class="token punctuation">*</span></span>*BTree是最常⽤的mysql数据库索引算法，也是mysql默认的算法。因为它不仅可以被⽤在=,&gt;,&gt;=,&lt;,&lt;=和between这些⽐较操作符上，⽽且还可以⽤于like操作符，只要它的查询条件是⼀个不以通配符开头的常量， 例如：<span class="token bold"><span class="token punctuation">**</span><span class="token content">Hash</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">算法</span><span class="token punctuation">*</span></span>*-- 只要它的查询条件是⼀个不以通配符开头的常量select * from user where name like 'jack%';-- 如果⼀通配符开头，或者没有使⽤常量，则不会使⽤索引，例如：select * from user where name like '%jack';1234Hash Hash索引只能⽤于对等⽐较，例如=,&lt;=&gt;（相当于=）操作符。由于是⼀次定位数据，不像BTree索引需要从根节点到枝节点，最后才能访问到⻚节点这样多次IO访问，所以检索效率远⾼于BTree索引。</code></pre><h3 id="3-8-索引设计的原则？"><a href="#3-8-索引设计的原则？" class="headerlink" title="3.8 索引设计的原则？"></a><strong>3.8</strong> <strong>索引设计的原则？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">\1. 适合索引的列是出现在where⼦句中的列，或者连接⼦句中指定的列\2. 基数较⼩的类，索引效果较差，没有必要在此列建⽴索引\3. 使⽤短索引，如果对⻓字符串列进⾏索引，应该指定⼀个前缀⻓度，这样能够节省⼤量索引空间\4. 不要过度索引。索引需要额外的磁盘空间，并降低写操作的性能。在修改表内容的时候，索引会进⾏更新甚⾄重构，索引列越多，这个时间就会越⻓。所以只保持需要的索引有利于查询即可。</code></pre><h3 id="3-9-创建索引的原则（重中之重）"><a href="#3-9-创建索引的原则（重中之重）" class="headerlink" title="3.9 创建索引的原则（重中之重）"></a><strong>3.9</strong> <strong>创建索引的原则（重中之重）</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">索引虽好，但也不是⽆限制的使⽤，最好符合⼀下⼏个原则1） 最左前缀匹配原则，组合索引⾮常重要的原则，mysql会⼀直向右匹配直到遇到范围查询(&gt;、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>、between、</span><span class="token attr-name">like)就停⽌匹配，⽐如a</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> 1</span> <span class="token attr-name">and</span> <span class="token attr-name">b</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> 2</span> <span class="token attr-name">and</span> <span class="token attr-name">c</span> <span class="token punctuation">&gt;</span></span> 3 and d = 4 如果建⽴(a,b,c,d)顺序的索引，d是⽤不到索引的，如果建⽴(a,b,d,c)的索引则都可以⽤到，a,b,d的顺序可以任意调整。2）较频繁作为查询条件的字段才去创建索引3）更新频繁字段不适合创建索引4）若是不能有效区分数据的列不适合做索引列(如性别，男⼥未知，最多也就三种，区分度实在太低) 5）尽量的扩展索引，不要新建索引。⽐如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。6）定义有外键的数据列⼀定要建⽴索引。7）对于那些查询中很少涉及的列，重复值⽐较多的列不要建⽴索引。8）对于定义为text、image和bit的数据类型的列不要建⽴索引。</code></pre><h3 id="3-10-创建索引的三种⽅式，删除索引"><a href="#3-10-创建索引的三种⽅式，删除索引" class="headerlink" title="3.10 创建索引的三种⽅式，删除索引"></a><strong>3.10</strong> <strong>创建索引的三种⽅式，删除索引</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">第⼀种⽅式：在执⾏CREATE TABLE时创建索引CREATE TABLE user_index2 ( id INT auto_increment PRIMARY KEY, first_name VARCHAR (16), last_name VARCHAR (16), id_card VARCHAR (18), information text, KEY name (first_name, last_name), FULLTEXT KEY (information), UNIQUE KEY (id_card));12345678910第⼆种⽅式：使⽤ALTER TABLE命令去增加索引ALTER TABLE table_name ADD INDEX index_name (column_list);1ALTER TABLE⽤来创建普通索引、UNIQUE索引或PRIMARY KEY索引。其中table_name是要增加索引的表名，column_list指出对哪些列进⾏索引，多列时各列之间⽤逗号分隔。索引名index_name可⾃⼰命名，缺省时，MySQL将根据第⼀个索引列赋⼀个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。第三种⽅式：使⽤CREATE INDEX命令创建CREATE INDEX index_name ON table_name (column_list);1CREATE INDEX可对表增加普通索引或UNIQUE索引。（但是，不能创建PRIMARY KEY索引）删除索引根据索引名删除普通索引、唯⼀索引、全⽂索引： alter table 表名 drop KEY 索引名alter table user_index drop KEY name;alter table user_index drop KEY id_card;alter table user_index drop KEY information;123删除主键索引： alter table 表名 drop primary key （因为主键只有⼀个）。这⾥值得注意的是，如果主键⾃增⻓，那么不能直接执⾏此操作（⾃增⻓依赖于主键索引）：需要取消⾃增⻓再⾏删除：但通常不会删除主键，因为设计主键⼀定与业务逻辑⽆关。</code></pre><h3 id="3-11-创建索引时需要注意什么？"><a href="#3-11-创建索引时需要注意什么？" class="headerlink" title="3.11 创建索引时需要注意什么？"></a><strong>3.11</strong> <strong>创建索引时需要注意什么？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">⾮空字段：应该指定列为NOT NULL，除⾮你想存储NULL。在mysql中，含有空值的列很难进⾏查询优化，因为它们使得索引、索引的统计信息以及⽐较运算更加复杂。你应该⽤0、⼀个特殊的值或者⼀个空串代替空值；取值离散⼤的字段：（变量各个取值之间的差异程度）的列放到联合索引的前⾯，可以通过count()函数查看字段的差异值，返回值越⼤说明字段的唯⼀值越多字段的离散程度⾼；索引字段越⼩越好：数据库的数据存储以⻚为单位⼀⻚存储的数据越多⼀次IO操作获取的数据越⼤效率越⾼。</code></pre><h3 id="3-12-使⽤索引查询⼀定能提⾼查询的性能吗？为什么"><a href="#3-12-使⽤索引查询⼀定能提⾼查询的性能吗？为什么" class="headerlink" title="3.12 使⽤索引查询⼀定能提⾼查询的性能吗？为什么"></a><strong>3.12</strong> <strong>使⽤索引查询⼀定能提⾼查询的性能吗？为什么</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">通常，通过索引查询数据⽐全表扫描要快。但是我们也必须注意到它的代价。索引需要空间来存储，也需要定期维护， 每当有记录在表中增减或索引列被修改时，索引本身也会被修改。这意味着每条记录的INSERT，DELETE，UPDATE将为此多付出4，5 次的磁盘I/O。 因为索引需要额外的存储空间和处理，那些不必要的索引反⽽会使查询反应时间变慢。使⽤索引查询不⼀定能提⾼查询性能，索引范围查询(INDEX RANGE SCAN)适⽤于两种情况:基于⼀个范围的检索，⼀般查询返回结果集⼩于表中记录数的30%基于⾮唯⼀性索引的检索alter table user_index-- 重新定义字段MODIFY id int,drop PRIMARY KEY</code></pre><h3 id="3-13-百万级别或以上的数据如何删除"><a href="#3-13-百万级别或以上的数据如何删除" class="headerlink" title="3.13 百万级别或以上的数据如何删除"></a><strong>3.13</strong> <strong>百万级别或以上的数据如何删除</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">关于索引：由于索引需要额外的维护成本，因为索引⽂件是单独存在的⽂件,所以当我们对数据的增加,修改,删除,都会产⽣额外的对索引⽂件的操作,这些操作需要消耗额外的IO,会降低增/改/删的执⾏效率。所以，在我们删除数据库百万级别数据的时候，查询MySQL官⽅⼿册得知删除数据的速度和创建的索引数量是成正⽐的。\1. 所以我们想要删除百万数据的时候可以先删除索引（此时⼤概耗时三分多钟）\2. 然后删除其中⽆⽤数据（此过程需要不到两分钟）\3. 删除完成后重新创建索引(此时数据较少了)创建索引也⾮常快，约⼗分钟左右。\4. 与之前的直接删除绝对是要快速很多，更别说万⼀删除中断,⼀切删除会回滚。那更是坑了。</code></pre><h3 id="3-14-前缀索引"><a href="#3-14-前缀索引" class="headerlink" title="3.14 前缀索引"></a><strong>3.14</strong> <strong>前缀索引</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">语法： index(field(10)) ，使⽤字段值的前10个字符建⽴索引，默认是使⽤字段的全部内容建⽴索引。前提：前缀的标识度⾼。⽐如密码就适合建⽴前缀索引，因为密码⼏乎各不相同。实操的难度：在于前缀截取的⻓度。我们可以利⽤ select count(*)/count(distinct left(password,prefixLen)); ，通过从调整 prefixLen 的值（从1⾃增）查看不同前缀⻓度的⼀个平均匹配度，接近1时就可以了（表示⼀个密码的前 prefixLen 个字符⼏乎能确定唯⼀⼀条记录）</code></pre><h3 id="3-15-什么是最左前缀原则？什么是最左匹配原则"><a href="#3-15-什么是最左前缀原则？什么是最左匹配原则" class="headerlink" title="3.15 什么是最左前缀原则？什么是最左匹配原则"></a><strong>3.15</strong> <strong>什么是最左前缀原则？什么是最左匹配原则</strong></h3><pre class="language-mark" data-language="mark"><code class="language-mark">顾名思义，就是最左优先，在创建多列索引时，要根据业务需求，where⼦句中使⽤最频繁的⼀列放在最左边。最左前缀匹配原则，⾮常重要的原则，mysql会⼀直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停⽌匹配，⽐如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建⽴(a,b,c,d)顺序的索引，d是⽤不到索引的，如果建⽴(a,b,d,c)的索引则都可以⽤到，a,b,d的顺序可以任意调整。=和in可以乱序，⽐如a = 1 and b = 2 and c = 3 建⽴(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</code></pre><h3 id="3-16-B树和B-树的区别"><a href="#3-16-B树和B-树的区别" class="headerlink" title="3.16 B树和B+树的区别"></a><strong>3.16 B</strong>树和B+树的区别</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">在B树中，你可以将键和值存放在内部节点和叶⼦节点；但在B+树中，内部节点都是键，没有值，叶⼦节点同时存放键和值。B+树的叶⼦节点有⼀条链相连，⽽B树的叶⼦节点各⾃独⽴。<span class="token bold"><span class="token punctuation">**</span><span class="token content">3.17</span><span class="token punctuation">**</span></span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">使⽤</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">B</span><span class="token punctuation">*</span></span>*<span class="token bold"><span class="token punctuation">**</span><span class="token content">树的好处</span><span class="token punctuation">**</span></span>B树可以在内部节点同时存储键和值，因此，把频繁访问的数据放在靠近根节点的地⽅将会⼤⼤提⾼热点数据的查询效率。这种特性使得B树在特定数据重复多次查询的场景中更加⾼效。</code></pre><h3 id="3-18-使⽤B-树的好处"><a href="#3-18-使⽤B-树的好处" class="headerlink" title="3.18 使⽤B+树的好处"></a><strong>3.18</strong> <strong>使⽤</strong>B+树的好处</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">由于B+树的内部节点只存放键，不存放值，因此，⼀次读取，可以在内存⻚中获取更多的键，有利于更快地缩⼩查找范围。 B+树的叶节点由⼀条链相连，因此，当需要进⾏⼀次全数据遍历的时候，B+树只需要使⽤O(logN)时间找到最⼩的⼀个节点，然后通过链进⾏O(N)的顺序遍历即可。⽽B树则需要对树的每⼀层进⾏遍历，这会需要更多的内存置换次数，因此也就需要花费更多的时间</code></pre><h3 id="3-19-Hash索引和B-树所有有什么区别或者说优劣呢"><a href="#3-19-Hash索引和B-树所有有什么区别或者说优劣呢" class="headerlink" title="3.19 Hash索引和B+树所有有什么区别或者说优劣呢?"></a><strong>3.19 Hash</strong>索引和B+树所有有什么区别或者说优劣呢?</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">⾸先要知道Hash索引和B+树索引的底层实现原理：hash索引底层就是hash表，进⾏查找时，调⽤⼀次hash函数就可以获取到相应的键值，之后进⾏回表查询获得实际数据。B+树底层实现是多路平衡查找树。对于每⼀次的查询都是从根节点出发，查找到叶⼦节点⽅可以获得所查键值，然后根据查询判断是否需要回表查询数据。那么可以看出他们有以下的不同：hash索引进⾏等值查询更快(⼀般情况下)，但是却⽆法进⾏范围查询。因为在hash索引中经过hash函数建⽴索引之后，索引的顺序与原顺序⽆法保持⼀致，不能⽀持范围查询。⽽B+树的的所有节点皆遵循(左节点⼩于⽗节点，右节点⼤于⽗节点，多叉树也类似)，天然⽀持范围。hash索引不⽀持使⽤索引进⾏排序，原理同上。hash索引不⽀持模糊查询以及多列索引的最左前缀匹配。原理也是因为hash函数的不可预测。AAAA和AAAAB的索引没有相关性。hash索引任何时候都避免不了回表查询数据，⽽B+树在符合某些条件(聚簇索引，覆盖索引等)的时候可以只通过索引完成查询。hash索引虽然在等值查询上较快，但是不稳定。性能不可预测，当某个键值存在⼤量重复的时候，发⽣hash碰撞，此时效率可能极差。⽽B+树的查询效率⽐较稳定，对于所有的查询都是从根节点到叶⼦节点，且树的⾼度较低。因此，在⼤多数情况下，直接选择B+树索引可以获得稳定且较好的查询速度。⽽不需要使⽤hash索引。</code></pre><h3 id="3-20-数据库为什么使⽤B-树⽽不是B树"><a href="#3-20-数据库为什么使⽤B-树⽽不是B树" class="headerlink" title="3.20 数据库为什么使⽤B+树⽽不是B树"></a><strong>3.20</strong> <strong>数据库为什么使⽤</strong>B+树⽽不是B树</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">B树只适合随机检索，⽽B+树同时⽀持随机检索和顺序检索；B+树空间利⽤率更⾼，可减少I/O次数，磁盘读写代价更低。⼀般来说，索引本身也很⼤，不可能全部存储在内存中，因此索引往往以索引⽂件的形式存储的磁盘上。这样的话，索引查找过程中就要产⽣磁盘I/O消耗。B+树的内部结点并没有指向关键字具体信息的指针，只是作为索引使⽤，其内部结点⽐B树⼩，盘块能容纳的结点中关键字数量更多，⼀次性读⼊内存中可以查找的关键字也就越多，相对的，IO读写次数也就降低了。⽽IO读写次数是影响索引检索效率的最⼤因素；B+树的查询效率更加稳定。B树搜索有可能会在⾮叶⼦结点结束，越靠近根节点的记录查找时间越短，只要找到关键字即可确定记录的存在，其性能等价于在关键字全集内做⼀次⼆分查找。⽽在B+树中，顺序检索⽐较明显，随机检索时，任何关键字的查找都必须⾛⼀条从根节点到叶节点的路，所有关键字的查找路径⻓度相同，导致每⼀个关键字的查询效率相当。B-树在提⾼了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。B+树的叶⼦节点使⽤指针顺序连接在⼀起，只要遍历叶⼦节点就可以实现整棵树的遍历。⽽且在数据库中基于范围的查询是⾮常频繁的，⽽B树不⽀持这样的操作。增删⽂件（节点）时，效率更⾼。因为B+树的叶⼦节点包含所有关键字，并以有序的链表结构存储，这样可很好提⾼增删效率。</code></pre><h3 id="3-21-B-树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据"><a href="#3-21-B-树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据" class="headerlink" title="**3.21 B+**树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据"></a>**3.21 B+**树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">在B+树的索引中，叶⼦节点可能存储了当前的key值，也可能存储了当前的key值以及整⾏的数据，这就是聚簇索引和⾮聚簇索引。 在InnoDB中，只有主键索引是聚簇索引，如果没有主键，则挑选⼀个唯⼀键建⽴聚簇索引。如果没有唯⼀键，则隐式的⽣成⼀个键来建⽴聚簇索引。当查询使⽤聚簇索引时，在对应的叶⼦节点，可以获取到整⾏数据，因此不⽤再次进⾏回表查询。</code></pre><h3 id="3-22-什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引"><a href="#3-22-什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引" class="headerlink" title="3.22 什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引"></a><strong>3.22</strong> <strong>什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">聚簇索引：将数据存储与索引放到了⼀块，找到索引也就找到了数据⾮聚簇索引：将数据存储于索引分开结构，索引结构的叶⼦节点指向了数据的对应⾏，myisam通过key_buffer把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因澄清⼀个概念：innodb中，在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要⼆次查找，⾮聚簇索引都是辅助索引，像复合索引、前缀索引、唯⼀索引，辅助索引叶⼦节点存储的不再是⾏的物理位置，⽽是主键值</code></pre><h3 id="3-23-⾮聚簇索引⼀定会回表查询吗？"><a href="#3-23-⾮聚簇索引⼀定会回表查询吗？" class="headerlink" title="3.23 ⾮聚簇索引⼀定会回表查询吗？"></a><strong>3.23</strong> <strong>⾮聚簇索引⼀定会回表查询吗？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">不⼀定，这涉及到查询语句所要求的字段是否全部命中了索引，如果全部命中了索引，那么就不必再进⾏回表查询。举个简单的例⼦，假设我们在员⼯表的年龄上建⽴了索引，那么当进⾏ select age from employee where age &lt;20 的查询时，在索引的叶⼦节点上，已经包含了age信息，不会再次进⾏回表查询。</code></pre><h3 id="3-24-联合索引是什么？为什么需要注意联合索引中的顺序？"><a href="#3-24-联合索引是什么？为什么需要注意联合索引中的顺序？" class="headerlink" title="3.24 联合索引是什么？为什么需要注意联合索引中的顺序？"></a><strong>3.24</strong> <strong>联合索引是什么？为什么需要注意联合索引中的顺序？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">MySQL可以使⽤多个字段同时建⽴⼀个索引，叫做联合索引。在联合索引中，如果想要命中索引，需要按照建⽴索引时的字段顺序挨个使⽤，否则⽆法命中索引。具体原因为:MySQL使⽤索引时需要索引有序，假设现在建⽴了"name，age，school"的联合索引，那么索引的排序为: 先按照name排序，如果name相同，则按照age排序，如果age的值也相等，则按照school进⾏排序。当进⾏查询时，此时索引仅仅按照name严格有序，因此必须⾸先使⽤name字段进⾏等值查询，之后对于匹配到的列⽽⾔，其按照age字段严格有序，此时可以使⽤age字段⽤做索引查找，以此类推。因此在建⽴联合索引的时候应该注意索引列的顺序，⼀般情况下，将查询需求频繁或者字段选择性⾼的列放在前⾯。此外可以根据特例的查询或者表结构进⾏单独的调整。</code></pre><h1 id="四-事务四-事务"><a href="#四-事务四-事务" class="headerlink" title="四 事务四 事务"></a>四 事务四 事务</h1><h3 id="4-1-什么是数据库事务？"><a href="#4-1-什么是数据库事务？" class="headerlink" title="4.1 什么是数据库事务？"></a><strong>4.1</strong> <strong>什么是数据库事务？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">事务是⼀个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执⾏的结果必须使数据库从⼀种⼀致性状态变到另⼀种⼀致性状态。事务是逻辑上的⼀组操作，要么都执⾏，要么都不执⾏。事务最经典也经常被拿出来说例⼦就是转账了。假如⼩明要给⼩红转账1000元，这个转账会涉及到两个关键操作就是：将⼩明的余额减少1000元，将⼩红的余额增加1000元。万⼀在这两个操作之间突然出现错误⽐如银⾏系统崩溃，导致⼩明余额减少⽽⼩红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</code></pre><h3 id="4-2-事物的四⼤特性-ACID-介绍⼀下"><a href="#4-2-事物的四⼤特性-ACID-介绍⼀下" class="headerlink" title="4.2 事物的四⼤特性(ACID)介绍⼀下?"></a><strong>4.2</strong> <strong>事物的四⼤特性</strong>(ACID)介绍⼀下?</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">关系性数据库需要遵循ACID规则，具体内容如下：\1. <span class="token bold"><span class="token punctuation">**</span><span class="token content">原⼦性：</span><span class="token punctuation">**</span></span> 事务是最⼩的执⾏单位，不允许分割。事务的原⼦性确保动作要么全部完成，要么完全不起作⽤；\2. <span class="token bold"><span class="token punctuation">**</span><span class="token content">⼀致性：</span><span class="token punctuation">**</span></span> 执⾏事务前后，数据保持⼀致，多个事务对同⼀个数据读取的结果是相同的；\3. <span class="token bold"><span class="token punctuation">**</span><span class="token content">隔离性：</span><span class="token punctuation">**</span></span> 并发访问数据库时，⼀个⽤户的事务不被其他事务所⼲扰，各并发事务之间数据库是独⽴的；\4. <span class="token bold"><span class="token punctuation">**</span><span class="token content">持久性：</span><span class="token punctuation">**</span></span> ⼀个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发⽣故障也不应该对其有任何影响。</code></pre><h3 id="4-3-什么是脏读？幻读？不可重复读？"><a href="#4-3-什么是脏读？幻读？不可重复读？" class="headerlink" title="4.3 什么是脏读？幻读？不可重复读？"></a><strong>4.3</strong> <strong>什么是脏读？幻读？不可重复读？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">脏读(Drity Read)：某个事务已更新⼀份数据，另⼀个事务在此时读取了同⼀份数据，由于某些原因，前⼀个RollBack了操作，则后⼀个事务所读取的数据就会是不正确的。不可重复读(Non-repeatable read):在⼀个事务的两次查询之中数据不⼀致，这可能是两次查询过程中间插⼊了⼀个事务更新的原有的数据。幻读(Phantom Read):在⼀个事务的两次查询中数据笔数不⼀致，例如有⼀个事务查询了⼏列(Row)数据，⽽另⼀个事务却在此时插⼊了新的⼏列数据，先前的事务在接下来的查询中，就会发现有⼏列数据是它先前所没有的。</code></pre><h3 id="4-4-什么是事务的隔离级别？MySQL的默认隔离级别是什么？"><a href="#4-4-什么是事务的隔离级别？MySQL的默认隔离级别是什么？" class="headerlink" title="4.4 什么是事务的隔离级别？MySQL的默认隔离级别是什么？"></a><strong>4.4</strong> 什么是事务的隔离级别？MySQL的默认隔离级别是什么？</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">为了达到事务的四⼤特性，数据库定义了4种不同的事务隔离级别，由低到⾼依次为Read uncommitted、Readcommitted、Repeatable read、Serializable，这四个级别可以逐个解决脏读、不可重复读、幻读这⼏类问题。<span class="token bold"><span class="token punctuation">**</span><span class="token content">隔离级别</span><span class="token punctuation">**</span></span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">脏读</span><span class="token punctuation">**</span></span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">不可重复读</span><span class="token punctuation">**</span></span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">幻影读</span><span class="token punctuation">**</span></span>READ-UNCOMMITTED READ-COMMITTED REPEATABLE-READ SERIALIZABLE <span class="token bold"><span class="token punctuation">**</span><span class="token content">SQL</span><span class="token punctuation">**</span></span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">标准定义了四个隔离级别：</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">READ-UNCOMMITTED(</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">读取未提交</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">)</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>*：<span class="token bold"><span class="token punctuation">**</span><span class="token content"> 最低的隔离级别，允许读取尚未提交的数据变更，</span><span class="token punctuation">**</span></span>可能会导致脏读、**<span class="token bold"><span class="token punctuation">**</span><span class="token content">幻读或不可重复读</span><span class="token punctuation">**</span></span>。<span class="token bold"><span class="token punctuation">**</span><span class="token content">READ-COMMITTED(</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">读取已提交</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">)</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>*：<span class="token bold"><span class="token punctuation">**</span><span class="token content"> 允许读取并发事务已经提交的数据，</span><span class="token punctuation">**</span></span>可以阻⽌脏读，但是幻读或不可重复**<span class="token bold"><span class="token punctuation">**</span><span class="token content">读仍有可能发⽣</span><span class="token punctuation">**</span></span>。<span class="token bold"><span class="token punctuation">**</span><span class="token content">REPEATABLE-READ(</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">可重复读</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">)</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>*：** 对同⼀字段的多次读取结果都是⼀致的，除⾮数据是被本身事务⾃⼰所修改，<span class="token bold"><span class="token punctuation">**</span><span class="token content">可以阻⽌脏读和不可重复读，但幻读仍有可能发⽣</span><span class="token punctuation">**</span></span>。<span class="token bold"><span class="token punctuation">**</span><span class="token content">SERIALIZABLE(</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">可串⾏化</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">)</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>*：** 最⾼的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执⾏，这样事务之间就完全不可能产⽣⼲扰，也就是说，<span class="token bold"><span class="token punctuation">**</span><span class="token content">该级别可以防⽌脏读、不可重复读以及幻读</span><span class="token punctuation">**</span></span>。这⾥需要注意的是：Mysql 默认采⽤的 REPEATABLE_READ隔离级别 Oracle 默认采⽤的 READ_COMMITTED隔离级别事务隔离机制的实现基于锁机制和并发调度。其中并发调度使⽤的是MVVC（多版本并发控制），通过保存修改的旧版本信息来⽀持并发⼀致性读和回滚等特性。因为隔离级别越低，事务请求的锁越少，所以⼤部分数据库系统的隔离级别都是<span class="token bold"><span class="token punctuation">**</span><span class="token content">READ-COMMITTED(</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">读取提交内</span><span class="token punctuation">*</span></span>*<span class="token bold"><span class="token punctuation">**</span><span class="token content">容</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">):<span class="token bold"><span class="token punctuation">**</span><span class="token content">，但是你要知道的是InnoDB 存储引擎默认使⽤ </span><span class="token punctuation">**</span></span>REPEATABLE-READ</span><span class="token punctuation">*</span></span>*<span class="token bold"><span class="token punctuation">**</span><span class="token content">（可重读）</span><span class="token punctuation">**</span></span>并不会有任何性能损失。InnoDB 存储引擎在 <span class="token bold"><span class="token punctuation">**</span><span class="token content">分布式事务</span><span class="token punctuation">**</span></span> 的情况下⼀般会⽤到<span class="token bold"><span class="token punctuation">**</span><span class="token content">SERIALIZABLE(</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">可串⾏化</span><span class="token punctuation">*</span></span>*<span class="token bold"><span class="token punctuation">**</span><span class="token content">)</span><span class="token punctuation">**</span></span>隔离级别。</code></pre><h1 id="五-锁"><a href="#五-锁" class="headerlink" title="五 锁"></a>五 锁</h1><h3 id="5-1-对MySQL的锁了解吗"><a href="#5-1-对MySQL的锁了解吗" class="headerlink" title="5.1 对MySQL的锁了解吗"></a><strong>5.1</strong> <strong>对</strong>MySQL的锁了解吗</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">当数据库有并发事务的时候，可能会产⽣数据的不⼀致，这时候需要⼀些机制来保证访问的次序，锁机制就是这样的⼀个机制。就像酒店的房间，如果⼤家随意进出，就会出现多⼈抢夺同⼀个房间的情况，⽽在房间上装上锁，申请到钥匙的⼈才可以⼊住并且将房间锁起来，其他⼈只有等他使⽤完毕才可以再次使⽤。</code></pre><h3 id="5-2-隔离级别与锁的关系"><a href="#5-2-隔离级别与锁的关系" class="headerlink" title="5.2 隔离级别与锁的关系"></a><strong>5.2</strong> <strong>隔离级别与锁的关系</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">在Read Uncommitted级别下，读取数据不需要加共享锁，这样就不会跟被修改的数据上的排他锁冲突在Read Committed级别下，读操作需要加共享锁，但是在语句执⾏完以后释放共享锁；在Repeatable Read级别下，读操作需要加共享锁，但是在事务提交之前并不释放共享锁，也就是必须等待事务执⾏完毕以后才释放共享锁。SERIALIZABLE 是限制性最强的隔离级别，因为该级别<span class="token bold"><span class="token punctuation">**</span><span class="token content">锁定整个范围的键</span><span class="token punctuation">**</span></span>，并⼀直持有锁，直到事务完成。</code></pre><h3 id="5-3-按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法"><a href="#5-3-按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法" class="headerlink" title="5.3 按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法"></a><strong>5.3</strong> <strong>按照锁的粒度分数据库锁有哪些？锁机制与</strong>InnoDB锁算法</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">在关系型数据库中，可以<span class="token bold"><span class="token punctuation">**</span><span class="token content">按照锁的粒度把数据库锁分</span><span class="token punctuation">**</span></span>为⾏级锁(INNODB引擎)、表级锁(MYISAM引擎)和⻚级锁(BDB引擎 )。<span class="token bold"><span class="token punctuation">**</span><span class="token content">MyISAM</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">和</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">InnoDB</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>*存储引擎使⽤的锁：**MyISAM采⽤表级锁(table-level locking)。InnoDB⽀持⾏级锁(row-level locking)和表级锁，默认为⾏级锁⾏级锁，表级锁和⻚级锁对⽐<span class="token bold"><span class="token punctuation">**</span><span class="token content">⾏级锁</span><span class="token punctuation">**</span></span> ⾏级锁是Mysql中锁定粒度最细的⼀种锁，表示只针对当前操作的⾏进⾏加锁。⾏级锁能⼤⼤减少数据库操作的冲突。其加锁粒度最⼩，但加锁的开销也最⼤。⾏级锁分为共享锁 和 排他锁。特点：开销⼤，加锁慢；会出现死锁；锁定粒度最⼩，发⽣锁冲突的概率最低，并发度也最⾼。<span class="token bold"><span class="token punctuation">**</span><span class="token content">表级锁</span><span class="token punctuation">**</span></span> 表级锁是MySQL中锁定粒度最⼤的⼀种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被⼤部分MySQL引擎⽀持。最常使⽤的MYISAM与INNODB都⽀持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。特点：开销⼩，加锁快；不会出现死锁；锁定粒度⼤，发出锁冲突的概率最⾼，并发度最低。<span class="token bold"><span class="token punctuation">**</span><span class="token content">⻚级锁</span><span class="token punctuation">**</span></span> ⻚级锁是MySQL中锁定粒度介于⾏级锁和表级锁中间的⼀种锁。表级锁速度快，但冲突多，⾏级冲突少，但速度慢。所以取了折衷的⻚级，⼀次锁定相邻的⼀组记录。特点：开销和加锁时间界于表锁和⾏锁之间；会出现死锁；锁定粒度界于表锁和⾏锁之间，并发度⼀般</code></pre><h3 id="5-4-从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了"><a href="#5-4-从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了" class="headerlink" title="5.4 从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了"></a>5.4 从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">从锁的类别上来讲</span><span class="token punctuation">**</span></span>，有共享锁和排他锁。共享锁: ⼜叫做读锁。 当⽤户要进⾏数据的读取时，对数据加上共享锁。共享锁可以同时加上多个。排他锁: ⼜叫做写锁。 当⽤户要进⾏数据的写⼊时，对数据加上排他锁。排他锁只可以加⼀个，他和其他的排他锁，共享锁都相斥。⽤上⾯的例⼦来说就是⽤户的⾏为有两种，⼀种是来看房，多个⽤户⼀起看房是可以接受的。 ⼀种是真正的⼊住⼀晚，在这期间，⽆论是想⼊住的还是想看房的都不可以。锁的粒度取决于具体的存储引擎，InnoDB实现了⾏级锁，⻚级锁，表级锁。他们的加锁开销从⼤到⼩，并发能⼒也是从⼤到⼩。</code></pre><h3 id="5-5-MySQL中InnoDB引擎的⾏锁是怎么实现的"><a href="#5-5-MySQL中InnoDB引擎的⾏锁是怎么实现的" class="headerlink" title="5.5 MySQL中InnoDB引擎的⾏锁是怎么实现的"></a>5.5 MySQL中InnoDB引擎的⾏锁是怎么实现的</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">答：InnoDB是基于索引来完成⾏锁例: select * from tab_with_index where id = 1 for update;for update 可以根据条件来完成⾏锁锁定，并且 id 是有索引键的列，如果 id 不是索引键那么InnoDB将完成表锁，并发将⽆从谈起</code></pre><h3 id="5-6-InnoDB存储引擎的锁的算法有三种"><a href="#5-6-InnoDB存储引擎的锁的算法有三种" class="headerlink" title="5.6 InnoDB存储引擎的锁的算法有三种"></a>5.6 InnoDB存储引擎的锁的算法有三种</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">Record lock：单个⾏记录上的锁Gap lock：间隙锁，锁定⼀个范围，不包括记录本身Next-key lock：record+gap 锁定⼀个范围，包含记录本身<span class="token bold"><span class="token punctuation">**</span><span class="token content">相关知识点：</span><span class="token punctuation">**</span></span>\1. innodb对于⾏的查询使⽤next-key lock\2. Next-locking keying为了解决Phantom Problem幻读问题\3. 当查询的索引含有唯⼀属性时，将next-key lock降级为record key\4. Gap锁设计的⽬的是为了阻⽌多个事务将记录插⼊到同⼀范围内，⽽这会导致幻读问题的产⽣\5. 有两种⽅式显式关闭gap锁：（除了外键约束和唯⼀性检查外，其余情况仅使⽤record lock） A. 将事务隔离级别设置为RC B. 将参数innodb_locks_unsafe_for_binlog设置为1</code></pre><h3 id="5-7-什么是死锁？怎么解决？"><a href="#5-7-什么是死锁？怎么解决？" class="headerlink" title="5.7 什么是死锁？怎么解决？"></a><strong>5.7</strong> <strong>什么是死锁？怎么解决？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">死锁是指两个或多个事务在同⼀资源上相互占⽤，并请求锁定对⽅的资源，从⽽导致恶性循环的现象。常⻅的解决死锁的⽅法1、如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以⼤⼤降低死锁机会。2、在同⼀个事务中，尽可能做到⼀次锁定所需要的所有资源，减少死锁产⽣概率；3、对于⾮常容易产⽣死锁的业务部分，可以尝试使⽤升级锁定颗粒度，通过表级锁定来减少死锁产⽣的概率；如果业务处理不好可以⽤分布式事务锁或者使⽤乐观锁</code></pre><h3 id="5-8-数据库的乐观锁和悲观锁是什么？怎么实现的？"><a href="#5-8-数据库的乐观锁和悲观锁是什么？怎么实现的？" class="headerlink" title="5.8 数据库的乐观锁和悲观锁是什么？怎么实现的？"></a><strong>5.8</strong> <strong>数据库的乐观锁和悲观锁是什么？怎么实现的？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同⼀数据时不破坏事务的隔离性和统⼀性以及数据库的统⼀性。乐观并发控制（乐观锁）和悲观并发控制（悲观锁）是并发控制主要采⽤的技术⼿段。<span class="token bold"><span class="token punctuation">**</span><span class="token content">悲观锁</span><span class="token punctuation">**</span></span>：假定会发⽣并发冲突，屏蔽⼀切可能违反数据完整性的操作。在查询完数据的时候就把事务锁起来，直到提交事务。实现⽅式：使⽤数据库中的锁机制<span class="token bold"><span class="token punctuation">**</span><span class="token content">乐观锁</span><span class="token punctuation">**</span></span>：假设不会发⽣并发冲突，只在提交操作时检查是否违反数据完整性。在修改数据的时候把事务锁起来，通过version的⽅式来进⾏锁定。实现⽅式：乐⼀般会使⽤版本号机制或CAS算法实现。<span class="token bold"><span class="token punctuation">**</span><span class="token content">两种锁的使⽤场景</span><span class="token punctuation">**</span></span>从上⾯对两种锁的介绍，我们知道两种锁各有优缺点，不可认为⼀种好于另⼀种，像<span class="token bold"><span class="token punctuation">**</span><span class="token content">乐观锁适⽤于写⽐较少的情况</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">下（多读场景）</span><span class="token punctuation">**</span></span>，即冲突真的很少发⽣的时候，这样可以省去了锁的开销，加⼤了系统的整个吞吐量。但如果是多写的情况，⼀般会经常产⽣冲突，这就会导致上层应⽤会不断的进⾏retry，这样反倒是降低了性能，所以<span class="token bold"><span class="token punctuation">**</span><span class="token content">⼀般多写的场景下⽤悲观锁就⽐较合适。</span><span class="token punctuation">**</span></span></code></pre><h1 id="六-视图"><a href="#六-视图" class="headerlink" title="六 视图"></a>六 视图</h1><h3 id="6-1-为什么要使⽤视图？什么是视图？"><a href="#6-1-为什么要使⽤视图？什么是视图？" class="headerlink" title="6.1 为什么要使⽤视图？什么是视图？"></a><strong>6.1</strong> <strong>为什么要使⽤视图？什么是视图？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">为了提⾼复杂SQL语句的复⽤性和表操作的安全性，MySQL数据库管理系统提供了视图特性。所谓视图，本质上是⼀种虚拟表，在物理上是不存在的，其内容与真实的表相似，包含⼀系列带有名称的列和⾏数据。但是，视图并不在数据库中以储存的数据值形式存在。⾏和列数据来⾃定义视图的查询所引⽤基本表，并且在具体引⽤视图时动态⽣成。视图使开发者只关⼼感兴趣的某些特定数据和所负责的特定任务，只能看到视图中所定义的数据，⽽不是视图所引⽤表中的数据，从⽽提⾼了数据库中数据的安全性。</code></pre><h3 id="6-2-视图有哪些特点？"><a href="#6-2-视图有哪些特点？" class="headerlink" title="6.2 视图有哪些特点？"></a><strong>6.2</strong> <strong>视图有哪些特点？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">视图的特点如下:视图的列可以来⾃不同的表，是表的抽象和在逻辑意义上建⽴的新关系。视图是由基本表(实表)产⽣的表(虚表)。视图的建⽴和删除不影响基本表。对视图内容的更新(添加，删除和修改)直接影响基本表。当视图来⾃多个基本表时，不允许添加和删除数据。视图的操作包括创建视图，查看视图，删除视图和修改视图。</code></pre><h3 id="6-3-视图的使⽤场景有哪些？"><a href="#6-3-视图的使⽤场景有哪些？" class="headerlink" title="6.3 视图的使⽤场景有哪些？"></a><strong>6.3</strong> <strong>视图的使⽤场景有哪些？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">视图根本⽤途：简化sql查询，提⾼开发效率。如果说还有另外⼀个⽤途那就是兼容⽼的表结构。下⾯是视图的常⻅使⽤场景：重⽤SQL语句；简化复杂的SQL操作。在编写查询后，可以⽅便的重⽤它⽽不必知道它的基本查询细节；使⽤表的组成部分⽽不是整个表；保护数据。可以给⽤户授予表的特定部分的访问权限⽽不是整个表的访问权限；更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</code></pre><h3 id="6-4-视图的优点"><a href="#6-4-视图的优点" class="headerlink" title="6.4 视图的优点"></a><strong>6.4</strong> <strong>视图的优点</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">\1. 查询简单化。视图能简化⽤户的操作\2. 数据安全性。视图使⽤户能以多种⻆度看待同⼀数据，能够对机密数据提供安全保护\3. 逻辑数据独⽴性。视图对重构数据库提供了⼀定程度的逻辑独⽴性</code></pre><h3 id="6-5-视图的缺点"><a href="#6-5-视图的缺点" class="headerlink" title="6.5 视图的缺点"></a><strong>6.5</strong> <strong>视图的缺点</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">\1. 性能。数据库必须把视图的查询转化成对基本表的查询，如果这个视图是由⼀个复杂的多表查询所定义，那么，即使是视图的⼀个简单查询，数据库也把它变成⼀个复杂的结合体，需要花费⼀定的时间。\2. 修改限制。当⽤户试图修改视图的某些⾏时，数据库必须把它转化为对基本表的某些⾏的修改。事实上，当从视图中插⼊或者删除时，情况也是这样。对于简单视图来说，这是很⽅便的，但是，对于⽐较复杂的视图，可能是不可修改的这些视图有如下特征：1.有UNIQUE等集合操作符的视图。2.有GROUP BY⼦句的视图。3.有诸如AVG\SUM\MAX等聚合函数的视图。 4.使⽤DISTINCT关键字的视图。5.连接表的视图（其中有些例外）</code></pre><h3 id="6-6-什么是游标？"><a href="#6-6-什么是游标？" class="headerlink" title="6.6 什么是游标？"></a><strong>6.6</strong> <strong>什么是游标？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">游标是系统为⽤户开设的⼀个数据缓冲区，存放SQL语句的执⾏结果，每个游标区都有⼀个名字。⽤户可以通过游标逐⼀获取记录并赋给主变量，交由主语⾔进⼀步处理。</code></pre><h1 id="七-存储过程与函数"><a href="#七-存储过程与函数" class="headerlink" title="七 存储过程与函数"></a>七 存储过程与函数</h1><h3 id="7-1-什么是存储过程？有哪些优缺点？"><a href="#7-1-什么是存储过程？有哪些优缺点？" class="headerlink" title="7.1 什么是存储过程？有哪些优缺点？"></a><strong>7.1</strong> <strong>什么是存储过程？有哪些优缺点？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">存储过程是⼀个预编译的SQL语句，优点是允许模块化的设计，就是说只需要创建⼀次，以后在该程序中就可以调⽤多次。如果某次操作需要执⾏多次SQL，使⽤存储过程⽐单纯SQL语句执⾏要快。<span class="token bold"><span class="token punctuation">**</span><span class="token content">优点</span><span class="token punctuation">**</span></span>1）存储过程是预编译过的，执⾏效率⾼。2）存储过程的代码直接存放于数据库中，通过存储过程名直接调⽤，减少⽹络通讯。3）安全性⾼，执⾏存储过程需要有⼀定权限的⽤户。4）存储过程可以重复使⽤，减少数据库开发⼈员的⼯作量。<span class="token bold"><span class="token punctuation">**</span><span class="token content">缺点</span><span class="token punctuation">**</span></span>1）调试麻烦，但是⽤ PL/SQL Developer 调试很⽅便！弥补这个缺点。2）移植问题，数据库端代码当然是与数据库相关的。但是如果是做⼯程型项⽬，基本不存在移植问题。3）重新编译问题，因为后端代码是运⾏前编译的，如果带有引⽤关系的对象发⽣改变时，受影响的存储过程、包将需要重新编译（不过也可以设置成运⾏时刻⾃动编译）。4）如果在⼀个程序系统中⼤量的使⽤存储过程，到程序交付使⽤的时候随着⽤户需求的增加会导致数据结构的变化，接着就是系统的相关问题了，最后如果⽤户想维护该系统可以说是很难很难、⽽且代价是空前的，维护起来更麻烦。</code></pre><h3 id="7-2-什么是触发器？触发器的使⽤场景有哪些？"><a href="#7-2-什么是触发器？触发器的使⽤场景有哪些？" class="headerlink" title="7.2 什么是触发器？触发器的使⽤场景有哪些？"></a><strong>7.2</strong> <strong>什么是触发器？触发器的使⽤场景有哪些？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">触发器是⽤户定义在关系表上的⼀类由事件驱动的特殊的存储过程。触发器是指⼀段代码，当触发某个事件时，⾃动执⾏这些代码。使⽤场景可以通过数据库中的相关表实现级联更改。实时监控某张表中的某个字段的更改⽽需要做出相应的处理。例如可以⽣成某些业务的编号。注意不要滥⽤，否则会造成数据库及应⽤程序的维护困难。⼤家需要牢记以上基础知识点，重点是理解数据类型CHAR和VARCHAR的差异，表存储引擎InnoDB和MyISAM的区别。</code></pre><h3 id="7-3-MySQL中都有哪些触发器？"><a href="#7-3-MySQL中都有哪些触发器？" class="headerlink" title="7.3 MySQL中都有哪些触发器？"></a>7.3 MySQL中都有哪些触发器？</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">在MySQL数据库中有如下六种触发器：Before InsertAfter InsertBefore UpdateAfter UpdateBefore DeleteAfter Delete</code></pre><h1 id="⼋-常⽤SQL语句"><a href="#⼋-常⽤SQL语句" class="headerlink" title="⼋ 常⽤SQL语句"></a>⼋ 常⽤SQL语句</h1><h3 id="8-1-SQL语句主要分为哪⼏类"><a href="#8-1-SQL语句主要分为哪⼏类" class="headerlink" title="8.1 SQL语句主要分为哪⼏类"></a>8.1 SQL语句主要分为哪⼏类</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">数据定义语⾔DDL（Data Ddefinition Language）CREATE，DROP，ALTER主要为以上操作 即对逻辑结构等有操作的，其中包括表结构，视图和索引。数据查询语⾔DQL（Data Query Language）SELECT这个较为好理解 即查询操作，以select关键字。各种简单查询，连接查询等 都属于DQL。数据操纵语⾔DML（Data Manipulation Language）INSERT，UPDATE，DELETE主要为以上操作 即对数据进⾏操作的，对应上⾯所说的查询操作 DQL与DML共同构建了多数初级程序员常⽤的增删改查操作。⽽查询是较为特殊的⼀种 被划分到DQL中。数据控制功能DCL（Data Control Language）GRANT，REVOKE，COMMIT，ROLLBACK主要为以上操作 即对数据库安全性完整性等有操作的，可以简单的理解为权限控制等。</code></pre><h3 id="8-2-超键、候选键、主键、外键分别是什么？"><a href="#8-2-超键、候选键、主键、外键分别是什么？" class="headerlink" title="8.2 超键、候选键、主键、外键分别是什么？"></a><strong>8.2</strong> <strong>超键、候选键、主键、外键分别是什么？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">超键：在关系中能唯⼀标识元组的属性集称为关系模式的超键。⼀个属性可以为作为⼀个超键，多个属性组合在⼀起也可以作为⼀个超键。超键包含候选键和主键。候选键：是最⼩超键，即没有冗余元素的超键。主键：数据库表中对储存数据对象予以唯⼀和完整标识的数据列或属性的组合。⼀个数据列只能有⼀个主键，且主键的取值不能缺失，即不能为空值（Null）。外键：在⼀个表中存在的另⼀个表的主键称此表的外键。</code></pre><h3 id="8-3-SQL-约束有哪⼏种？"><a href="#8-3-SQL-约束有哪⼏种？" class="headerlink" title="8.3 SQL 约束有哪⼏种？"></a><strong>8.3 SQL</strong> <strong>约束有哪⼏种？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">NOT NULL: ⽤于控制字段的内容⼀定不能为空（NULL）。UNIQUE: 控件字段内容不能重复，⼀个表允许有多个 Unique 约束。PRIMARY KEY: 也是⽤于控件字段内容不能重复，但它在⼀个表只允许出现⼀个。FOREIGN KEY: ⽤于预防破坏表之间连接的动作，也能防⽌⾮法数据插⼊外键列，因为它必须是它指向的那个表中的值之⼀。CHECK: ⽤于控制字段的值范围。</code></pre><h3 id="8-4-六种关联查询"><a href="#8-4-六种关联查询" class="headerlink" title="8.4 六种关联查询"></a><strong>8.4</strong> <strong>六种关联查询</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">交叉连接（CROSS JOIN）内连接（INNER JOIN）外连接（LEFT JOIN/RIGHT JOIN）联合查询（UNION与UNION ALL）全连接（FULL JOIN）交叉连接（CROSS JOIN）内连接分为三类等值连接：ON A.id=B.id不等值连接：ON A.id &gt; B.id⾃连接：SELECT * FROM A T1 INNER JOIN A T2 ON T1.id=T2.pid外连接（LEFT JOIN/RIGHT JOIN）左外连接：LEFT OUTER JOIN, 以左表为主，先查询出左表，按照ON后的关联条件匹配右表，没有匹配到的⽤NULL填充，可以简写成LEFT JOIN右外连接：RIGHT OUTER JOIN, 以右表为主，先查询出右表，按照ON后的关联条件匹配左表，没有匹配到的⽤NULL填充，可以简写成RIGHT JOIN联合查询（UNION与UNION ALL）就是把多个结果集集中在⼀起，UNION前的结果为基准，需要注意的是联合查询的列数要相等，相同的记录⾏SELECT <span class="token italic"><span class="token punctuation">*</span><span class="token content"> FROM A,B(,C)或者SELECT </span><span class="token punctuation">*</span></span> FROM A CROSS JOIN B (CROSS JOIN C)#没有任何关联条件，结果是笛卡尔积，结果集会很⼤，没有意义，很少使⽤内连接（INNER JOIN）SELECT * FROM A,B WHEREA.id=B.id或者SELECT * FROM A INNER JOIN B ON A.id=B.id多表中同时符合某种条件的数据记录的集合，INNER JOIN可以缩写为JOIN如果使⽤UNION ALL，不会合并重复的记录⾏效率 UNION ⾼于 UNION ALL全连接（FULL JOIN）MySQL不⽀持全连接可以使⽤LEFT JOIN 和UNION和RIGHT JOIN联合使⽤\1. 内连接结果：select r. <span class="token italic"><span class="token punctuation">*</span><span class="token content"> ,s. </span><span class="token punctuation">*</span></span> from r inner join s on r.c=s.c\1. 左连接结果：select r. <span class="token italic"><span class="token punctuation">*</span><span class="token content"> ,s. </span><span class="token punctuation">*</span></span> from r left join s on r.c=s.c\1. 右连接结果：select r. <span class="token italic"><span class="token punctuation">*</span><span class="token content"> ,s. </span><span class="token punctuation">*</span></span> from r right join s on r.c=s.cA \1. 全表连接的结果（MySql不⽀持，Oracle⽀持）：select r. <span class="token italic"><span class="token punctuation">*</span><span class="token content"> ,s. </span><span class="token punctuation">*</span></span> from r full join s on r.c=s.c</code></pre><h3 id="8-5-什么是⼦查询"><a href="#8-5-什么是⼦查询" class="headerlink" title="8.5 什么是⼦查询"></a><strong>8.5</strong> <strong>什么是⼦查询</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">\1. 条件：⼀条SQL语句的查询结果做为另⼀条查询语句的条件或查询结果\2. 嵌套：多条SQL语句嵌套使⽤，内部的SQL查询语句称为⼦查询。</code></pre><h3 id="8-6-⼦查询的三种情况"><a href="#8-6-⼦查询的三种情况" class="headerlink" title="8.6 ⼦查询的三种情况"></a><strong>8.6</strong> <strong>⼦查询的三种情况</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">\1. ⼦查询是单⾏单列的情况：结果集是⼀个值，⽗查询使⽤：=、 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>、</span> <span class="token punctuation">&gt;</span></span> 等运算符\1. ⼦查询是多⾏单列的情况：结果集类似于⼀个数组，⽗查询使⽤：in 运算符\1. ⼦查询是多⾏多列的情况：结果集类似于⼀张虚拟表，不能⽤于where条件，⽤于select⼦句中做为⼦表-- 查询⼯资最⾼的员⼯是谁？select * from employee where salary=(select max(salary) from employee); 12-- 查询⼯资最⾼的员⼯是谁？select * from employee where salary=(select max(salary) from employee); </code></pre><h3 id="8-7-mysql中in-和-exists区别"><a href="#8-7-mysql中in-和-exists区别" class="headerlink" title="8.7 mysql中in 和 exists区别"></a>8.7 mysql中in 和 exists区别</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">mysql中的in语句是把外表和内表作hash 连接，⽽exists语句是对外表作loop循环，每次loop循环再对内表进⾏查询。⼀直⼤家都认为exists⽐in语句的效率要⾼，这种说法其实是不准确的。这个是要区分环境的。\1. 如果查询的两个表⼤⼩相当，那么⽤in和exists差别不⼤。\2. 如果两个表中⼀个较⼩，⼀个是⼤表，则⼦查询表⼤的⽤exists，⼦查询表⼩的⽤in。\3. not in 和not exists：如果查询语句使⽤了not in，那么内外表都进⾏全表扫描，没有⽤到索引；⽽not extsts的⼦查询依然能⽤到表上的索引。所以⽆论那个表⼤，⽤not exists都⽐not in要快。</code></pre><h3 id="8-8-varchar与char的区别"><a href="#8-8-varchar与char的区别" class="headerlink" title="8.8 varchar与char的区别"></a>8.8 varchar与char的区别</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">char</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">的特点</span><span class="token punctuation">*</span></span>*char表示定⻓字符串，⻓度是固定的；如果插⼊数据的⻓度⼩于char的固定⻓度时，则⽤空格填充；因为⻓度固定，所以存取速度要⽐varchar快很多，甚⾄能快50%，但正因为其⻓度固定，所以会占据多余的空间，是空间换时间的做法；对于char来说，最多能存放的字符个数为255，和编码⽆关<span class="token bold"><span class="token punctuation">**</span><span class="token content">varchar</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">的特点</span><span class="token punctuation">*</span></span>*varchar表示可变⻓字符串，⻓度是可变的；插⼊的数据是多⻓，就按照多⻓来存储；varchar在存取⽅⾯与char相反，它存取慢，因为⻓度不固定，但正因如此，不占据多余的空间，是时间换空间的做法；对于varchar来说，最多能存放的字符个数为65532总之，结合性能⻆度（char更快）和节省磁盘空间⻆度（varchar更⼩），具体情况还需具体来设计数据库才是妥当的做法。-- 1) 查询出2011年以后⼊职的员⼯信息-- 2) 查询所有的部⻔信息，与上⾯的虚拟表中的信息⽐对，找出所有部⻔ID相等的员⼯。select <span class="token italic"><span class="token punctuation">*</span><span class="token content"> from dept d, (select </span><span class="token punctuation">*</span></span> from employee where join_date &gt; '2011-1-1') e wheree.dept_id = d.id; -- 使⽤表连接：select d.<span class="token italic"><span class="token punctuation">*</span><span class="token content">, e.</span><span class="token punctuation">*</span></span> from dept d inner join employee e on d.id = e.dept_id wheree.join_date &gt; '2011-1-1' </code></pre><h3 id="8-9-varchar-50-中50的涵义"><a href="#8-9-varchar-50-中50的涵义" class="headerlink" title="8.9 varchar(50)中50的涵义"></a>8.9 varchar(50)中50的涵义</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">最多存放50个字符，varchar(50)和(200)存储hello所占空间⼀样，但后者在排序时会消耗更多内存，因为order bycol采⽤fixed_length计算col⻓度(memory引擎也⼀样)。在早期 MySQL 版本中， 50 代表字节数，现在代表字符数。</code></pre><h3 id="8-10-int-20-中20的涵义"><a href="#8-10-int-20-中20的涵义" class="headerlink" title="8.10 int(20)中20的涵义"></a>8.10 int(20)中20的涵义</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">是指显示字符的⻓度。20表示最⼤显示宽度为20，但仍占4字节存储，存储范围不变；不影响内部存储，只是影响带 zerofill 定义的 int 时，前⾯补多少个 0，易于报表展示</code></pre><h3 id="8-11-mysql为什么这么设计"><a href="#8-11-mysql为什么这么设计" class="headerlink" title="8.11 mysql为什么这么设计"></a>8.11 mysql为什么这么设计</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">对⼤多数应⽤没有意义，只是规定⼀些⼯具⽤来显示字符的个数；int(1)和int(20)存储和计算均⼀样；</code></pre><h3 id="8-12-mysql中int-10-和char-10-以及varchar-10-的区别"><a href="#8-12-mysql中int-10-和char-10-以及varchar-10-的区别" class="headerlink" title="8.12 mysql中int(10)和char(10)以及varchar(10)的区别"></a>8.12 mysql中int(10)和char(10)以及varchar(10)的区别</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">int(10)的10表示显示的数据的⻓度，不是存储数据的⼤⼩；chart(10)和varchar(10)的10表示存储数据的⼤⼩，即表示存储多少个字符。int(10) 10位的数据⻓度 9999999999，占32个字节，int型4位char(10) 10位固定字符串，不⾜补空格 最多10个字符varchar(10) 10位可变字符串，不⾜补空格 最多10个字符char(10)表示存储定⻓的10个字符，不⾜10个就⽤空格补⻬，占⽤更多的存储空间varchar(10)表示存储10个变⻓的字符，存储多少个就是多少个，空格也按⼀个字符存储，这⼀点是和char(10)的空格不同的，char(10)的空格表示占位不算⼀个字符</code></pre><h3 id="8-13-FLOAT和DOUBLE的区别是什么"><a href="#8-13-FLOAT和DOUBLE的区别是什么" class="headerlink" title="8.13 FLOAT和DOUBLE的区别是什么"></a>8.13 FLOAT和DOUBLE的区别是什么</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">FLOAT类型数据可以存储⾄多8位⼗进制数，并在内存中占4字节。DOUBLE类型数据可以存储⾄多18位⼗进制数，并在内存中占8字节。</code></pre><h3 id="8-15-UNION与UNION-ALL的区别？"><a href="#8-15-UNION与UNION-ALL的区别？" class="headerlink" title="8.15 UNION与UNION ALL的区别？"></a>8.15 UNION与UNION ALL的区别？</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">如果使⽤UNION ALL，不会合并重复的记录⾏效率 UNION ⾼于 UNION ALL</code></pre><h1 id="九-SQL优化"><a href="#九-SQL优化" class="headerlink" title="九 SQL优化"></a>九 SQL优化</h1><h3 id="9-1-如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到-或者说怎么才可以知道这条语句运⾏很慢的原因"><a href="#9-1-如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到-或者说怎么才可以知道这条语句运⾏很慢的原因" class="headerlink" title="9.1 如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到?或者说怎么才可以知道这条语句运⾏很慢的原因"></a><strong>9.1</strong> 如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到?或者说怎么才可以知道这条语句运⾏很慢的原因</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">对于低性能的SQL语句的定位，最重要也是最有效的⽅法就是使⽤执⾏计划，MySQL提供了explain命令来查看语句的执⾏计划。 我们知道，不管是哪种数据库，或者是哪种数据库引擎，在对⼀条SQL语句进⾏执⾏的过程中都会做很多相关的优化，<span class="token bold"><span class="token punctuation">**</span><span class="token content">对于查询语句，最重要的优化⽅式就是使⽤索引</span><span class="token punctuation">**</span></span>。 ⽽<span class="token bold"><span class="token punctuation">**</span><span class="token content">执⾏计划，就是显示数据库引擎对于</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">SQL</span><span class="token punctuation">*</span></span>*<span class="token bold"><span class="token punctuation">**</span><span class="token content">语句的执⾏的详细情况，其中包含了是否使⽤索引，使⽤什么索引，使⽤的索引的相关信息等</span><span class="token punctuation">**</span></span>。执⾏计划包含的信息 <span class="token bold"><span class="token punctuation">**</span><span class="token content">id</span><span class="token punctuation">**</span></span> 有⼀组数字组成。表示⼀个查询中各个⼦查询的执⾏顺序;<span class="token bold"><span class="token punctuation">**</span><span class="token content">id</span><span class="token punctuation">**</span></span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">select_type</span><span class="token punctuation">**</span></span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">description</span><span class="token punctuation">**</span></span>1 SIMPLE 不包含任何⼦查询或union等查询2 PRIMARY 包含⼦查询最外层查询就显示为 PRIMARY3 SUBQUERY 在select或 where字句中包含的查询4 DERIVED from字句中包含的查询5 UNION 出现在union后的查询语句中6 UNION RESULT 从UNION中获取结果集，例如上⽂的第三个例⼦id相同执⾏顺序由上⾄下。id不同，id值越⼤优先级越⾼，越先被执⾏。id为null时表示⼀个结果集，不需要使⽤它查询，常出现在包含union等查询语句中。<span class="token bold"><span class="token punctuation">**</span><span class="token content">select_type</span><span class="token punctuation">**</span></span> 每个⼦查询的查询类型，⼀些常⻅的查询类型。<span class="token bold"><span class="token punctuation">**</span><span class="token content">table</span><span class="token punctuation">**</span></span> 查询的数据表，当从衍⽣表中查数据时会显示 x 表示对应的执⾏计划id <span class="token bold"><span class="token punctuation">**</span><span class="token content">partitions</span><span class="token punctuation">**</span></span> 表分区、表创建的时候可以指定通过那个列进⾏表分区。 举个例⼦：<span class="token bold"><span class="token punctuation">**</span><span class="token content">type</span><span class="token punctuation">**</span></span>(⾮常重要，可以看到有没有⾛索引) 访问类型ALL 扫描全表数据index 遍历索引range 索引范围查找index_subquery 在⼦查询中使⽤ refunique_subquery 在⼦查询中使⽤ eq_refref_or_null 对Null进⾏索引的优化的 reffulltext 使⽤全⽂索引ref 使⽤⾮唯⼀索引查找数据eq_ref 在join查询中使⽤PRIMARY KEYorUNIQUE NOT NULL索引关联。<span class="token bold"><span class="token punctuation">**</span><span class="token content">possible_keys</span><span class="token punctuation">**</span></span> 可能使⽤的索引，注意不⼀定会使⽤。查询涉及到的字段上若存在索引，则该索引将被列出来。当该列为 NULL时就要考虑当前的SQL是否需要优化了。create table tmp ( id int unsigned not null AUTO_INCREMENT, name varchar(255), PRIMARY KEY (id)) engine = innodbpartition by key (id) partitions 5;<span class="token bold"><span class="token punctuation">**</span><span class="token content">key</span><span class="token punctuation">**</span></span> 显示MySQL在查询中实际使⽤的索引，若没有使⽤索引，显示为NULL。<span class="token bold"><span class="token punctuation">**</span><span class="token content">TIPS</span><span class="token punctuation">**</span></span>:查询中若使⽤了覆盖索引(覆盖索引：索引的数据覆盖了需要查询的所有数据)，则该索引仅出现在key列表中<span class="token bold"><span class="token punctuation">**</span><span class="token content">key_length</span><span class="token punctuation">**</span></span> 索引⻓度<span class="token bold"><span class="token punctuation">**</span><span class="token content">ref</span><span class="token punctuation">**</span></span> 表示上述表的连接匹配条件，即哪些列或常量被⽤于查找索引列上的值<span class="token bold"><span class="token punctuation">**</span><span class="token content">rows</span><span class="token punctuation">**</span></span> 返回估算的结果集数⽬，并不是⼀个准确的值。<span class="token bold"><span class="token punctuation">**</span><span class="token content">extra</span><span class="token punctuation">**</span></span> 的信息⾮常丰富，常⻅的有：\1. Using index 使⽤覆盖索引\2. Using where 使⽤了⽤where⼦句来过滤结果集\3. Using filesort 使⽤⽂件排序，使⽤⾮索引列进⾏排序时出现，⾮常消耗性能，尽量优化。\4. Using temporary 使⽤了临时表 sql优化的⽬标可以参考阿⾥开发⼿册</code></pre><h3 id="9-2-SQL的⽣命周期？"><a href="#9-2-SQL的⽣命周期？" class="headerlink" title="9.2 SQL的⽣命周期？"></a>9.2 SQL的⽣命周期？</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">\1. 应⽤服务器与数据库服务器建⽴⼀个连接\2. 数据库进程拿到请求sql\3. 解析并⽣成执⾏计划，执⾏\4. 读取数据到内存并进⾏逻辑处理\5. 通过步骤⼀的连接，发送结果到客户端\6. 关掉连接，释放资源【推荐】SQL性能优化的⽬标：⾄少要达到 range 级别，要求是ref级别，如果可以是consts最好。说明：1） consts 单表中最多只有⼀个匹配⾏（主键或者唯⼀索引），在优化阶段即可读取到数据。2） ref 指的是使⽤普通的索引（normal index）。3） range 对索引进⾏范围检索。反例：explain表的结果，type=index，索引物理⽂件全扫描，速度⾮常慢，这个index级别⽐较range还低，与全表扫描是⼩巫⻅⼤巫。</code></pre><h3 id="9-3-⼤表数据查询，怎么优化"><a href="#9-3-⼤表数据查询，怎么优化" class="headerlink" title="9.3 ⼤表数据查询，怎么优化"></a><strong>9.3</strong> <strong>⼤表数据查询，怎么优化</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 优化shema、sql语句+索引；<span class="token list punctuation">2.</span> 第⼆加缓存，memcached, redis；<span class="token list punctuation">3.</span> 主从复制，读写分离；<span class="token list punctuation">4.</span> 垂直拆分，根据你模块的耦合度，将⼀个⼤的系统分为多个⼩的系统，也就是分布式系统；<span class="token list punctuation">5.</span> ⽔平切分，针对数据量⼤的表，这⼀步最麻烦，最能考验技术⽔平，要选择⼀个合理的sharding key, 为了有好的查询效率，表结构也要改动，做⼀定的冗余，应⽤也要改，sql中尽量带sharding key，将数据定位到限定的表上去查，⽽不是扫描全部的表；</code></pre><h3 id="9-4-超⼤分⻚怎么处理？"><a href="#9-4-超⼤分⻚怎么处理？" class="headerlink" title="9.4 超⼤分⻚怎么处理？"></a><strong>9.4</strong> <strong>超⼤分⻚怎么处理？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">超⼤的分⻚⼀般从两个⽅向上来解决.数据库层⾯,这也是我们主要集中关注的(虽然收效没那么⼤),类似于 select * from table where age &gt; 20limit 1000000,10 这种查询其实也是有可以优化的余地的. 这条语句需要load1000000数据然后基本上全部丢弃,只取10条当然⽐较慢. 当时我们可以修改为 select * from table where id in (select id from tablewhere age &gt; 20 limit 1000000,10) .这样虽然也load了⼀百万的数据,但是由于索引覆盖,要查询的所有字段都在索引中,所以速度会很快. 同时如果ID连续的好,我们还可以 select * from table where id &gt; 1000000limit 10 ,效率也是不错的,优化的可能性有许多种,但是核⼼思想都⼀样,就是减少load的数据.从需求的⻆度减少这种请求…主要是不做类似的需求(直接跳转到⼏百万⻚之后的具体某⼀⻚.只允许逐⻚查看或者按照给定的路线⾛,这样可预测,可缓存)以及防⽌ID泄漏且连续被⼈恶意攻击.解决超⼤分⻚,其实主要是靠缓存,可预测性的提前查到内容,缓存⾄redis等k-V数据库中,直接返回即可.在阿⾥巴巴《Java开发⼿册》中,对超⼤分⻚的解决办法是类似于上⾯提到的第⼀种.</code></pre><h3 id="9-5-mysql-分⻚"><a href="#9-5-mysql-分⻚" class="headerlink" title="9.5 mysql 分⻚"></a><strong>9.5 mysql</strong> <strong>分⻚</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">LIMIT ⼦句可以被⽤于强制 SELECT 语句返回指定的记录数。LIMIT 接受⼀个或两个数字参数。参数必须是⼀个整数常量。如果给定两个参数，第⼀个参数指定第⼀个返回记录⾏的偏移量，第⼆个参数指定返回记录⾏的最⼤数⽬。初始记录⾏的偏移量是 0(⽽不是 1)为了检索从某⼀个偏移量到记录集的结束所有的记录⾏，可以指定第⼆个参数为 -1：【推荐】利⽤延迟关联或者⼦查询优化超多分⻚场景。说明：MySQL并不是跳过offset⾏，⽽是取offset+N⾏，然后返回放弃前offset⾏，返回N⾏，那当offset特别⼤的时候，效率就⾮常的低下，要么控制返回的总⻚数，要么对超过特定阈值的⻚数进⾏SQL改写。正例：先快速定位需要获取的id段，然后再关联：SELECT a.* FROM 表1 a, (select id from 表1 where 条件 LIMIT 100000,20 ) b wherea.id=b.id1234567mysql&gt; SELECT * FROM table LIMIT 5,10; // 检索记录⾏ 6-151mysql&gt; SELECT * FROM table LIMIT 95,-1; // 检索记录⾏ 96-last.1如果只给定⼀个参数，它表示返回最⼤的记录⾏数⽬：换句话说，LIMIT n 等价于 LIMIT 0,n。</code></pre><h3 id="9-6-慢查询⽇志"><a href="#9-6-慢查询⽇志" class="headerlink" title="9.6 慢查询⽇志"></a><strong>9.6</strong> <strong>慢查询⽇志</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">⽤于记录执⾏时间超过某个临界值的SQL⽇志，⽤于快速定位慢查询，为我们的优化做参考。开启慢查询⽇志配置项： slow_query_log可以使⽤ show variables like ‘slov_query_log’ 查看是否开启，如果状态值为 OFF ，可以使⽤ set GLOBALslow_query_log = on 来开启，它会在 datadir 下产⽣⼀个 xxx-slow.log 的⽂件。设置临界时间配置项： long_query_time查看： show VARIABLES like 'long_query_time' ，单位秒设置： set long_query_time=0.5实操时应该从⻓时间设置到短的时间，即将最慢的SQL优化掉查看⽇志，⼀旦SQL超过了我们设置的临界时间就会被记录到 xxx-slow.log 中</code></pre><h3 id="9-7-关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？"><a href="#9-7-关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？" class="headerlink" title="9.7 关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？"></a><strong>9.7</strong> 关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">在业务系统中，除了使⽤主键进⾏的查询，其他的我都会在测试库上测试其耗时，慢查询的统计主要由运维在做，会定期将业务中的慢查询反馈给我们。慢查询的优化⾸先要搞明⽩慢的原因是什么？ 是查询条件没有命中索引？是load了不需要的数据列？还是数据量太⼤？所以优化也是针对这三个⽅向来的，⾸先分析语句，看看是否load了额外的数据，可能是查询了多余的⾏并且抛弃掉了，可能是加载了许多结果中并不需要的列，对语句进⾏分析以及重写。分析语句的执⾏计划，然后获得其使⽤索引的情况，之后修改语句或者修改索引，使得语句可以尽可能的命中mysql&gt; SELECT * FROM table LIMIT 5; //检索前 5 个记录⾏索引。如果对语句的优化已经⽆法进⾏，可以考虑表中的数据量是否太⼤，如果是的话可以进⾏横向或者纵向的分表。</code></pre><h3 id="9-8-为什么要尽量设定⼀个主键？"><a href="#9-8-为什么要尽量设定⼀个主键？" class="headerlink" title="9.8 为什么要尽量设定⼀个主键？"></a><strong>9.8</strong> <strong>为什么要尽量设定⼀个主键？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">主键是数据库确保数据⾏在整张表唯⼀性的保障，即使业务上本张表没有主键，也建议添加⼀个⾃增⻓的ID列作为主键。设定了主键之后，在后续的删改查的时候可能更加快速以及确保操作数据范围安全。</code></pre><h3 id="9-9-主键使⽤⾃增ID还是UUID"><a href="#9-9-主键使⽤⾃增ID还是UUID" class="headerlink" title="9.9 主键使⽤⾃增ID还是UUID"></a><strong>9.9</strong> 主键使⽤⾃增ID还是UUID</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">推荐使⽤⾃增ID，不要使⽤UUID。因为在InnoDB存储引擎中，主键索引是作为聚簇索引存在的，也就是说，主键索引的B+树叶⼦节点上存储了主键索引以及全部的数据(按照顺序)，如果主键索引是⾃增ID，那么只需要不断向后排列即可，如果是UUID，由于到来的ID与原来的⼤⼩不确定，会造成⾮常多的数据插⼊，数据移动，然后导致产⽣很多的内存碎⽚，进⽽造成插⼊性能的下降。总之，在数据量⼤⼀些的情况下，⽤⾃增主键性能会好⼀些。关于主键是聚簇索引，如果没有主键，InnoDB会选择⼀个唯⼀键来作为聚簇索引，如果没有唯⼀键，会⽣成⼀个隐式的主键。</code></pre><h3 id="9-10-字段为什么要求定义为not-null"><a href="#9-10-字段为什么要求定义为not-null" class="headerlink" title="9.10 字段为什么要求定义为not null"></a><strong>9.10</strong> 字段为什么要求定义为not null</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">null值会占⽤更多的字节，且会在程序中造成很多与预期不符的情况</code></pre><h3 id="9-11-如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？"><a href="#9-11-如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？" class="headerlink" title="9.11 如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？"></a><strong>9.11</strong> <strong>如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">密码散列，盐，⽤户身份证号等固定⻓度的字符串应该使⽤char⽽不是varchar来存储，这样可以节省空间且提⾼检索效率。</code></pre><h3 id="9-12-优化查询过程中的数据访问"><a href="#9-12-优化查询过程中的数据访问" class="headerlink" title="9.12 优化查询过程中的数据访问"></a><strong>9.12</strong> <strong>优化查询过程中的数据访问</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">访问数据太多导致查询性能下降确定应⽤程序是否在检索⼤量超过需要的数据，可能是太多⾏或列确认MySQL服务器是否在分析⼤量不必要的数据⾏避免犯如下SQL语句错误查询不需要的数据。解决办法：使⽤limit解决多表关联返回全部列。解决办法：指定列名总是返回全部列。解决办法：避免使⽤SELECT *重复查询相同的数据。解决办法：可以缓存数据，下次直接读取缓存是否在扫描额外的记录。解决办法：使⽤explain进⾏分析，如果发现查询需要扫描⼤量的数据，但只返回少数的⾏，可以通过如下技巧去优化：使⽤索引覆盖扫描，把所有的列都放到索引中，这样存储引擎不需要回表获取对应⾏就可以返回结果。改变数据库和表的结构，修改数据表范式重写SQL语句，让优化器可以以更优的⽅式执⾏查询。</code></pre><h3 id="9-13-优化⻓难的查询语句"><a href="#9-13-优化⻓难的查询语句" class="headerlink" title="9.13 优化⻓难的查询语句"></a><strong>9.13</strong> <strong>优化⻓难的查询语句</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">⼀个复杂查询还是多个简单查询MySQL内部每秒能扫描内存中上百万⾏数据，相⽐之下，响应数据给客户端就要慢得多使⽤尽可能⼩的查询是好的，但是有时将⼀个⼤的查询分解为多个⼩的查询是很有必要的。切分查询将⼀个⼤的查询分为多个⼩的相同的查询⼀次性删除1000万的数据要⽐⼀次删除1万，暂停⼀会的⽅案更加损耗服务器开销。分解关联查询，让缓存的效率更⾼。执⾏单个查询可以减少锁的竞争。在应⽤层做关联更容易对数据库进⾏拆分。查询效率会有⼤幅提升。较少冗余记录的查询。</code></pre><h3 id="9-14-优化特定类型的查询语句"><a href="#9-14-优化特定类型的查询语句" class="headerlink" title="9.14 优化特定类型的查询语句"></a><strong>9.14</strong> <strong>优化特定类型的查询语句</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">count(*)会忽略所有的列，直接统计所有列数，不要使⽤count(列名)MyISAM中，没有任何where条件的count(*)⾮常快。当有where条件时，MyISAM的count统计不⼀定⽐其它引擎快。可以使⽤explain查询近似值，⽤近似值替代count(*)增加汇总表使⽤缓存</code></pre><h3 id="9-15-优化关联查询"><a href="#9-15-优化关联查询" class="headerlink" title="9.15 优化关联查询"></a><strong>9.15</strong> <strong>优化关联查询</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">确定ON或者USING⼦句中是否有索引。确保GROUP BY和ORDER BY只有⼀个表中的列，这样MySQL才有可能使⽤索引</code></pre><h3 id="9-16-优化⼦查询"><a href="#9-16-优化⼦查询" class="headerlink" title="9.16 优化⼦查询"></a><strong>9.16</strong> 优化⼦查询</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">⽤关联查询替代优化GROUP BY和DISTINCT这两种查询据可以使⽤索引来优化，是最有效的优化⽅法关联查询中，使⽤标识列分组的效率更⾼如果不需要ORDER BY，进⾏GROUP BY时加ORDER BY NULL，MySQL不会再进⾏⽂件排序。WITH ROLLUP超级聚合，可以挪到应⽤程序处理</code></pre><h3 id="9-17-优化LIMIT分⻚"><a href="#9-17-优化LIMIT分⻚" class="headerlink" title="9.17 优化LIMIT分⻚"></a><strong>9.17</strong> 优化LIMIT分⻚</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">LIMIT偏移量⼤的时候，查询效率较低可以记录上次查询的最⼤ID，下次查询时直接根据该ID来查询<span class="token bold"><span class="token punctuation">**</span><span class="token content">9.18</span><span class="token punctuation">**</span></span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">优化</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">UNION</span><span class="token punctuation">*</span></span>*<span class="token bold"><span class="token punctuation">**</span><span class="token content">查询</span><span class="token punctuation">**</span></span>UNION ALL的效率⾼于UNION</code></pre><h3 id="9-19-优化WHERE⼦句"><a href="#9-19-优化WHERE⼦句" class="headerlink" title="9.19 优化WHERE⼦句"></a><strong>9.19</strong> 优化WHERE⼦句</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">解题⽅法对于此类考题，先说明如何定位低效SQL语句，然后根据SQL语句可能低效的原因做排查，先从索引着⼿，如果索引没有问题，考虑以上⼏个⽅⾯，数据访问的问题，⻓难查询句的问题还是⼀些特定类型优化的问题，逐⼀回答。SQL语句优化的⼀些⽅法？1.对查询进⾏优化，应尽量避免全表扫描，⾸先应考虑在 where 及 order by 涉及的列上建⽴索引。2.应尽量避免在 where ⼦句中对字段进⾏ null 值判断，否则将导致引擎放弃使⽤索引⽽进⾏全表扫描，如：3.应尽量避免在 where ⼦句中使⽤!=或&lt;&gt;操作符，否则引擎将放弃使⽤索引⽽进⾏全表扫描。4.应尽量避免在 where ⼦句中使⽤or 来连接条件，否则将导致引擎放弃使⽤索引⽽进⾏全表扫描，如：5.in 和 not in 也要慎⽤，否则会导致全表扫描，如：6.下⾯的查询也将导致全表扫描：select id from t where name like ‘%李%’若要提⾼效率，可以考虑全⽂检索。7.如果在 where ⼦句中使⽤参数，也会导致全表扫描。因为SQL只有在运⾏时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运⾏时；它必须在编译时进⾏选择。然 ⽽，如果在编译时建⽴访问计划，变量的值还是未知的，因⽽⽆法作为索引选择的输⼊项。如下⾯语句将进⾏全表扫描：select id from t where num is null-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：select id from t where num=123select id from t where num=10 or num=20-- 可以这样查询：select id from t where num=10 union all select id from t where num=20123select id from t where num in(1,2,3)-- 对于连续的数值，能⽤ between 就不要⽤ in 了：select id from t where num between 1 and 31238.应尽量避免在 where ⼦句中对字段进⾏表达式操作，这将导致引擎放弃使⽤索引⽽进⾏全表扫描。如：9.应尽量避免在where⼦句中对字段进⾏函数操作，这将导致引擎放弃使⽤索引⽽进⾏全表扫描。如：10.不要在 where ⼦句中的“=”左边进⾏函数、算术运算或其他表达式运算，否则系统将可能⽆法正确使⽤索引。</code></pre><h1 id="⼗-数据库优化"><a href="#⼗-数据库优化" class="headerlink" title="⼗ 数据库优化"></a>⼗ 数据库优化</h1><h3 id="10-1-为什么要优化"><a href="#10-1-为什么要优化" class="headerlink" title="10.1 为什么要优化"></a><strong>10.1</strong> <strong>为什么要优化</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">系统的吞吐量瓶颈往往出现在数据库的访问速度上随着应⽤程序的运⾏，数据库的中的数据会越来越多，处理时间会相应变慢数据是存放在磁盘上的，读写速度⽆法和内存相⽐优化原则：减少系统瓶颈，减少资源占⽤，增加系统的反应速度。</code></pre><h3 id="10-2-数据库结构优化"><a href="#10-2-数据库结构优化" class="headerlink" title="10.2 数据库结构优化"></a><strong>10.2</strong> <strong>数据库结构优化</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">⼀个好的数据库设计⽅案对于数据库的性能往往会起到事半功倍的效果。需要考虑数据冗余、查询和更新的速度、字段的数据类型是否合理等多⽅⾯的内容。<span class="token bold"><span class="token punctuation">**</span><span class="token content">将字段很多的表分解成多个表</span><span class="token punctuation">**</span></span>select id from t where num=@num-- 可以改为强制查询使⽤索引：select id from t with(index(索引名)) where num=@num123select id from t where num/2=100-- 应改为:select id from t where num=100*2123select id from t where substring(name,1,3)=’abc’-- name以abc开头的id应改为:select id from t where name like ‘abc%’123对于字段较多的表，如果有些字段的使⽤频率很低，可以将这些字段分离出来形成新表。因为当⼀个表的数据量很⼤时，会由于使⽤频率低的字段的存在⽽变慢。<span class="token bold"><span class="token punctuation">**</span><span class="token content">增加中间表</span><span class="token punctuation">**</span></span>对于需要经常联合查询的表，可以建⽴中间表以提⾼查询效率。通过建⽴中间表，将需要通过联合查询的数据插⼊到中间表中，然后将原来的联合查询改为对中间表的查询。<span class="token bold"><span class="token punctuation">**</span><span class="token content">增加冗余字段</span><span class="token punctuation">**</span></span>设计数据表时应尽量遵循范式理论的规约，尽可能的减少冗余字段，让数据库设计看起来精致、优雅。但是，合理的加⼊冗余字段可以提⾼查询速度。表的规范化程度越⾼，表和表之间的关系越多，需要连接查询的情况也就越多，性能也就越差。<span class="token bold"><span class="token punctuation">**</span><span class="token content">注意：</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">冗余字段的值在⼀个表中修改了，就要想办法在其他表中更新，否则就会导致数据不⼀致的问题。</span><span class="token punctuation">**</span></span></code></pre><h3 id="10-3-MySQL数据库cpu飙升到500-的话他怎么处理？"><a href="#10-3-MySQL数据库cpu飙升到500-的话他怎么处理？" class="headerlink" title="10.3 MySQL数据库cpu飙升到500%的话他怎么处理？"></a>10.3 MySQL数据库cpu飙升到500%的话他怎么处理？</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">当 cpu 飙升到 500%时，先⽤操作系统命令 top 命令观察是不是 mysqld 占⽤导致的，如果不是，找出占⽤⾼的进程，并进⾏相关处理。如果是 mysqld 造成的， show processlist，看看⾥⾯跑的 session 情况，是不是有消耗资源的 sql 在运⾏。找出消耗⾼的 sql，看看执⾏计划是否准确， index 是否缺失，或者实在是数据量太⼤造成。⼀般来说，肯定要 kill 掉这些线程(同时观察 cpu 使⽤率是否下降)，等进⾏相应的调整(⽐如说加索引、改 sql、改内存参数)之后，再重新跑这些 SQL。也有可能是每个 sql 消耗资源并不多，但是突然之间，有⼤量的 session 连进来导致 cpu 飙升，这种情况就需要跟应⽤⼀起来分析为何连接数会激增，再做出相应的调整，⽐如说限制连接数等</code></pre><h3 id="10-4-⼤表怎么优化？"><a href="#10-4-⼤表怎么优化？" class="headerlink" title="10.4 ⼤表怎么优化？"></a><strong>10.4</strong> <strong>⼤表怎么优化？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">某个表有近千万数据，CRUD⽐较慢，如何优化？分库分表了是怎么做的？分表分库了有什么问题？有⽤到中间件么？他们的原理知道么？当MySQL单表记录数过⼤时，数据库的CRUD性能会明显下降，⼀些常⻅的优化措施如下：\1. <span class="token bold"><span class="token punctuation">**</span><span class="token content">限定数据的范围：</span><span class="token punctuation">**</span></span> 务必禁⽌不带任何限制数据范围条件的查询语句。⽐如：我们当⽤户在查询订单历史的时候，我们可以控制在⼀个⽉的范围内。；\2. <span class="token bold"><span class="token punctuation">**</span><span class="token content">读</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">/</span><span class="token punctuation">*</span></span>*<span class="token bold"><span class="token punctuation">**</span><span class="token content">写分离：</span><span class="token punctuation">**</span></span> 经典的数据库拆分⽅案，主库负责写，从库负责读；\3. <span class="token bold"><span class="token punctuation">**</span><span class="token content">缓存：</span><span class="token punctuation">**</span></span> 使⽤MySQL的缓存，另外对重量级、更新少的数据可以考虑使⽤应⽤级别的缓存；还有就是通过分库分表的⽅式进⾏优化，主要有垂直分表和⽔平分表1. <span class="token bold"><span class="token punctuation">**</span><span class="token content">垂直分区：</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">根据数据库⾥⾯数据表的相关性进⾏拆分。</span><span class="token punctuation">**</span></span> 例如，⽤户表中既有⽤户的登录信息⼜有⽤户的基本信息，可以将⽤户表拆分成两个单独的表，甚⾄放到单独的库做分库。<span class="token bold"><span class="token punctuation">**</span><span class="token content">简单来说垂直拆分是指数据表列的拆分，把⼀张列⽐较多的表拆分为多张表。</span><span class="token punctuation">**</span></span> 如下图所示，这样来说⼤家应该就更容易理解了。<span class="token bold"><span class="token punctuation">**</span><span class="token content">垂直拆分的优点：</span><span class="token punctuation">**</span></span> 可以使得⾏数据变⼩，在查询时减少读取的Block数，减少I/O次数。此外，垂直分区可以简化表的结构，易于维护。<span class="token bold"><span class="token punctuation">**</span><span class="token content">垂直拆分的缺点：</span><span class="token punctuation">**</span></span> 主键会出现冗余，需要管理冗余列，并会引起Join操作，可以通过在应⽤层进⾏Join来解决。此外，垂直分区会让事务变得更加复杂；垂直分表把主键和⼀些列放在⼀个表，然后把主键和另外的列放在另⼀个表中<span class="token bold"><span class="token punctuation">**</span><span class="token content">适⽤场景</span><span class="token punctuation">**</span></span>1、如果⼀个表中某些列常⽤，另外⼀些列不常⽤2、可以使数据⾏变⼩，⼀个数据⻚能存储更多数据，查询时减少I/O次数<span class="token bold"><span class="token punctuation">**</span><span class="token content">缺点</span><span class="token punctuation">**</span></span>有些分表的策略基于应⽤层的逻辑算法，⼀旦逻辑算法改变，整个分表逻辑都会改变，扩展性较差对于应⽤层来说，逻辑算法增加开发成本管理冗余列，查询所有数据需要join操作\2. <span class="token bold"><span class="token punctuation">**</span><span class="token content">⽔平分区：</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">保持数据表结构不变，通过某种策略存储数据分⽚。这样每⼀⽚数据分散到不同的表或者库中，达到了分布式</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">的⽬的。 ⽔平拆分可以⽀撑⾮常⼤的数据量。</span><span class="token punctuation">**</span></span>⽔平拆分是指数据表⾏的拆分，表的⾏数超过200万⾏时，就会变慢，这时可以把⼀张的表的数据拆成多张表来存放。举个例⼦：我们可以将⽤户信息表拆分成多个⽤户信息表，这样就可以避免单⼀表数据量过⼤对性能造成影响。⽔品拆分可以⽀持⾮常⼤的数据量。需要注意的⼀点是:分表仅仅是解决了单⼀表数据过⼤的问题，但由于表的数据还是在同⼀台机器上，其实对于提升MySQL并发能⼒没有什么意义，所以 <span class="token bold"><span class="token punctuation">**</span><span class="token content">⽔平拆分最好分库</span><span class="token punctuation">**</span></span> 。⽔平拆分能够 <span class="token bold"><span class="token punctuation">**</span><span class="token content">⽀持⾮常⼤的数据量存储，应⽤端改造也少</span><span class="token punctuation">**</span></span>，但 <span class="token bold"><span class="token punctuation">**</span><span class="token content">分⽚事务难以解决</span><span class="token punctuation">**</span></span> ，跨界点Join性能较差，逻辑复杂。《Java⼯程师修炼之道》的作者推荐 <span class="token bold"><span class="token punctuation">**</span><span class="token content">尽量不要对数据进⾏分⽚，因为拆分会带来逻辑、部署、运维的各种复杂</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">度</span><span class="token punctuation">**</span></span> ，⼀般的数据表在优化得当的情况下⽀撑千万以下的数据量是没有太⼤问题的。如果实在要分⽚，尽量选择客户端分⽚架构，这样可以减少⼀次和中间件的⽹络I/O。⽔平分表：表很⼤，分割后可以降低在查询时需要读的数据和索引的⻚数，同时也降低了索引的层数，提⾼查询次数<span class="token bold"><span class="token punctuation">**</span><span class="token content">适⽤场景</span><span class="token punctuation">**</span></span>1、表中的数据本身就有独⽴性，例如表中分表记录各个地区的数据或者不同时期的数据，特别是有些数据常⽤，有些不常⽤。2、需要把数据存放在多个介质上。<span class="token bold"><span class="token punctuation">**</span><span class="token content">⽔平切分的缺点</span><span class="token punctuation">**</span></span>1、给应⽤增加复杂度，通常查询时需要多个表名，查询所有数据都需UNION操作2、在许多数据库应⽤中，这种复杂度会超过它带来的优点，查询时会增加读⼀个索引层的磁盘次数<span class="token bold"><span class="token punctuation">**</span><span class="token content">下⾯补充⼀下数据库分⽚的两种常⻅⽅案：</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">客户端代理： 分⽚逻辑在应⽤端，封装在</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">jar</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">包中，通过修改或者封装</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>*JDBC**<span class="token bold"><span class="token punctuation">**</span><span class="token content">层来实现。</span><span class="token punctuation">**</span></span> 当当⽹的<span class="token bold"><span class="token punctuation">**</span><span class="token content">Sharding-JDBC</span><span class="token punctuation">**</span></span> 、阿⾥的TDDL是两种⽐较常⽤的实现。<span class="token bold"><span class="token punctuation">**</span><span class="token content">中间件代理： 在应⽤和数据中间加了⼀个代理层。分⽚逻辑统⼀维护在中间件服务中。</span><span class="token punctuation">**</span></span> 我们现在谈的<span class="token bold"><span class="token punctuation">**</span><span class="token content">Mycat</span><span class="token punctuation">**</span></span> 、360的Atlas、⽹易的DDB等等都是这种架构的实现。<span class="token bold"><span class="token punctuation">**</span><span class="token content">分库分表后⾯临的问题</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">事务⽀持</span><span class="token punctuation">**</span></span> 分库分表后，就成了分布式事务了。如果依赖数据库本身的分布式事务管理功能去执⾏事务，将付出⾼昂的性能代价； 如果由应⽤程序去协助控制，形成程序逻辑上的事务，⼜会造成编程⽅⾯的负担。<span class="token bold"><span class="token punctuation">**</span><span class="token content">跨库</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">join</span><span class="token punctuation">*</span></span>*只要是进⾏切分，跨节点Join的问题是不可避免的。但是良好的设计和切分却可以减少此类情况的发⽣。解决这⼀问题的普遍做法是分两次查询实现。在第⼀次查询的结果集中找出关联数据的id,根据这些id发起第⼆次请求得到关联数据。 分库分表⽅案产品<span class="token bold"><span class="token punctuation">**</span><span class="token content">跨节点的</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">count,order by,group by</span><span class="token punctuation">*</span></span>*<span class="token bold"><span class="token punctuation">**</span><span class="token content">以及聚合函数问题</span><span class="token punctuation">**</span></span> 这些是⼀类问题，因为它们都需要基于全部数据集合进⾏计算。多数的代理都不会⾃动处理合并⼯作。解决⽅案：与解决跨节点join问题的类似，分别在各个节点上得到结果后在应⽤程序端进⾏合并。和join不同的是每个结点的查询可以并⾏执⾏，因此很多时候它的速度要⽐单⼀⼤表快很多。但如果结果集很⼤，对应⽤程序内存的消耗是⼀个问题。<span class="token bold"><span class="token punctuation">**</span><span class="token content">数据迁移，容量规划，扩容等问题</span><span class="token punctuation">**</span></span> 来⾃淘宝综合业务平台团队，它利⽤对2的倍数取余具有向前兼容的特性（如对4取余得1的数对2取余也是1）来分配数据，避免了⾏级别的数据迁移，但是依然需要进⾏表级别的迁移，同时对扩容规模和分表数量都有限制。总得来说，这些⽅案都不是⼗分的理想，多多少少都存在⼀些缺点，这也从⼀个侧⾯反映出了Sharding扩容的难度。<span class="token bold"><span class="token punctuation">**</span><span class="token content">ID</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">问题</span><span class="token punctuation">*</span></span>*⼀旦数据库被切分到多个物理结点上，我们将不能再依赖数据库⾃身的主键⽣成机制。⼀⽅⾯，某个分区数据库⾃⽣成的ID⽆法保证在全局上是唯⼀的；另⼀⽅⾯，应⽤程序在插⼊数据之前需要先获得ID,以便进⾏SQL路 由. ⼀些常⻅的主键⽣成策略<span class="token bold"><span class="token punctuation">**</span><span class="token content">UUID</span><span class="token punctuation">**</span></span> 使⽤UUID作主键是最简单的⽅案，但是缺点也是⾮常明显的。由于UUID⾮常的⻓，除占⽤⼤量存储空间外，最主要的问题是在索引上，在建⽴索引和基于索引进⾏查询时都存在性能问题。 <span class="token bold"><span class="token punctuation">**</span><span class="token content">Twitter</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">的分布式⾃增</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">ID</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>*算法**<span class="token bold"><span class="token punctuation">**</span><span class="token content">Snowflake</span><span class="token punctuation">**</span></span> 在分布式系统中，需要⽣成全局UID的场合还是⽐较多的，twitter的snowflake解决了这种需求，实现也还是很简单的，除去配置信息，核⼼代码就是毫秒级时间41位 机器ID 10位 毫秒内序列12位。跨分⽚的排序分⻚般来讲，分⻚时需要按照指定字段进⾏排序。当排序字段就是分⽚字段的时候，我们通过分⽚规则可以⽐较容易定位到指定的分⽚，⽽当排序字段⾮分⽚字段的时候，情况就会变得⽐较复杂了。为了最终结果的准确性，我们需要在不同的分⽚节点中将数据进⾏排序并返回，并将不同分⽚返回的结果集进⾏汇总和再次排序</code></pre><h3 id="10-5-MySQL的复制原理以及流程"><a href="#10-5-MySQL的复制原理以及流程" class="headerlink" title="10.5 MySQL的复制原理以及流程"></a>10.5 MySQL的复制原理以及流程</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">主从复制：将主数据库中的DDL和DML操作通过⼆进制⽇志（BINLOG）传输到从数据库上，然后将这些⽇志重新执⾏（重做）；从⽽使得从数据库的数据与主数据库保持⼀致。<span class="token bold"><span class="token punctuation">**</span><span class="token content">主从复制的作⽤</span><span class="token punctuation">**</span></span>\1. 主数据库出现问题，可以切换到从数据库。\2. 可以进⾏数据库层⾯的读写分离。\3. 可以在从数据库上进⾏⽇常备份。<span class="token bold"><span class="token punctuation">**</span><span class="token content">MySQL</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">主从复制解决的问题</span><span class="token punctuation">*</span></span>*数据分布：随意开始或停⽌复制，并在不同地理位置分布数据备份负载均衡：降低单个服务器的压⼒⾼可⽤和故障切换：帮助应⽤程序避免单点失败升级测试：可以⽤更⾼版本的MySQL作为从库<span class="token bold"><span class="token punctuation">**</span><span class="token content">MySQL</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">主从复制⼯作原理</span><span class="token punctuation">*</span></span>*在主库上把数据更⾼记录到⼆进制⽇志从库将主库的⽇志复制到⾃⼰的中继⽇志从库读取中继⽇志的事件，将其重放到从库数据中<span class="token bold"><span class="token punctuation">**</span><span class="token content">基本原理流程，</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">3</span><span class="token punctuation">*</span></span>*<span class="token bold"><span class="token punctuation">**</span><span class="token content">个线程以及之间的关联</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">主</span><span class="token punctuation">**</span></span>：binlog线程——记录下所有改变了数据库数据的语句，放进master上的binlog中；<span class="token bold"><span class="token punctuation">**</span><span class="token content">从</span><span class="token punctuation">**</span></span>：io线程——在使⽤start slave 之后，负责从master上拉取 binlog 内容，放进⾃⼰的relay log中；<span class="token bold"><span class="token punctuation">**</span><span class="token content">从</span><span class="token punctuation">**</span></span>：sql执⾏线程——执⾏relay log中的语句；<span class="token bold"><span class="token punctuation">**</span><span class="token content">复制过程</span><span class="token punctuation">**</span></span>Binary log：主数据库的⼆进制⽇志Relay log：从服务器的中继⽇志第⼀步：master在每个事务更新数据完成之前，将该操作记录串⾏地写⼊到binlog⽂件中。第⼆步：salve开启⼀个I/O Thread，该线程在master打开⼀个普通连接，主要⼯作是binlog dump process。如果读取的进度已经跟上了master，就进⼊睡眠状态并等待master产⽣新的事件。I/O线程最终的⽬的是将这些事件写⼊到中继⽇志中。第三步：SQL Thread会读取中继⽇志，并顺序执⾏该⽇志中的SQL事件，从⽽与主数据库中的数据保持⼀致。</code></pre><h3 id="10-6-读写分离有哪些解决⽅案？"><a href="#10-6-读写分离有哪些解决⽅案？" class="headerlink" title="10.6 读写分离有哪些解决⽅案？"></a><strong>10.6</strong> <strong>读写分离有哪些解决⽅案？</strong></h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">读写分离是依赖于主从复制，⽽主从复制⼜是为读写分离服务的。因为主从复制要求 slave 不能写只能读（如果对 slave 执⾏写操作，那么 show slave status 将会呈现 Slave_SQL_Running=NO ，此时你需要按照前⾯提到的⼿动同步⼀下 slave ）。<span class="token bold"><span class="token punctuation">**</span><span class="token content">⽅案⼀</span><span class="token punctuation">**</span></span>使⽤mysql-proxy代理优点：直接实现读写分离和负载均衡，不⽤修改代码，master和slave⽤⼀样的帐号，mysql官⽅不建议实际⽣产中使⽤缺点：降低性能， 不⽀持事务<span class="token bold"><span class="token punctuation">**</span><span class="token content">⽅案⼆</span><span class="token punctuation">**</span></span>使⽤AbstractRoutingDataSource+aop+annotation在dao层决定数据源。如果采⽤了mybatis， 可以将读写分离放在ORM层，⽐如mybatis可以通过mybatis plugin拦截sql语句，所有的insert/update/delete都访问master库，所有的select 都访问salve库，这样对于dao层都是透明。 plugin实现时可以通过注解或者分析语句是读写⽅法来选定主从库。不过这样依然有⼀个问题， 也就是不⽀持事务， 所以我们还需要重写⼀下DataSourceTransactionManager， 将read-only的事务扔进读库， 其余的有读有写的扔进写库。<span class="token bold"><span class="token punctuation">**</span><span class="token content">⽅案三</span><span class="token punctuation">**</span></span>使⽤AbstractRoutingDataSource+aop+annotation在service层决定数据源，可以⽀持事务.缺点：类内部⽅法通过this.xx()⽅式相互调⽤时，aop不会进⾏拦截，需进⾏特殊处理。</code></pre><h3 id="10-7-备份计划mysqldump以及xtranbackup的实现原理"><a href="#10-7-备份计划mysqldump以及xtranbackup的实现原理" class="headerlink" title="10.7 备份计划mysqldump以及xtranbackup的实现原理"></a>10.7 备份计划mysqldump以及xtranbackup的实现原理</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">(1)</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">备份计划</span><span class="token punctuation">*</span></span>*视库的⼤⼩来定，⼀般来说 100G 内的库，可以考虑使⽤ mysqldump 来做，因为 mysqldump更加轻巧灵活，备份时间选在业务低峰期，可以每天进⾏都进⾏全量备份(mysqldump 备份出来的⽂件⽐较⼩，压缩之后更⼩)。100G 以上的库，可以考虑⽤ xtranbackup 来做，备份速度明显要⽐ mysqldump 要快。⼀般是选择⼀周⼀个全备，其余每天进⾏增量备份，备份时间为业务低峰期。<span class="token bold"><span class="token punctuation">**</span><span class="token content">(2)</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">备份恢复时间</span><span class="token punctuation">*</span></span>*物理备份恢复快，逻辑备份恢复慢这⾥跟机器，尤其是硬盘的速率有关系，以下列举⼏个仅供参考20G的2分钟（mysqldump）80G的30分钟(mysqldump)111G的30分钟（mysqldump)288G的3⼩时（xtra)3T的4⼩时（xtra)逻辑导⼊时间⼀般是备份时间的5倍以上<span class="token bold"><span class="token punctuation">**</span><span class="token content">(3)</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">备份恢复失败如何处理</span><span class="token punctuation">*</span></span>*⾸先在恢复之前就应该做⾜准备⼯作，避免恢复的时候出错。⽐如说备份之后的有效性检查、权限检查、空间检查等。如果万⼀报错，再根据报错的提示来进⾏相应的调整。<span class="token bold"><span class="token punctuation">**</span><span class="token content">(4)mysqldump</span><span class="token punctuation">**</span></span>*<span class="token italic"><span class="token punctuation">*</span><span class="token content">和</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">xtrabackup</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>*实现原理**mysqldumpmysqldump 属于逻辑备份。加⼊–single-transaction 选项可以进⾏⼀致性备份。后台进程会先设置 session 的事务隔离级别为 RR(SET SESSION TRANSACTION ISOLATION LEVELREPEATABLE READ)，之后显式开启⼀个事务(START TRANSACTION /<span class="token italic"><span class="token punctuation">*</span><span class="token content">!40100 WITH CONSISTENTSNAPSHOT </span><span class="token punctuation">*</span></span>/)，这样就保证了该事务⾥读到的数据都是事务事务时候的快照。之后再把表的数据读取出来。如果加上–master-data=1 的话，在刚开始的时候还会加⼀个数据库的读锁(FLUSH TABLES WITH READ LOCK),等开启事务后，再记录下数据库此时 binlog 的位置(showmasterstatus)，⻢上解锁，再读取表的数据。等所有的数据都已经导完，就可以结束事务Xtrabackup:xtrabackup 属于物理备份，直接拷⻉表空间⽂件，同时不断扫描产⽣的 redo ⽇志并保存下来。最后完成 innodb的备份后，会做⼀个 flush engine logs 的操作(⽼版本在有 bug，在5.6 上不做此操作会丢数据)，确保所有的 redolog 都已经落盘(涉及到事务的两阶段提交概念，因为 xtrabackup 并不拷⻉ binlog，所以必须保证所有的 redo log 都落盘，否则可能会丢最后⼀组提交事务的数据)。这个时间点就是 innodb 完成备份的时间点，数据⽂件虽然不是⼀致性的，但是有这段时间的 redo 就可以让数据⽂件达到⼀致性(恢复的时候做的事情)。然后还需要 flush tables with read lock，把 myisam 等其他引擎的表给备份出来，备份完后解锁。这样就做到了完美的热备。</code></pre><h3 id="10-8-数据表损坏的修复⽅式有哪些？"><a href="#10-8-数据表损坏的修复⽅式有哪些？" class="headerlink" title="10.8  数据表损坏的修复⽅式有哪些？"></a>10.8  数据表损坏的修复⽅式有哪些？</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">使⽤ myisamchk 来修复，具体步骤：1）修复前将mysql服务停⽌。2）打开命令⾏⽅式，然后进⼊到mysql的/bin⽬录。3）执⾏myisamchk –recover 数据库所在路径/*.MYI使⽤repair table 或者 OPTIMIZE table命令来修复，REPAIR TABLE table_name 修复表 OPTIMIZE TABLEtable_name 优化表 REPAIR TABLE ⽤于修复被破坏的表。 OPTIMIZE TABLE ⽤于回收闲置的数据库空间，当表上的数据⾏被删除时，所占据的磁盘空间并没有⽴即被回收，使⽤了OPTIMIZE TABLE命令后这些空间将被回收，并且对磁盘上的数据⾏进⾏重排（注意：是磁盘上，⽽⾮数据库）</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL面试重点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文搞懂各种锁</title>
      <link href="/2022/06/16/%E9%94%81/"/>
      <url>/2022/06/16/%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>各种锁</p><span id="more"></span><h2 id="一-为什么会有锁机制"><a href="#一-为什么会有锁机制" class="headerlink" title="一 为什么会有锁机制"></a>一 为什么会有锁机制</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">1</span>  在多线程情况下共享操作同一个变量时，会导致数据不一致，出现并发安全问题，所以通过锁机制来保证数据的准确和唯一<span class="token number">2</span>  通过锁将可能出现问题的代码用锁对象锁起来<span class="token punctuation">,</span>被锁起来的代码就叫同步代码块<span class="token punctuation">,</span>同一时间只能有一个线程来访问这个同步代码块</code></pre><h2 id="二-什么是临界区"><a href="#二-什么是临界区" class="headerlink" title="二 什么是临界区"></a>二 什么是临界区</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">1</span> 每个进程中访问临界资源的那段代码称为临界区（criticalsection）<span class="token number">2</span> 通过锁机制，保证每次只允许一个进程进入临界区，进入后，不允许其他进程进入</code></pre><h2 id="三-操作系统的各种锁"><a href="#三-操作系统的各种锁" class="headerlink" title="三 操作系统的各种锁"></a>三 操作系统的各种锁</h2><h3 id="3-1-互斥锁"><a href="#3-1-互斥锁" class="headerlink" title="3.1 互斥锁"></a>3.1 互斥锁</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 互斥锁</span>互斥锁是一种简单的加锁的方法来控制对共享资源的访问，互斥锁只有两种状态<span class="token punctuation">,</span>即上锁<span class="token punctuation">(</span> lock <span class="token punctuation">)</span>和解锁<span class="token punctuation">(</span>unlock<span class="token punctuation">)</span>，如果互斥量已经上锁，调用线程会阻塞，直到互斥量被解锁。在完成了对共享资源的访问后，要对互斥量进行解锁<span class="token comment">// 互斥锁特点</span><span class="token number">1.</span> 原子性：把一个互斥量锁定为一个原子操作，操作系统保证了如果一个线程锁定了一个互斥量，没有其他线程在同一时间可以成功锁定这个互斥量；<span class="token number">2.</span> 唯一性：如果一个线程锁定了一个互斥量，在它解除锁定之前，没有其他线程可以锁定这个互斥量；<span class="token number">3.</span> 非繁忙等待：如果一个线程已经锁定了一个互斥量，第二个线程又试图去锁定这个互斥量，则第二个线程将被挂起（不占用任何cpu资源），直到第一个线程解除对这个互斥量的锁定为止，第二个线程则被唤醒并继续执行，同时锁定这个互斥量<span class="token comment">// 注意</span>Python<span class="token punctuation">,</span>Go<span class="token punctuation">,</span>Java都支持互斥锁</code></pre><h3 id="3-2-自旋锁"><a href="#3-2-自旋锁" class="headerlink" title="3.2 自旋锁"></a>3.2 自旋锁</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 自旋锁</span>自旋锁与互斥量功能一样，唯一一点不同的就是互斥量阻塞后休眠让出cpu，而自旋锁阻塞后不会让出cpu，会一直忙等待，直到得到锁，原地打转自旋锁在用户态使用的比较少，在内核使用的比较多！自旋锁的使用场景：锁的持有时间比较短，或者说小于<span class="token number">2</span>次上下文切换的时间。<span class="token comment">// 自旋锁特点</span><span class="token number">1</span> 某个协程持有锁时间长，等待的协程一直在循环等待，消耗CPU资源。<span class="token number">2</span> 不公平，有可能存在有的协程等待时间过程，出现线程饥饿（这里就是协程饥饿）<span class="token comment">// 注意</span>Python<span class="token punctuation">,</span>Go不支持自旋锁Java支持自旋锁</code></pre><p><strong>Go实现自旋锁</strong></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">/*1 锁也是1个变量，初值设为0；2 1个协程将锁原子性的置为1；3 操作变量n；4 操作完成后，将锁原子性的置为0，释放锁。在1个协程获取锁时，另一个协程一直尝试，直到能够获取锁（不断循环），这就是自旋锁*/</span><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"sync/atomic"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token comment">// Spin是一个锁变量，实现了Lock和Unlock方法</span><span class="token keyword">type</span> Spin <span class="token builtin">int32</span><span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>Spin<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 原子交换，0换成1</span>    <span class="token keyword">for</span> <span class="token operator">!</span>atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>Spin<span class="token punctuation">)</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 原子置零</span>    atomic<span class="token punctuation">.</span><span class="token function">StoreInt32</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Locker <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> l Locker    l <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Spin<span class="token punctuation">)</span>    <span class="token keyword">var</span> n <span class="token builtin">int</span>    <span class="token comment">// 两个协程</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token function">routine</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token number">200</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">routine</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> v <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> l Locker<span class="token punctuation">,</span> d time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 实现自旋加锁</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            l<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">defer</span> l<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">*</span>v<span class="token operator">++</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">*</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-可重入锁-递归锁"><a href="#3-3-可重入锁-递归锁" class="headerlink" title="3.3 可重入锁(递归锁)"></a>3.3 可重入锁(递归锁)</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 可重入锁</span>为了解决互斥锁导致的死锁问题<span class="token punctuation">(</span>哲学家吃面问题<span class="token punctuation">)</span>，引入可重入锁又叫递归锁可重入内部维护着一个锁和一个计数器，计数器记录了获取锁的次数，从而使得资源可以被同一个线程多次获取，直到一个线程所有的获取都被释放，其他的线程才能获得资源<span class="token comment">// 注意</span>Go不支持可重入锁 <span class="token comment">//https://blog.csdn.net/qq_39397165/article/details/117433641</span>Python<span class="token punctuation">,</span>Java支持可重入锁</code></pre><h3 id="3-4-读写锁"><a href="#3-4-读写锁" class="headerlink" title="3.4 读写锁"></a>3.4 读写锁</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 读写锁</span>读写锁允许更改的并行性，写的串行性，也叫共享互斥锁。互斥量要么是锁住状态，要么就是不加锁状态，而且一次只有一个线程可以对其加锁。读写锁可以有<span class="token number">3</span>种状态：读模式下加锁状态、写模式加锁状态、不加锁状态。一次只有一个线程可以占有写模式的读写锁，但是多个线程可以同时占有读模式的读写锁（允许多个线程读但只允许一个线程写）<span class="token comment">// 读写锁特点</span><span class="token number">1</span> 如果有其它线程读数据，则允许其它线程执行读操作，但不允许写操作；<span class="token number">2</span> 如果有其它线程写数据，则其它线程都不允许读、写操作<span class="token comment">// 注意</span>Python不支持读写，自行实现：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>cnblogs<span class="token punctuation">.</span>com<span class="token operator">/</span>LuoboLiam<span class="token operator">/</span>p<span class="token operator">/</span><span class="token number">15338632</span><span class="token punctuation">.</span>htmlJava<span class="token punctuation">,</span>Go支持读写锁</code></pre><h3 id="3-5-信号量-Semaphore"><a href="#3-5-信号量-Semaphore" class="headerlink" title="3.5 信号量(Semaphore)"></a>3.5 信号量(Semaphore)</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 信号量</span>信号量可以理解为多把锁，同时允许多个线程来更改数据信号量是一个计数器，可以用来控制多个进程对共享资源的访问信号量广泛用于进程或线程间的同步和互斥，信号量本质上是一个非负的整数计数器，它被用来控制对公共资源的访问<span class="token comment">// 注意</span>Go不支持信号量，可以自行实现：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>studygolang<span class="token punctuation">.</span>com<span class="token operator">/</span>articles<span class="token operator">/</span><span class="token number">25382</span>?fr<span class="token operator">=</span>sidebarPython<span class="token punctuation">,</span>Java支持信号量</code></pre><h3 id="3-6-条件变量-Condition"><a href="#3-6-条件变量-Condition" class="headerlink" title="3.6 条件变量(Condition)"></a>3.6 条件变量(Condition)</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 条件变量</span>线程等待，只有满足某条件时，n个线程才执行条件变量用来自动阻塞线程，直到某特殊情况发生为止。条件变量使我们可以睡眠等待某种条件出现。条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：一个线程等待<span class="token string">"条件变量的条件成立"</span>而挂起；另一个线程使 “条件成立”（给出条件成立信号）<span class="token comment">// 注意</span>Go<span class="token punctuation">,</span>Python<span class="token punctuation">,</span>Java都支持条件变量</code></pre><h3 id="3-7-其他"><a href="#3-7-其他" class="headerlink" title="3.7 其他"></a>3.7 其他</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 公平锁 / 非公平锁</span><span class="token number">1</span> 公平锁：是指多个线程按照申请锁的顺序来获取锁。<span class="token number">2</span> 非公平锁<span class="token punctuation">:</span>是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁。有可能，会造成优先级反转或者饥饿现象<span class="token comment">// 可重入锁 / 不可重入锁</span><span class="token number">1</span> 可重入锁：指的是可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生死锁，这样的锁就叫做可重入锁<span class="token number">2</span> 不可重入锁：与可重入锁相反，不可递归调用，递归调用就发生死锁。<span class="token comment">// 独享锁 / 共享锁</span><span class="token number">1</span> 独享锁：该锁每一次只能被一个线程所持有。<span class="token number">2</span> 共享锁：该锁可被多个线程共有<span class="token comment">// 互斥锁 / 读写锁</span><span class="token number">1</span> 互斥锁<span class="token punctuation">:</span>在访问共享资源之前对进行加锁操作，在访问完成之后进行解锁操作。 加锁后，任何其他试图再次加锁的线程会被阻塞，直到当前进程解锁<span class="token number">2</span> 读写锁：既是互斥锁，又是共享锁，read模式是共享，write是互斥<span class="token punctuation">(</span>排它锁<span class="token punctuation">)</span>的<span class="token comment">// 分段锁</span>分段锁<span class="token punctuation">:</span> 其实是一种锁的设计，并不是具体的一种锁容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争<span class="token comment">// 偏向锁 / 轻量级锁 / 重量级锁</span><span class="token number">1</span> 偏向锁<span class="token punctuation">:</span>是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。轻量级<span class="token number">2</span> 轻量级锁<span class="token punctuation">:</span>是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。重量级锁<span class="token number">3</span> 重量级锁<span class="token punctuation">:</span> 是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低</code></pre><h2 id="四-乐观锁-x2F-悲观锁"><a href="#四-乐观锁-x2F-悲观锁" class="headerlink" title="四 乐观锁/悲观锁"></a>四 乐观锁/悲观锁</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 悲观锁</span>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁<span class="token comment">//乐观锁</span>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁</code></pre><h2 id="五-分布式锁"><a href="#五-分布式锁" class="headerlink" title="五 分布式锁"></a>五 分布式锁</h2><pre class="language-go" data-language="go"><code class="language-go">在分布式系统中访问共享资源就需要一种互斥机制，来防止彼此之间的互相干扰，以保证一致性，在这种情况下，就需要用到分布式锁为了保证一个方法或属性在高并发情况下的同一时间只能被同一个线程执行，在传统单体应用单机部署的情况下，可以使用并发处理相关的功能进行互斥控制。但是，随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的应用并不能提供分布式锁的能力。为了解决这个问题就需要一种跨机器的互斥机制来控制共享资源的访问，这就是分布式锁<span class="token comment">// 分布式锁的多种实现方式</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>cnblogs<span class="token punctuation">.</span>com<span class="token operator">/</span>liuqingzheng<span class="token operator">/</span>p<span class="token operator">/</span><span class="token number">11080501</span><span class="token punctuation">.</span>html</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch-倒排索引</title>
      <link href="/2022/06/05/06-Elasticsearch%E4%B9%8B-%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
      <url>/2022/06/05/06-Elasticsearch%E4%B9%8B-%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>倒排索引</p><span id="more"></span><p><strong>06-Elasticsearch之-倒排索引</strong></p><h2 id="一-倒排索引是什么"><a href="#一-倒排索引是什么" class="headerlink" title="一 倒排索引是什么"></a>一 倒排索引是什么</h2><p>倒排索引源于实际应用中需要根据属性的值来查找记录，这种索引表中的每一个项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而成为倒排索引。带有倒排索引的文件我们称之为倒排索引文件，简称倒排文件</p><h2 id="二-举例"><a href="#二-举例" class="headerlink" title="二 举例"></a>二 举例</h2><p>例如有如下三个文件：</p><p>文件A：通过Python django搭建网站</p><p>文件B：通过Python scrapy爬取网站数据</p><p>文件C：scrapy-redis分布式爬虫</p><p>现在我们要查询，带有Python的文件，正常是对每个文件进行遍历，每个文件遍历一次，如果文件特别大，每个文件有一亿个字符，总共有一亿各文件，每个我们都要遍历，非常消耗资源</p><p>在存储文件之前，先对文件进行分析，将文件分词，对分词建立索引，例如下面一句话</p><p>1 今天是星期天我们出去玩</p><p>2 明天是星期天，放假</p><p>3 今天天气很晴朗</p><p>4 xxx</p><p>5 他们出去玩了</p><table><thead><tr><th>关键词</th><th>文章</th></tr></thead><tbody><tr><td>今天</td><td>文章1，文章3</td></tr><tr><td>星期天</td><td>文章1，文章2</td></tr><tr><td>出去玩</td><td>文章5，文章1</td></tr></tbody></table><p>实际上es在做存储的时候，更详细，如下表</p><table><thead><tr><th>关键词</th><th>文章</th></tr></thead><tbody><tr><td>今天</td><td>(文章1,&lt;2，10&gt;,2) (文章3,&lt;8&gt;,1)</td></tr><tr><td>星期天</td><td>(文章2,&lt;12,25,100&gt;,3)</td></tr><tr><td>出去玩</td><td>(文章5,&lt;11,24,89&gt;,3)(文章1,&lt;8，19&gt;,2)</td></tr></tbody></table><p>今天出现在哪个文章，出现的位置和出现的次数</p><h2 id="三-倒排索引待解决的问题"><a href="#三-倒排索引待解决的问题" class="headerlink" title="三 倒排索引待解决的问题"></a>三 倒排索引待解决的问题</h2><p>1 大小写转换问题，如python和Python应该为同一个词</p><p>2 词干抽取，looking和look应该处理为同一个词</p><p>3 分词，如 屏蔽系统 是屏蔽 和系统两个词还是 为屏蔽系统一个词</p><p>4 倒排索引文件过大，需要压缩编码</p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch-倒排索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch-映射管理</title>
      <link href="/2022/06/05/08-Elasticsearch%E4%B9%8B-%E6%98%A0%E5%B0%84%E7%AE%A1%E7%90%86/"/>
      <url>/2022/06/05/08-Elasticsearch%E4%B9%8B-%E6%98%A0%E5%B0%84%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>映射管理</p><span id="more"></span><p><strong>08-Elasticsearch之-映射管理</strong></p><p>在Elasticsearch 6.0.0或更高版本中创建的索引只包含一个mapping type。 在5.x中使用multiple mapping types创建的索引将继续像以前一样在Elasticsearch 6.x中运行。 Mapping types将在Elasticsearch 7.0.0中完全删除</p><h2 id="一-映射介绍"><a href="#一-映射介绍" class="headerlink" title="一 映射介绍"></a>一 映射介绍</h2><p>在创建索引的时候，可以预先定义字段的类型及相关属性</p><p>Es会根据Json数据源的基础类型，猜测你想要映射的字段，将输入的数据转变成可以搜索的索引项。</p><p>Mapping是我们自己定义的字段数据类型，同时告诉es如何索引数据及是否可以被搜索</p><p>作用：会让索引建立的更加细致和完善</p><h3 id="1-1-字段数据类型"><a href="#1-1-字段数据类型" class="headerlink" title="1.1 字段数据类型"></a>1.1 字段数据类型</h3><p>string类型：text，keyword</p><p>数字类型：long，integer，short，byte，double，float</p><p>日期类型：data</p><p>布尔类型：boolean</p><p>binary类型：binary</p><p>复杂类型：object（实体，对象），nested（列表）</p><p>geo类型：geo-point，geo-shape（地理位置）</p><p>专业类型：ip，competion（搜索建议）</p><h3 id="1-2-映射参数"><a href="#1-2-映射参数" class="headerlink" title="1.2 映射参数"></a>1.2 映射参数</h3><table><thead><tr><th>属性</th><th>描述</th><th>适合类型</th></tr></thead><tbody><tr><td>store</td><td>值为yes表示存储，no表示不存储，默认为yes</td><td>all</td></tr><tr><td>index</td><td>yes表示分析，no表示不分析，默认为true</td><td>text</td></tr><tr><td>null_value</td><td>如果字段为空，可以设置一个默认值，比如”NA”（传过来为空，不能搜索，na可以搜索）</td><td>all</td></tr><tr><td>analyzer</td><td>可以设置索引和搜索时用的分析器，默认使用的是standard分析器，还可以使用whitespace，simple。都是英文分析器</td><td>all</td></tr><tr><td>include_in_all</td><td>默认es为每个文档定义一个特殊域_all,它的作用是让每个字段都被搜索到，如果想让某个字段不被搜索到，可以设置为false</td><td>all</td></tr><tr><td>format</td><td>时间格式字符串模式</td><td>date</td></tr></tbody></table><h2 id="二-创建索引"><a href="#二-创建索引" class="headerlink" title="二 创建索引"></a>二 创建索引</h2><p>text类型会取出词做倒排索引,keyword不会被分词，原样存储，原样匹配</p><p>mapping类型一旦确定，以后就不能修改了</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#6.x的版本没问题</span>PUT books<span class="token punctuation">{</span>  <span class="token string">"mappings"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"book"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token string">"properties"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">"title"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>         <span class="token string">"analyzer"</span><span class="token punctuation">:</span> <span class="token string">"ik_max_word"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"price"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"integer"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"addr"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"keyword"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"company"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token string">"properties"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"company_addr"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"employee_count"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"integer"</span><span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"publish_date"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"date"</span><span class="token punctuation">,</span><span class="token string">"format"</span><span class="token punctuation">:</span><span class="token string">"yyy-MM-dd"</span><span class="token punctuation">}</span>             <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>7.x版本以后</p><pre class="language-python" data-language="python"><code class="language-python">PUT books<span class="token punctuation">{</span>  <span class="token string">"mappings"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"properties"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token string">"title"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token string">"analyzer"</span><span class="token punctuation">:</span> <span class="token string">"ik_max_word"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"price"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"integer"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"addr"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"keyword"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"company"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">"properties"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">"company_addr"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">"employee_count"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"integer"</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"publish_date"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"date"</span><span class="token punctuation">,</span><span class="token string">"format"</span><span class="token punctuation">:</span><span class="token string">"yyy-MM-dd"</span><span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>插入数据测试：</p><pre class="language-python" data-language="python"><code class="language-python">PUT books<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">{</span>  <span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">"大头儿子小偷爸爸"</span><span class="token punctuation">,</span>  <span class="token string">"price"</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">"addr"</span><span class="token punctuation">:</span><span class="token string">"北京天安门"</span><span class="token punctuation">,</span>  <span class="token string">"company"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"我爱北京天安门"</span><span class="token punctuation">,</span>    <span class="token string">"company_addr"</span><span class="token punctuation">:</span><span class="token string">"我的家在东北松花江傻姑娘"</span><span class="token punctuation">,</span>    <span class="token string">"employee_count"</span><span class="token punctuation">:</span><span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"publish_date"</span><span class="token punctuation">:</span><span class="token string">"2019-08-19"</span><span class="token punctuation">}</span><span class="token comment">#测试数据2</span>PUT books<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">{</span>  <span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">"白雪公主和十个小矮人"</span><span class="token punctuation">,</span>  <span class="token string">"price"</span><span class="token punctuation">:</span><span class="token string">"99"</span><span class="token punctuation">,</span> <span class="token comment">#写字符串会自动转换</span>  <span class="token string">"addr"</span><span class="token punctuation">:</span><span class="token string">"黑暗森里"</span><span class="token punctuation">,</span>  <span class="token string">"company"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"我的家乡在上海"</span><span class="token punctuation">,</span>    <span class="token string">"company_addr"</span><span class="token punctuation">:</span><span class="token string">"朋友一生一起走"</span><span class="token punctuation">,</span>    <span class="token string">"employee_count"</span><span class="token punctuation">:</span><span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"publish_date"</span><span class="token punctuation">:</span><span class="token string">"2018-05-19"</span><span class="token punctuation">}</span></code></pre><h2 id="三-查看索引"><a href="#三-查看索引" class="headerlink" title="三 查看索引"></a>三 查看索引</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#查看books索引的mapping</span>GET books<span class="token operator">/</span>_mapping<span class="token comment">#获取所有的mapping</span>GET _all<span class="token operator">/</span>_mapping</code></pre>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch-映射管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch-索引操作</title>
      <link href="/2022/06/05/07-Elasticsearch%E4%B9%8B-%E7%B4%A2%E5%BC%95%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/06/05/07-Elasticsearch%E4%B9%8B-%E7%B4%A2%E5%BC%95%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>索引操作</p><span id="more"></span><p><strong>07-Elasticsearch之-索引操作</strong></p><p>具体操作可以查看官方文档</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/indices.html>">https://www.elastic.co/guide/en/elasticsearch/reference/7.5/indices.html&gt;</a></p><p>官方2版本的中文文档</p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-settings.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-settings.html</a></p><h2 id="一-索引初始化"><a href="#一-索引初始化" class="headerlink" title="一 索引初始化"></a>一 索引初始化</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#新建一个jyc2的索引，索引分片数量为5，索引副本数量为1</span>PUT jyc2<span class="token punctuation">{</span>  <span class="token string">"settings"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"index"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token string">"number_of_shards"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>      <span class="token string">"number_of_replicas"</span><span class="token punctuation">:</span><span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token triple-quoted-string string">'''number_of_shards每个索引的主分片数，默认值是 5 。这个配置在索引创建后不能修改。number_of_replicas每个主分片的副本数，默认值是 1 。对于活动的索引库，这个配置可以随时修改。'''</span></code></pre><h2 id="二-查询索引配置"><a href="#二-查询索引配置" class="headerlink" title="二 查询索引配置"></a>二 查询索引配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#获取jyc2索引的配置信息</span>GET jyc2<span class="token operator">/</span>_settings<span class="token comment">#获取所有索引的配置信息</span>GET _all<span class="token operator">/</span>_settings<span class="token comment">#同上</span>GET _settings<span class="token comment">#获取lqz和lqz2索引的配置信息</span>GET jyc<span class="token punctuation">,</span>jyc2<span class="token operator">/</span>_settings</code></pre><h2 id="三-更新索引"><a href="#三-更新索引" class="headerlink" title="三 更新索引"></a>三 更新索引</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#修改索引副本数量为2</span>PUT jyc<span class="token operator">/</span>_settings<span class="token punctuation">{</span>  <span class="token string">"number_of_replicas"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment">#如遇到报错：cluster_block_exception，因为</span><span class="token comment">#这是由于ES新节点的数据目录data存储空间不足，导致从master主节点接收同步数据的时候失败，此时ES集群为了保护数据，会自动把索引分片index置为只读read-only</span>PUT  _all<span class="token operator">/</span>_settings<span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"blocks"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"read_only_allow_delete"</span><span class="token punctuation">:</span> false    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四-删除索引"><a href="#四-删除索引" class="headerlink" title="四 删除索引"></a>四 删除索引</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#删除jyc索引</span>DELETE jyc</code></pre>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch-索引操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch-安装Kibana</title>
      <link href="/2022/06/04/04-ElasticSearch%E4%B9%8B-%E5%AE%89%E8%A3%85Kibana/"/>
      <url>/2022/06/04/04-ElasticSearch%E4%B9%8B-%E5%AE%89%E8%A3%85Kibana/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>ElasticSearch玩转kibana</p><span id="more"></span><p><strong>04-ElasticSearch之-安装Kibana</strong></p><h2 id="一-Kibana介绍"><a href="#一-Kibana介绍" class="headerlink" title="一 Kibana介绍"></a>一 Kibana介绍</h2><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。</p><p>您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。</p><p>可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现</p><p>详情可见用户手册：</p><p><a href="https://www.elastic.co/guide/cn/kibana/current/index.html">https://www.elastic.co/guide/cn/kibana/current/index.html</a></p><p>注意跟Elasticsearch版本兼容情况，详情见：</p><p><a href="https://www.elastic.co/cn/support/matrix#matrix_compatibility">https://www.elastic.co/cn/support/matrix#matrix_compatibility</a></p><p>下载地址为：</p><p><a href="https://www.elastic.co/cn/downloads/past-releases">https://www.elastic.co/cn/downloads/past-releases</a></p><h2 id="二-下载Kibana"><a href="#二-下载Kibana" class="headerlink" title="二 下载Kibana"></a>二 下载Kibana</h2><p>到相应地址，下载即可</p><p>解压下载后的文件</p><h2 id="三-修改配置文件"><a href="#三-修改配置文件" class="headerlink" title="三 修改配置文件"></a>三 修改配置文件</h2><p>修改配置文件：vim 安装目录/config/kibana.yml</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 更多配置信息，详见 https://www.elastic.co/guide/cn/kibana/current/settings.html</span>server<span class="token punctuation">.</span>port<span class="token punctuation">:</span> <span class="token number">5601</span>server<span class="token punctuation">.</span>host<span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span>server<span class="token punctuation">.</span>name<span class="token punctuation">:</span> lqzelasticsearch<span class="token punctuation">.</span>hosts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"http://localhost:9200/"</span><span class="token punctuation">]</span></code></pre><h2 id="四-启动"><a href="#四-启动" class="headerlink" title="四 启动"></a>四 启动</h2><p>到安装目录下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>kibana<span class="token comment">#正常启动</span></code></pre><h2 id="六-查看"><a href="#六-查看" class="headerlink" title="六 查看"></a>六 查看</h2><p>在浏览器里访问：<a href="http://localhost:5601/app/kibana">http://localhost:5601/app/kibana</a></p><p>（如访问不到，尝试删除es中跟kibana相关的索引）</p><p>选择Dev Tools</p><p><a href="https://tva1.sinaimg.cn/large/006tNbRwgy1g9kzwehg9oj30u010wn00.jpg"><img src="https://s2.loli.net/2022/06/23/OtHl7kc3pSAaWKo.jpg" alt="image-20191204210857615"></a></p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch-安装Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch-head</title>
      <link href="/2022/06/04/03-ElasticSearch%E4%B9%8B-ElasticSearch-head/"/>
      <url>/2022/06/04/03-ElasticSearch%E4%B9%8B-ElasticSearch-head/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>ElasticSearch-head插件</p><span id="more"></span><p><strong>03-ElasticSearch之-ElasticSearch-head</strong></p><h2 id="安装ElasticSearch插件"><a href="#安装ElasticSearch插件" class="headerlink" title="安装ElasticSearch插件"></a>安装ElasticSearch插件</h2><h2 id="一-Head插件介绍"><a href="#一-Head插件介绍" class="headerlink" title="一 Head插件介绍"></a>一 Head插件介绍</h2><p>elasticsearch-head是elasticsearch的一款可视化工具，依赖于node.js ，所以需要先安装node.js</p><h2 id="二-安装Node-js"><a href="#二-安装Node-js" class="headerlink" title="二 安装Node.js"></a>二 安装Node.js</h2><p>详情见文章【安装nodejs】</p><h2 id="三-安装Grunt"><a href="#三-安装Grunt" class="headerlink" title="三 安装Grunt"></a>三 安装Grunt</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#Grunt是基于Node.js的项目构建工具。它可以自动运行你所设定的任务 </span>npm install grunt <span class="token operator">-</span>g</code></pre><h2 id="四-下载Head"><a href="#四-下载Head" class="headerlink" title="四 下载Head"></a>四 下载Head</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#地址：&lt;https://github.com/mobz/elasticsearch-head&gt;，可以用git下载，或者下载zip</span><span class="token comment"># 解压后切换到目录下</span>cd elasticsearch<span class="token operator">-</span>head<span class="token comment"># 通过npm安装依赖</span>npm install<span class="token comment">#启动</span>npm run start<span class="token comment">#在浏览器里打开</span>http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">9100</span><span class="token operator">/</span></code></pre><h2 id="五-配置跨域"><a href="#五-配置跨域" class="headerlink" title="五 配置跨域"></a>五 配置跨域</h2><p>修改 Elasticsearch 安装目录中config 文件夹下 elasticsearch.yml 文件，加入下面两行：</p><p>添加配置时，：后必须空格，不然启动闪退</p><pre class="language-python" data-language="python"><code class="language-python">http<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>enabled<span class="token punctuation">:</span> truehttp<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>allow<span class="token operator">-</span>origin<span class="token punctuation">:</span> <span class="token string">"*"</span></code></pre><h2 id="六-查看"><a href="#六-查看" class="headerlink" title="六 查看"></a>六 查看</h2><p>看到如下效果表示成功</p><p><a href="https://tva1.sinaimg.cn/large/006tNbRwgy1g9kvxi7jh0j31e40dq0vp.jpg"><img src="https://s2.loli.net/2022/06/23/kFQldDH5x6yXJac.jpg" alt="image-20191204185137497"></a></p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch-head </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch-安装中文分词器</title>
      <link href="/2022/06/04/05-ElasticSearch%E4%B9%8B-%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8/"/>
      <url>/2022/06/04/05-ElasticSearch%E4%B9%8B-%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>ElasticSearch与中文分词器的火花</p><span id="more"></span><p><strong>05-ElasticSearch之-安装中文分词器</strong></p><h2 id="一-中文分词介绍"><a href="#一-中文分词介绍" class="headerlink" title="一 中文分词介绍"></a>一 中文分词介绍</h2><p>elasticsearch提供了几个内置的分词器：standard analyzer(标准分词器)、simple analyzer(简单分词器)、whitespace analyzer（空格分词器）、language analyzer（语言分词器）</p><p>而如果我们不指定分词器类型的话，elasticsearch默认是使用标准分词器的</p><p>我们需要下载中文分词插件，来实现中文分词</p><h2 id="二-下载"><a href="#二-下载" class="headerlink" title="二 下载"></a>二 下载</h2><p>地址为：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>安装方式参照【02-ElasticSearch之-插件介绍】</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#我们采用第二种，url安装</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>elasticsearch<span class="token operator">-</span>plugin install https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>medcl<span class="token operator">/</span>elasticsearch<span class="token operator">-</span>analysis<span class="token operator">-</span>ik<span class="token operator">/</span>releases<span class="token operator">/</span>download<span class="token operator">/</span>v7<span class="token punctuation">.</span><span class="token number">4.2</span><span class="token operator">/</span>elasticsearch<span class="token operator">-</span>analysis<span class="token operator">-</span>ik<span class="token operator">-</span><span class="token number">7.4</span><span class="token number">.2</span><span class="token punctuation">.</span><span class="token builtin">zip</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch-安装中文分词器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch之-插件介绍</title>
      <link href="/2022/06/03/02-ElasticSearch%E4%B9%8B-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/06/03/02-ElasticSearch%E4%B9%8B-%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Elasticsearch之插件</p><span id="more"></span><p><strong>02-ElasticSearch之-插件介绍</strong></p><h2 id="一-Elasticsearch插件介绍"><a href="#一-Elasticsearch插件介绍" class="headerlink" title="一 Elasticsearch插件介绍"></a>一 Elasticsearch插件介绍</h2><p>es插件是一种增强Elasticsearch核心功能的途径。它们可以为es添加自定义映射类型、自定义分词器、原生脚本、自伸缩等等扩展功能。</p><p>es插件包含JAR文件，也可能包含脚本和配置文件，并且必须在集群中的每个节点上安装。安装之后，需要重启集群中的每个节点才能使插件生效。<br>es插件包含核心插件和第三方插件两种</p><h2 id="二-核心插件"><a href="#二-核心插件" class="headerlink" title="二 核心插件"></a>二 核心插件</h2><p>核心插件是elasticsearch项目提供的官方插件,都是开源项目。这些插件会跟着elasticsearch版本升级进行升级,总能匹配到对应版本的elasticsearch,这些插件是有官方团队和社区成员共同开发的。</p><p>官方插件地址： <a href="https://github.com/elastic/elasticsearch/tree/master/plugins">https://github.com/elastic/elasticsearch/tree/master/plugins</a></p><h2 id="三-第三方插件"><a href="#三-第三方插件" class="headerlink" title="三 第三方插件"></a>三 第三方插件</h2><p> 第三方插件是有开发者或者第三方组织自主开发便于扩展elasticsearch功能,它们拥有自己的许可协议,在使用它们之前需要清除插件的使用协议,不一定随着elasticsearch版本升级, 所以使用者自行辨别插件和es的兼容性。</p><h2 id="四-插件安装"><a href="#四-插件安装" class="headerlink" title="四 插件安装"></a>四 插件安装</h2><p>elasticsearch的插件安装方式还是很方便易用的。</p><p>它包含了命令行和离线安装几种方式。</p><p>它包含了命令行,url,离线安装三种方式。</p><p>核心插件随便选择一种方式安装均可，第三方插件建议使用离线安装方式<br><strong>第一种：命令行</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">bin</span><span class="token operator">/</span>elasticsearch<span class="token operator">-</span>plugin install <span class="token punctuation">[</span>plugin_name<span class="token punctuation">]</span><span class="token comment"># bin/elasticsearch-plugin install analysis-smartcn  安装中文分词器</span></code></pre><p><strong>第二种：url安装</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">bin</span><span class="token operator">/</span>elasticsearch<span class="token operator">-</span>plugin install <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment">#bin/elasticsearch-plugin install https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-smartcn/analysis-smartcn-6.4.0.zip</span></code></pre><p><strong>第三种：离线安装</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-smartcn/analysis-smartcn-6.4.0.zip</span><span class="token comment">#点击下载analysis-smartcn离线包</span><span class="token comment">#将离线包解压到ElasticSearch 安装目录下的 plugins 目录下</span><span class="token comment">#重启es。新装插件必须要重启es</span></code></pre><p><strong>注意：插件的版本要与 ElasticSearch 版本要一致</strong></p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch之-插件介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch之-介绍</title>
      <link href="/2022/06/02/00-ElasticSearch%E4%B9%8B-%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/06/02/00-ElasticSearch%E4%B9%8B-%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Elasticsearch简述</p><span id="more"></span><p><strong>00-ElasticSearch之-介绍</strong></p><p><strong>ElasticSearch之介绍</strong></p><h2 id="一-Elasticsearch产生背景"><a href="#一-Elasticsearch产生背景" class="headerlink" title="一 Elasticsearch产生背景"></a>一 Elasticsearch产生背景</h2><h3 id="1-1-大规模数据如何检索"><a href="#1-1-大规模数据如何检索" class="headerlink" title="1.1 大规模数据如何检索"></a>1.1 大规模数据如何检索</h3><p>如：当系统数据量上了10亿、100亿条的时候，我们在做系统架构的时候通常会从以下角度去考虑问题：<br>1）用什么数据库好？(mysql、oracle、mongodb、hbase…)<br>2）如何解决单点故障；(lvs、F5、A10、Zookeeper、MQ)<br>3）如何保证数据安全性；(热备、冷备、异地多活)<br>4）如何解决检索难题；(数据库代理中间件：mysql-proxy、Cobar、MaxScale等;)<br>5）如何解决统计分析问题；(离线、近实时)</p><h3 id="1-2-传统数据库的应对解决方案"><a href="#1-2-传统数据库的应对解决方案" class="headerlink" title="1.2 传统数据库的应对解决方案"></a>1.2 传统数据库的应对解决方案</h3><p>对于关系型数据，我们通常采用以下或类似架构去解决查询瓶颈和写入瓶颈：<br>解决要点：<br>1）通过主从备份解决数据安全性问题；<br>2）通过数据库代理中间件心跳监测，解决单点故障问题；<br>3）通过代理中间件将查询语句分发到各个slave节点进行查询，并汇总结果</p><h3 id="1-3-非关系型数据库解决方案"><a href="#1-3-非关系型数据库解决方案" class="headerlink" title="1.3 非关系型数据库解决方案"></a>1.3 非关系型数据库解决方案</h3><p>对于Nosql数据库，以mongodb为例，其它原理类似：<br>解决要点：<br>1）通过副本备份保证数据安全性；<br>2）通过节点竞选机制解决单点问题；<br>3）先从配置库检索分片信息，然后将请求分发到各个节点，最后由路由节点合并汇总结果</p><h3 id="1-4-内存数据库解决方案"><a href="#1-4-内存数据库解决方案" class="headerlink" title="1.4 内存数据库解决方案"></a>1.4 内存数据库解决方案</h3><p>完全把数据放在内存中是不可靠的，实际上也不太现实，当我们的数据达到PB级别时，按照每个节点96G内存计算，在内存完全装满的数据情况下，我们需要的机器是：1PB=1024T=1048576G<br>节点数=1048576/96=10922个<br>实际上，考虑到数据备份，节点数往往在2.5万台左右。成本巨大决定了其不现实！</p><p>所以把数据放在内存也好，不放在内存也好，都不能完完全全解决问题。<br>全部放在内存速度问题是解决了，但成本问题上来了。<br>为解决以上问题，从源头着手分析，通常会从以下方式来寻找方法：<br>1、存储数据时按有序存储；<br>2、将数据和索引分离；<br>3、压缩数据；<br>这就引出了Elasticsearch</p><h2 id="二-Elasticsearch介绍"><a href="#二-Elasticsearch介绍" class="headerlink" title="二 Elasticsearch介绍"></a>二 Elasticsearch介绍</h2><h3 id="2-1Elasticsearch是什么"><a href="#2-1Elasticsearch是什么" class="headerlink" title="2.1Elasticsearch是什么"></a>2.1Elasticsearch是什么</h3><p><strong>Elasticsearch 是一个基于Lucene的分布式搜索和分析引擎</strong>。</p><p>ES是elaticsearch简写， Elasticsearch是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。<br>Elasticsearch使用Java开发，在Apache许可条款下开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便</p><p>使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，使得全文检索变得简单</p><p><strong>设计用途：用于分布式全文检索，通过HTTP使用JSON进行数据索引，速度快</strong></p><h3 id="2-2-Lucene与Elasticsearch关系"><a href="#2-2-Lucene与Elasticsearch关系" class="headerlink" title="2.2 Lucene与Elasticsearch关系"></a>2.2 Lucene与Elasticsearch关系</h3><p>1）Lucene只是一个库。想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p><p>2）Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><h3 id="2-3-Elasticsearch-vs-solr"><a href="#2-3-Elasticsearch-vs-solr" class="headerlink" title="2.3 Elasticsearch vs solr"></a>2.3 Elasticsearch vs solr</h3><p>1）Solr是Apache Lucene项目的开源企业搜索平台。其主要功能包括全文检索、命中标示、分面搜索、动态聚类、数据库集成，以及富文本（如Word、PDF）的处理。</p><p>2）Solr是高度可扩展的，并提供了分布式搜索和索引复制。Solr是最流行的企业级搜索引擎，Solr4 还增加了NoSQL支持。</p><p>3）Solr是用Java编写、运行在Servlet容器（如 Apache Tomcat 或Jetty）的一个独立的全文搜索服务器。 Solr采用了 Lucene Java 搜索库为核心的全文索引和搜索，并具有类似REST的HTTP/XML和JSON的API。</p><p>4）Solr强大的外部配置功能使得无需进行Java编码，便可对 其进行调整以适应多种类型的应用程序。Solr有一个插件架构，以支持更多的高级定制</p><p><strong>Elasticsearch 与 Solr 的比较总结</strong></p><ol><li>二者安装都很简单</li><li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能</li><li>Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式</li><li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供</li><li>Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch</li><li>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用</li></ol><h3 id="2-4-Elasticsearch核心概念"><a href="#2-4-Elasticsearch核心概念" class="headerlink" title="2.4 Elasticsearch核心概念"></a>2.4 Elasticsearch核心概念</h3><h4 id="2-4-1-Cluster：集群"><a href="#2-4-1-Cluster：集群" class="headerlink" title="2.4.1 Cluster：集群"></a>2.4.1 Cluster：集群</h4><p>ES可以作为一个独立的单个搜索服务器。不过，为了处理大型数据集，实现容错和高可用性，ES可以运行在许多互相合作的服务器上。这些服务器的集合称为集群。</p><h4 id="2-4-2-Node：节点"><a href="#2-4-2-Node：节点" class="headerlink" title="2.4.2 Node：节点"></a>2.4.2 Node：节点</h4><p>形成集群的每个服务器称为节点。</p><h4 id="2-4-3-Shard：分片"><a href="#2-4-3-Shard：分片" class="headerlink" title="2.4.3 Shard：分片"></a>2.4.3 Shard：分片</h4><p>当有大量的文档时，由于内存的限制、磁盘处理能力不足、无法足够快的响应客户端的请求等，一个节点可能不够。这种情况下，数据可以分为较小的分片。每个分片放到不同的服务器上。<br>当你查询的索引分布在多个分片上时，ES会把查询发送给每个相关的分片，并将结果组合在一起，而应用程序并不知道分片的存在。即：这个过程对用户来说是透明的。</p><h4 id="2-4-4-Replia：副本"><a href="#2-4-4-Replia：副本" class="headerlink" title="2.4.4 Replia：副本"></a>2.4.4 Replia：副本</h4><p>为提高查询吞吐量或实现高可用性，可以使用分片副本。<br>副本是一个分片的精确复制，每个分片可以有零个或多个副本。ES中可以有许多相同的分片，其中之一被选择更改索引操作，这种特殊的分片称为主分片。<br>当主分片丢失时，如：该分片所在的数据不可用时，集群将副本提升为新的主分片。</p><h4 id="2-4-5-全文检索"><a href="#2-4-5-全文检索" class="headerlink" title="2.4.5 全文检索"></a>2.4.5 全文检索</h4><p>全文检索就是对一篇文章进行索引，可以根据关键字搜索，类似于mysql里的like语句。<br>全文索引就是把内容根据词的意义进行分词，然后分别创建索引，例如”今日是周日我们出去玩” 可能会被分词成：“今天“，”周日“，“我们“，”出去玩“ 等token，这样当你搜索“周日” 或者 “出去玩” 都会把这句搜出来。</p><h3 id="2-5-与关系型数据库Mysql对比"><a href="#2-5-与关系型数据库Mysql对比" class="headerlink" title="2.5 与关系型数据库Mysql对比"></a>2.5 与关系型数据库Mysql对比</h3><p><a href="https://tva1.sinaimg.cn/large/006tNbRwgy1ga6ozowlvmj30ty0gitd6.jpg"><img src="https://s2.loli.net/2022/06/23/UDTbKpyx6zwPYVf.jpg" alt="image-20191223153358211"></a></p><p>1）关系型数据库中的数据库（DataBase），等价于ES中的索引（Index）<br>2）一个数据库下面有N张表（Table），等价于1个索引Index下面有N多类型（Type），<br>3）一个数据库表（Table）下的数据由多行（ROW）多列（column，属性）组成，等价于1个Type由多个文档（Document）和多Field组成。<br>4）在一个关系型数据库里面，schema定义了表、每个表的字段，还有表和字段之间的关系。 与之对应的，在ES中：Mapping定义索引下的Type的字段处理规则，即索引如何建立、索引类型、是否保存原始索引JSON文档、是否压缩原始JSON文档、是否需要分词处理、如何进行分词处理等。<br>5）在数据库中的增insert、删delete、改update、查search操作等价于ES中的增PUT/POST、删Delete、改_update、查GET.1.7</p><h4 id="2-6-ES逻辑设计（文档–-gt-类型–-gt-索引）"><a href="#2-6-ES逻辑设计（文档–-gt-类型–-gt-索引）" class="headerlink" title="2.6 ES逻辑设计（文档–>类型–>索引）"></a>2.6 ES逻辑设计（文档–&gt;类型–&gt;索引）</h4><p>一个索引类型中，包含多个文档，比如说文档1，文档2。<br>当我们索引一篇文档时，可以通过这样的顺序找到它：<code>索引</code>▷<code>类型</code>▷<code>文档ID</code>，通过这个组合我们就能索引到某个具体的文档。<br>注意：ID不必是整数，实际上它是个字符串。</p><h5 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h5><p>之前说elasticsearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch中，文档有几个重要属性：</p><ul><li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含<code>key:value</code></li><li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的</li><li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</li><li>文档是无模式的，也就是说，字段对应值的类型可以是不限类型的。</li></ul><p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符串也可以是整型。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型（<strong>详见扩展阅读：17-扩展阅读-删除映射类型.md</strong>），这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。<br>类型中对于字段的定义称为映射，比如<code>name</code>映射为字符串类型。<br>我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么elasticsearch是怎么做的呢？elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整型。<br>但是elasticsearch也可能猜不对，所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用，别整什么幺蛾子。后面在讨论更多关于映射的东西。</p><h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><p>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上了。</p><h4 id="2-7-ES物理设计"><a href="#2-7-ES物理设计" class="headerlink" title="2.7 ES物理设计"></a>2.7 ES物理设计</h4><pre class="language-python" data-language="python"><code class="language-python">一个集群包含至少一个节点，而一个节点就是一个elasticsearch进程。节点内可以有多个索引。默认的，如果你创建一个索引，那么这个索引将会有<span class="token number">5</span>个分片（primary shard，又称主分片）构成，而每个分片又有一个副本（replica shard，又称复制分片），这样，就有了<span class="token number">10</span>个分片。那么这个索引是如何存储在集群中的呢？图中有<span class="token number">3</span>个节点的集群，可以看到主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉了，数据也不至于丢失。实际上，一个分片是一个Lucene索引，一个包含倒排索引的文件目录，倒排索引的结构使得elasticsearch在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字</code></pre><p><a href="https://tva1.sinaimg.cn/large/007S8ZIlly1gdtrx2qan1j31880d6t9k.jpg"><img src="https://s2.loli.net/2022/06/23/5FNTveazkbqg3Qj.jpg" alt="image-20200306181921343"></a></p><h3 id="2-6-ELK是什么"><a href="#2-6-ELK是什么" class="headerlink" title="2.6 ELK是什么"></a>2.6 ELK是什么</h3><p>ELK=elasticsearch+Logstash+kibana<br>elasticsearch：后台分布式存储以及全文检索<br>logstash: 日志加工、“搬运工”<br>kibana：数据可视化展示。<br>ELK架构为数据分布式存储、可视化查询和日志解析创建了一个功能强大的管理链。 三者相互配合，取长补短，共同完成分布式大数据处理工作。</p><h3 id="2-7-Elasticsearch特点和优势"><a href="#2-7-Elasticsearch特点和优势" class="headerlink" title="2.7 Elasticsearch特点和优势"></a>2.7 Elasticsearch特点和优势</h3><p>1）分布式实时文件存储，可将每一个字段存入索引，使其可以被检索到。<br>2）实时分析的分布式搜索引擎。<br>分布式：索引分拆成多个分片，每个分片可有零个或多个副本。集群中的每个数据节点都可承载一个或多个分片，并且协调和处理各种操作；<br>负载再平衡和路由在大多数情况下自动完成。<br>3）可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据。也可以运行在单台PC上（已测试）<br>4）支持插件机制，分词插件、同步插件、Hadoop插件、可视化插件等。</p><h2 id="三-为什么使用Elasticsearch"><a href="#三-为什么使用Elasticsearch" class="headerlink" title="三 为什么使用Elasticsearch"></a>三 为什么使用Elasticsearch</h2><h3 id="3-1-国内外优秀案例"><a href="#3-1-国内外优秀案例" class="headerlink" title="3.1 国内外优秀案例"></a>3.1 国内外优秀案例</h3><p>1） 2013年初，GitHub抛弃了Solr，采取ElasticSearch 来做PB级的搜索。 “GitHub使用ElasticSearch搜索20TB的数据，包括13亿文件和1300亿行代码”。</p><p>2）维基百科：启动以elasticsearch为基础的核心搜索架构。<br>3）SoundCloud：“SoundCloud使用ElasticSearch为1.8亿用户提供即时而精准的音乐搜索服务”。<br>4）百度：百度目前广泛使用ElasticSearch作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部20多个业务线（包括casio、云分析、网盟、预测、文库、直达号、钱包、风控等），单集群最大100台机器，200个ES节点，每天导入30TB+数据。</p><p>5）新浪ES 如何分析处理32亿条实时日志<br>6）阿里ES 构建挖财自己的日志采集和分析体系<br>7）有赞ES 业务日志处理</p><h3 id="3-2-我们的业务场景"><a href="#3-2-我们的业务场景" class="headerlink" title="3.2 我们的业务场景"></a>3.2 我们的业务场景</h3><p>实际项目开发实战中，几乎每个系统都会有一个搜索的功能，当搜索做到一定程度时，维护和扩展起来难度就会慢慢变大，所以很多公司都会把搜索单独独立出一个模块，用ElasticSearch等来实现。</p><p>近年ElasticSearch发展迅猛，已经超越了其最初的纯搜索引擎的角色，现在已经增加了数据聚合分析（aggregation）和可视化的特性，如果你有数百万的文档需要通过关键词进行定位时，ElasticSearch肯定是最佳选择。当然，如果你的文档是JSON的，你也可以把ElasticSearch当作一种“NoSQL数据库”， 应用ElasticSearch数据聚合分析（aggregation）的特性，针对数据进行多维度的分析。</p><p>尝试使用ES来替代传统的NoSQL，它的横向扩展机制太方便了</p><p><strong>应用场景：</strong></p><p>1）新系统开发尝试使用ES作为存储和检索服务器；<br>2）现有系统升级需要支持全文检索服务，需要使用ES</p><h2 id="四-Elasticsearch索引到底能处理多大数据"><a href="#四-Elasticsearch索引到底能处理多大数据" class="headerlink" title="四 Elasticsearch索引到底能处理多大数据"></a>四 Elasticsearch索引到底能处理多大数据</h2><p>单一索引的极限取决于存储索引的硬件、索引的设计、如何处理数据以及你为索引备份了多少副本。</p><p>通常来说，一个Lucene索引（也就是一个elasticsearch分片，一个es索引默认5个分片）不能处理多于21亿篇文档，或者多于2740亿的唯一词条。但达到这个极限之前，我们可能就没有足够的磁盘空间了！<br>当然，一个分片如何很大的话，读写性能将会变得非常差</p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch之-介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch之-安装</title>
      <link href="/2022/06/02/01-ElasticSearch%E4%B9%8B-%E5%AE%89%E8%A3%85/"/>
      <url>/2022/06/02/01-ElasticSearch%E4%B9%8B-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>ElasticSearch安装</p><span id="more"></span><p><strong>01-ElasticSearch之-安装</strong></p><p><strong>Mac安装ElasticSearch</strong></p><h2 id="一-安装JDK环境"><a href="#一-安装JDK环境" class="headerlink" title="一 安装JDK环境"></a>一 安装JDK环境</h2><p>因为ElasticSearch是用Java语言编写的，所以必须安装JDK的环境，并且是JDK 1.8以上，具体操作步骤自行百度</p><p>安装完成查看java版本</p><pre class="language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span>version</code></pre><h2 id="二-官网下载最新版本"><a href="#二-官网下载最新版本" class="headerlink" title="二 官网下载最新版本"></a>二 官网下载最新版本</h2><p>下载地址[<a href="https://www.elastic.co/cn/downloads/elasticsearch],%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E5%8D%B3%E5%8F%AF">https://www.elastic.co/cn/downloads/elasticsearch],选择相应版本下载即可</a></p><p><a href="https://tva1.sinaimg.cn/large/006tNbRwgy1g9kts83vzbj31o80tsjvo.jpg"><img src="https://s2.loli.net/2022/06/23/hTwf8G7dlv6Y2KD.jpg" alt="image-20191204173716931"></a></p><h2 id="三-下载其他版本"><a href="#三-下载其他版本" class="headerlink" title="三 下载其他版本"></a>三 下载其他版本</h2><p>直接点击<a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></p><p><a href="https://tva1.sinaimg.cn/large/006tNbRwgy1g9kttpffz5j31320u0ags.jpg"><img src="https://s2.loli.net/2022/06/23/bJ7CfpaU9RieGI4.jpg" alt="image-20191204173847321"></a></p><h2 id="三-下载完成，启动"><a href="#三-下载完成，启动" class="headerlink" title="三 下载完成，启动"></a>三 下载完成，启动</h2><p>解压文件，切换到解压文件路径下，执行</p><pre class="language-python" data-language="python"><code class="language-python">cd elasticsearch<span class="token operator">-</span><span class="token operator">&lt;</span>version<span class="token operator">&gt;</span> <span class="token comment">#切换到路径下</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>elasticsearch  <span class="token comment">#启动es</span><span class="token comment">#如果你想把 Elasticsearch 作为一个守护进程在后台运行，那么可以在后面添加参数 -d 。</span><span class="token comment">#如果你是在 Windows 上面运行 Elasticseach，你应该运行 bin\elasticsearch.bat 而不是 bin\elasticsearch</span></code></pre><h2 id="四-测试启动是否成功"><a href="#四-测试启动是否成功" class="headerlink" title="四 测试启动是否成功"></a>四 测试启动是否成功</h2><p>在浏览器输入以下地址：<a href="http://127.0.0.1:9200/">http://127.0.0.1:9200/</a></p><p>即可看到如下内容：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"lqzMacBook.local"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_uuid"</span> <span class="token operator">:</span> <span class="token string">"G1DFg-u6QdGFvz8Z-XMZqQ"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"number"</span> <span class="token operator">:</span> <span class="token string">"7.5.0"</span><span class="token punctuation">,</span>    <span class="token property">"build_flavor"</span> <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token property">"build_type"</span> <span class="token operator">:</span> <span class="token string">"tar"</span><span class="token punctuation">,</span>    <span class="token property">"build_hash"</span> <span class="token operator">:</span> <span class="token string">"e9ccaed468e2fac2275a3761849cbee64b39519f"</span><span class="token punctuation">,</span>    <span class="token property">"build_date"</span> <span class="token operator">:</span> <span class="token string">"2019-11-26T01:06:52.518245Z"</span><span class="token punctuation">,</span>    <span class="token property">"build_snapshot"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"lucene_version"</span> <span class="token operator">:</span> <span class="token string">"8.3.0"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_wire_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.8.0"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_index_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"6.0.0-beta1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"tagline"</span> <span class="token operator">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">}</span></code></pre><h2 id="五-关闭es"><a href="#五-关闭es" class="headerlink" title="五 关闭es"></a>五 关闭es</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#查看进程</span>ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep elastic<span class="token comment">#干掉进程</span>kill <span class="token operator">-</span><span class="token number">9</span> <span class="token number">2382</span>（进程号）<span class="token comment">#以守护进程方式启动es</span>elasticsearch <span class="token operator">-</span>d</code></pre>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch之-安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-高并发负载均衡</title>
      <link href="/2021/11/05/Django%20%E9%AB%98%E5%B9%B6%E5%8F%91%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2021/11/05/Django%20%E9%AB%98%E5%B9%B6%E5%8F%91%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>高并发负载均衡</p><span id="more"></span><p><strong>Django 高并发负载均衡</strong></p><h2 id="1-什么是负载均衡？"><a href="#1-什么是负载均衡？" class="headerlink" title="1 什么是负载均衡？"></a>1 什么是负载均衡？</h2><p>当一台服务器的性能达到极限时，我们可以使用服务器集群来提高网站的整体性能。那么，在服务器集群中，需要有一台服务器充当调度者的角色，用户的所有请求都会首先由它接收，调度者再根据每台服务器的负载情况将请求分配给某一台后端服务器去处理。</p><p>那么在这个过程中，调度者如何合理分配任务，保证所有后端服务器都将性能充分发挥，从而保持服务器集群的整体性能最优，这就是负载均衡问题。</p><p>下面详细介绍负载均衡的四种实现方式</p><h2 id="2-HTTP重定向实现负载均衡"><a href="#2-HTTP重定向实现负载均衡" class="headerlink" title="2 HTTP重定向实现负载均衡"></a>2 HTTP重定向实现负载均衡</h2><h4 id="过程描述"><a href="#过程描述" class="headerlink" title="过程描述"></a>过程描述</h4><p>当用户向服务器发起请求时，请求首先被集群调度者截获；调度者根据某种分配策略，选择一台服务器，并将选中的服务器的IP地址封装在HTTP响应消息头部的Location字段中，并将响应消息的状态码设为302，最后将这个响应消息返回给浏览器。</p><p>当浏览器收到响应消息后，解析Location字段，并向该URL发起请求，然后指定的服务器处理该用户的请求，最后将结果返回给用户。</p><p>在使用HTTP重定向来实现服务器集群负载均衡的过程中，需要一台服务器作为请求调度者。用户的一项操作需要发起两次HTTP请求，一次向调度服务器发送请求，获取后端服务器的IP，第二次向后端服务器发送请求，获取处理结果。</p><h4 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h4><p>调度服务器收到用户的请求后，究竟选择哪台后端服务器处理请求，这由调度服务器所使用的调度策略决定。</p><p>  随机分配策略<br>  当调度服务器收到用户请求后，可以随机决定使用哪台后端服务器，然后将该服务器的IP封装在HTTP响应消息的Location属性中，返回给浏览器即可。</p><p>  轮询策略(RR)<br>  调度服务器需要维护一个值，用于记录上次分配的后端服务器的IP。那么当新的请求到来时，调度者将请求依次分配给下一台服务器。</p><p>由于轮询策略需要调度者维护一个值用于记录上次分配的服务器IP，因此需要额外的开销；此外，由于这个值属于互斥资源，那么当多个请求同时到来时，为了避免线程的安全问题，因此需要锁定互斥资源，从而降低了性能。而随机分配策略不需要维护额外的值，也就不存在线程安全问题，因此性能比轮询要高。</p><h4 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h4><p>采用HTTP重定向来实现服务器集群的负载均衡实现起来较为容易，逻辑比较简单，但缺点也较为明显。</p><p>在HTTP重定向方法中，调度服务器只在客户端第一次向网站发起请求的时候起作用。当调度服务器向浏览器返回响应信息后，客户端此后的操作都基于新的URL进行的(也就是后端服务器)，此后浏览器就不会与调度服务器产生关系，进而会产生如下几个问题：</p><p>  由于不同用户的访问时间、访问页面深度有所不同，从而每个用户对各自的后端服务器所造成的压力也不同。而调度服务器在调度时，无法知道当前用户将会对服务器造成多大的压力，因此这种方式无法实现真正意义上的负载均衡，只不过是把请求次数平均分配给每台服务器罢了。<br>  若分配给该用户的后端服务器出现故障，并且如果页面被浏览器缓存，那么当用户再次访问网站时，请求都会发给出现故障的服务器，从而导致访问失败</p><h2 id="3-DNS负载均衡"><a href="#3-DNS负载均衡" class="headerlink" title="3 DNS负载均衡"></a>3 DNS负载均衡</h2><h4 id="DNS是什么"><a href="#DNS是什么" class="headerlink" title="DNS是什么"></a>DNS是什么</h4><p>在了解DNS负载均衡之前，我们首先需要了解DNS域名解析的过程。</p><p>我们知道，数据包采用IP地址在网络中传播，而为了方便用户记忆，我们使用域名来访问网站。那么，我们通过域名访问网站之前，首先需要将域名解析成IP地址，这个工作是由DNS完成的。也就是域名服务器。</p><p>我们提交的请求不会直接发送给想要访问的网站，而是首先发给域名服务器，它会帮我们把域名解析成IP地址并返回给我们。我们收到IP之后才会向该IP发起请求。</p><p>那么，DNS服务器有一个天然的优势，如果一个域名指向了多个IP地址，那么每次进行域名解析时，DNS只要选一个IP返回给用户，就能够实现服务器集群的负载均衡。</p><h4 id="具体做法"><a href="#具体做法" class="headerlink" title="具体做法"></a>具体做法</h4><p>首先需要将我们的域名指向多个后端服务器(将一个域名解析到多个IP上)，再设置一下调度策略，那么我们的准备工作就完成了，接下来的负载均衡就完全由DNS服务器来实现。</p><p>当用户向我们的域名发起请求时，DNS服务器会自动地根据我们事先设定好的调度策略选一个合适的IP返回给用户，用户再向该IP发起请求。</p><h4 id="调度策略-1"><a href="#调度策略-1" class="headerlink" title="调度策略"></a>调度策略</h4><p>一般DNS提供商会提供一些调度策略供我们选择，如随机分配、轮询、根据请求者的地域分配离他最近的服务器。</p><h4 id="优缺点分析-1"><a href="#优缺点分析-1" class="headerlink" title="优缺点分析"></a>优缺点分析</h4><p>DNS负载均衡最大的优点就是配置简单。服务器集群的调度工作完全由DNS服务器承担，那么我们就可以把精力放在后端服务器上，保证他们的稳定性与吞吐量。而且完全不用担心DNS服务器的性能，即便是使用了轮询策略，它的吞吐率依然卓越。</p><p>此外，DNS负载均衡具有较强了扩展性，你完全可以为一个域名解析较多的IP，而且不用担心性能问题。</p><p>但是，由于把集群调度权交给了DNS服务器，从而我们没办法随心所欲地控制调度者，没办法定制调度策略。</p><p>DNS服务器也没办法了解每台服务器的负载情况，因此没办法实现真正意义上的负载均衡。它和HTTP重定向一样，只不过把所有请求平均分配给后端服务器罢了。</p><p>此外，当我们发现某一台后端服务器发生故障时，即使我们立即将该服务器从域名解析中去除，但由于DNS服务器会有缓存，该IP仍然会在DNS中保留一段时间，那么就会导致一部分用户无法正常访问网站。这是一个致命的问题！好在这个问题可以用动态DNS来解决。</p><h4 id="动态DNS"><a href="#动态DNS" class="headerlink" title="动态DNS"></a>动态DNS</h4><p>动态DNS能够让我们通过程序动态修改DNS服务器中的域名解析。从而当我们的监控程序发现某台服务器挂了之后，能立即通知DNS将其删掉。</p><h4 id="综上所述"><a href="#综上所述" class="headerlink" title="综上所述"></a>综上所述</h4><p>DNS负载均衡是一种粗犷的负载均衡方法，这里只做介绍，不推荐使用。</p><h2 id="4-反向代理负载均衡"><a href="#4-反向代理负载均衡" class="headerlink" title="4 反向代理负载均衡"></a>4 反向代理负载均衡</h2><h4 id="什么是反向代理负载均衡？"><a href="#什么是反向代理负载均衡？" class="headerlink" title="什么是反向代理负载均衡？"></a>什么是反向代理负载均衡？</h4><p>反向代理服务器是一个位于实际服务器之前的服务器，所有向我们网站发来的请求都首先要经过反向代理服务器，服务器根据用户的请求要么直接将结果返回给用户，要么将请求交给后端服务器处理，再返回给用户。</p><p>之前我们介绍了用反向代理服务器实现静态页面和常用的动态页面的缓存。接下来我们介绍反向代理服务器更常用的功能——实现负载均衡。</p><p>我们知道，所有发送给我们网站的请求都首先经过反向代理服务器。那么，反向代理服务器就可以充当服务器集群的调度者，它可以根据当前后端服务器的负载情况，将请求转发给一台合适的服务器，并将处理结果返回给用户。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>  隐藏后端服务器。<br>  与HTTP重定向相比，反向代理能够隐藏后端服务器，所有浏览器都不会与后端服务器直接交互，从而能够确保调度者的控制权，提升集群的整体性能。<br>  故障转移<br>  与DNS负载均衡相比，反向代理能够更快速地移除故障结点。当监控程序发现某一后端服务器出现故障时，能够及时通知反向代理服务器，并立即将其删除。<br>  合理分配任务<br>  HTTP重定向和DNS负载均衡都无法实现真正意义上的负载均衡，也就是调度服务器无法根据后端服务器的实际负载情况分配任务。但反向代理服务器支持手动设定每台后端服务器的权重。我们可以根据服务器的配置设置不同的权重，权重的不同会导致被调度者选中的概率的不同。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>  调度者压力过大<br>  由于所有的请求都先由反向代理服务器处理，那么当请求量超过调度服务器的最大负载时，调度服务器的吞吐率降低会直接降低集群的整体性能。<br>  制约扩展<br>  当后端服务器也无法满足巨大的吞吐量时，就需要增加后端服务器的数量，可没办法无限量地增加，因为会受到调度服务器的最大吞吐量的制约。</p><h4 id="粘滞会话"><a href="#粘滞会话" class="headerlink" title="粘滞会话"></a>粘滞会话</h4><p>反向代理服务器会引起一个问题。若某台后端服务器处理了用户的请求，并保存了该用户的session或存储了缓存，那么当该用户再次发送请求时，无法保证该请求仍然由保存了其Session或缓存的服务器处理，若由其他服务器处理，先前的Session或缓存就找不到了。</p><p>解决办法1：<br>可以修改反向代理服务器的任务分配策略，以用户IP作为标识较为合适。相同的用户IP会交由同一台后端服务器处理，从而就避免了粘滞会话的问题。</p><p>解决办法2：<br>可以在Cookie中标注请求的服务器ID，当再次提交请求时，调度者将该请求分配给Cookie中标注的服务器处理即可。</p><h2 id="5-负载均衡组件"><a href="#5-负载均衡组件" class="headerlink" title="5 负载均衡组件"></a>5 负载均衡组件</h2><p>1.1、apache<br>—— 它是Apache软件基金会的一个开放源代码的跨平台的网页服务器，属于老牌的web服务器了，支持基于Ip或者域名的虚拟主机，支持代理服务器，支持安全Socket层(SSL)等等，目前互联网主要使用它做静态资源服务器，也可以做代理服务器转发请求(如：图片链等)，结合tomcat等servlet容器处理jsp。<br>1.2、ngnix<br>—— 俄罗斯人开发的一个高性能的 HTTP和反向代理服务器。由于Nginx 超越 Apache 的高性能和稳定性，使得国内使用 Nginx 作为 Web 服务器的网站也越来越多，其中包括新浪博客、新浪播客、网易新闻、腾讯网、搜狐博客等门户网站频道等，在3w以上的高并发环境下，ngnix处理能力相当于apache的10倍。<br>参考：apache和tomcat的性能分析和对比(Nginx 0.8.x + PHP 5.2.13（FastCGI）搭建胜过Apache十倍的Web服务器（第6版）[原创])<br>1.3、lvs<br>—— Linux Virtual Server的简写，意即Linux虚拟服务器，是一个虚拟的服务器集群系统。由毕业于国防科技大学的章文嵩博士于1998年5月创立，可以实现LINUX平台下的简单负载均衡。了解更多，访问官网：<a href="http://zh.linuxvirtualserver.org/%E3%80%82">http://zh.linuxvirtualserver.org/。</a></p><p>1.4、HAProxy</p><p>—— HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。HAProxy特别适用于那些负载特大的web站点， 这些站点通常又需要会话保持或七层处理。HAProxy运行在当前的硬件上，完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上.<br>1.5、keepalived<br>—— 这里说的keepalived不是apache或者tomcat等某个组件上的属性字段，它也是一个组件，可以实现web服务器的高可用(HA high availably)。它可以检测web服务器的工作状态，如果该服务器出现故障被检测到，将其剔除服务器群中，直至正常工作后，keepalive会自动检测到并加入到服务器群里面。实现主备服务器发生故障时ip瞬时无缝交接。它是LVS集群节点健康检测的一个用户空间守护进程，也是LVS的引导故障转移模块（director failover）。Keepalived守护进程可以检查LVS池的状态。如果LVS服务器池当中的某一个服务器宕机了。keepalived会通过一 个setsockopt呼叫通知内核将这个节点从LVS拓扑图中移除。<br>1.6、memcached<br>—— 它是一个高性能分布式内存对象缓存系统。当初是Danga Interactive为了LiveJournal快速发展开发的系统，用于对业务查询数据缓存，减轻数据库的负载。其守护进程(daemon)是用C写的，但是客户端支持几乎所有语言(客户端基本上有3种版本[memcache client for Java;spymemcached;xMecache])，服务端和客户端通过简单的协议通信；在memcached里面缓存的数据必须序列化。<br>1.7、terracotta<br>—— 是一款由美国Terracotta公司开发的著名开源Java集群平台。它在JVM与Java应用之间实现了一个专门处理集群功能的抽象层，允许用户在不改变系统代码的情况下实现java应用的集群。支持数据的持久化、session的复制以及高可用(HA)。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django-高并发负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式爬虫</title>
      <link href="/2021/10/13/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB/"/>
      <url>/2021/10/13/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>分布式爬虫</p><span id="more"></span><p><strong>分布式爬虫</strong></p><h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h3><p>原来scrapy的Scheduler维护的是本机的任务队列（存放Request对象及其回调函数等信息）+本机的去重队列（存放访问过的url地址）</p><p>[<img src="https://s2.loli.net/2022/06/23/SMBfUuKZplP8AHh.jpg" alt="img">]</p><p>所以实现分布式爬取的关键就是，找一台专门的主机上运行一个共享的队列比如Redis，<br>然后重写Scrapy的Scheduler，让新的Scheduler到共享队列存取Request，并且去除重复的Request请求，所以总结下来，实现分布式的关键就是三点：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#1、共享队列</span><span class="token comment">#2、重写Scheduler，让其无论是去重还是任务都去访问共享队列</span><span class="token comment">#3、为Scheduler定制去重规则（利用redis的集合类型）</span></code></pre><p>以上三点便是scrapy-redis组件的核心功能</p><p>[<img src="https://s2.loli.net/2022/06/23/vRDYy5z7r8St9wj.jpg" alt="img">]</p><pre class="language-mipsasm" data-language="mipsasm"><code class="language-mipsasm">#安装：pip3 install scrapy-redis#源码：D:\python3.6\Lib\site-packages\scrapy_redis</code></pre><h3 id="二、scrapy-redis组件"><a href="#二、scrapy-redis组件" class="headerlink" title="二、scrapy-redis组件"></a>二、scrapy-redis组件</h3><p><strong>1、只使用scrapy-redis的去重功能</strong></p><p>[<img src="https://s2.loli.net/2022/06/23/bzFqy72Xd9PGigs.png" alt="img">]</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#一、源码：D:\python3.6\Lib\site-packages\scrapy_redis\dupefilter.py</span><span class="token comment">#二、配置scrapy使用redis提供的共享去重队列</span><span class="token comment">#2.1 在settings.py中配置链接Redis</span>REDIS_HOST <span class="token operator">=</span> <span class="token string">'localhost'</span>                            <span class="token comment"># 主机名</span>REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span>                                   <span class="token comment"># 端口</span>REDIS_URL <span class="token operator">=</span> <span class="token string">'redis://user:pass@hostname:9001'</span>       <span class="token comment"># 连接URL（优先于以上配置）</span>REDIS_PARAMS  <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                                  <span class="token comment"># Redis连接参数</span>REDIS_PARAMS<span class="token punctuation">[</span><span class="token string">'redis_cls'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'myproject.RedisClient'</span> <span class="token comment"># 指定连接Redis的Python模块</span>REDIS_ENCODING <span class="token operator">=</span> <span class="token string">"utf-8"</span>                            <span class="token comment"># redis编码类型  </span><span class="token comment"># 默认配置：D:\python3.6\Lib\site-packages\scrapy_redis\defaults.py</span><span class="token comment">#2.2 让scrapy使用共享的去重队列</span>DUPEFILTER_CLASS <span class="token operator">=</span> <span class="token string">"scrapy_redis.dupefilter.RFPDupeFilter"</span><span class="token comment">#使用scrapy-redis提供的去重功能，查看源码会发现是基于Redis的集合实现的</span><span class="token comment">#2.3、需要指定Redis中集合的key名，key=存放不重复Request字符串的集合</span>DUPEFILTER_KEY <span class="token operator">=</span> <span class="token string">'dupefilter:%(timestamp)s'</span><span class="token comment">#源码：dupefilter.py内一行代码key = defaults.DUPEFILTER_KEY % {'timestamp': int(time.time())}</span><span class="token comment">#2.4、去重规则源码分析dupefilter.py</span><span class="token keyword">def</span> <span class="token function">request_seen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns True if request was already seen.```Parameters----------request : scrapy.http.RequestReturns-------bool"""</span>fp <span class="token operator">=</span> self<span class="token punctuation">.</span>request_fingerprint<span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token comment"># This returns the number of values added, zero if already exists.</span>added <span class="token operator">=</span> self<span class="token punctuation">.</span>server<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token keyword">return</span> added <span class="token operator">==</span> <span class="token number">0</span>```<span class="token comment">#2.5、将request请求转成一串字符后再存入集合</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> Request<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>request <span class="token keyword">import</span> request_fingerprintreq <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>result<span class="token operator">=</span>request_fingerprint<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">#75d6587d87b3f4f3aa574b33dbd69ceeb9eafe7b</span><span class="token comment">#2.6、注意：</span>    <span class="token operator">-</span> URL参数位置不同时，计算结果一致；    <span class="token operator">-</span> 默认请求头不在计算范围，include_headers可以设置指定请求头    <span class="token operator">-</span> 示范：    <span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils <span class="token keyword">import</span> request    <span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> Request     ```req <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://www.baidu.com?name=8&amp;id=1'</span><span class="token punctuation">,</span>callback<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'k1'</span><span class="token punctuation">:</span><span class="token string">'vvvvv'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>result1 <span class="token operator">=</span> request<span class="token punctuation">.</span>request_fingerprint<span class="token punctuation">(</span>req<span class="token punctuation">,</span>include_headers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'cookies'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> req <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://www.baidu.com?id=1&amp;name=8'</span><span class="token punctuation">,</span>callback<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'k1'</span><span class="token punctuation">:</span><span class="token number">666</span><span class="token punctuation">}</span><span class="token punctuation">)</span> result2 <span class="token operator">=</span> request<span class="token punctuation">.</span>request_fingerprint<span class="token punctuation">(</span>req<span class="token punctuation">,</span>include_headers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'cookies'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>result1 <span class="token operator">==</span> result2<span class="token punctuation">)</span> <span class="token comment">#True</span></code></pre><p><strong>2、使用scrapy-redis的去重+调度实现分布式爬取</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#1、源码：D:\python3.6\Lib\site-packages\scrapy_redis\scheduler.py</span><span class="token comment">#2、settings.py配置</span><span class="token comment"># Enables scheduling storing requests queue in redis.</span>SCHEDULER <span class="token operator">=</span> <span class="token string">"scrapy_redis.scheduler.Scheduler"</span>       <span class="token comment"># 调度器将不重复的任务用pickle序列化后放入共享任务队列，默认使用优先级队列（默认），其他：PriorityQueue（有序集合），FifoQueue（列表）、LifoQueue（列表）               </span>SCHEDULER_QUEUE_CLASS <span class="token operator">=</span> <span class="token string">'scrapy_redis.queue.PriorityQueue'</span>          <span class="token comment"># 对保存到redis中的request对象进行序列化，默认使用pickle</span>SCHEDULER_SERIALIZER <span class="token operator">=</span> <span class="token string">"scrapy_redis.picklecompat"</span>   <span class="token comment"># 调度器中请求任务序列化后存放在redis中的key               </span>SCHEDULER_QUEUE_KEY <span class="token operator">=</span> <span class="token string">'%(spider)s:requests'</span>    <span class="token comment"># 是否在关闭时候保留原来的调度器和去重记录，True=保留，False=清空                     </span>SCHEDULER_PERSIST <span class="token operator">=</span> <span class="token boolean">True</span>       <span class="token comment"># 是否在开始之前清空 调度器和去重记录，True=清空，False=不清空                                     </span>SCHEDULER_FLUSH_ON_START <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token comment"># 去调度器中获取数据时，如果为空，最多等待时间（最后没数据，未获取到）。如果没有则立刻返回会造成空循环次数过多，cpu占用率飙升                                </span>SCHEDULER_IDLE_BEFORE_CLOSE <span class="token operator">=</span> <span class="token number">10</span>           <span class="token comment"># 去重规则，在redis中保存时对应的key                         </span>SCHEDULER_DUPEFILTER_KEY <span class="token operator">=</span> <span class="token string">'%(spider)s:dupefilter'</span>      <span class="token comment"># 去重规则对应处理的类，将任务request_fingerprint(request)得到的字符串放入去重队列            </span>SCHEDULER_DUPEFILTER_CLASS <span class="token operator">=</span> <span class="token string">'scrapy_redis.dupefilter.RFPDupeFilter'</span></code></pre><p><strong>3、持久化</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#从目标站点获取并解析出数据后保存成item对象，会由引擎交给pipeline进行持久化/保存到数据库,scrapy-redis提供了一个pipeline组件，可以帮我们把item存到redis中</span><span class="token comment">#1、将item持久化到redis时，指定key和序列化函数 </span>REDIS_ITEMS_KEY <span class="token operator">=</span> <span class="token string">'%(spider)s:items'</span>REDIS_ITEMS_SERIALIZER <span class="token operator">=</span> <span class="token string">'json.dumps'</span><span class="token comment">#2、使用列表保存item数据</span></code></pre><p><strong>4、从Redis中获取起始URL</strong></p><pre class="language-python" data-language="python"><code class="language-python">scrapy程序爬取目标站点，一旦爬取完毕后就结束了，如果目标站点更新内容了，我们想重新爬取，那么只能再重新启动scrapy，非常麻烦scrapy<span class="token operator">-</span>redis提供了一种供，让scrapy从redis中获取起始url，如果没有scrapy则过一段时间再来取而不会关闭这样我们就只需要写一个简单的脚本程序，定期往redis队列里放入一个起始url。<span class="token comment">#具体配置如下</span><span class="token comment">#1、编写爬虫时，起始URL从redis的Key中获取</span>REDIS_START_URLS_KEY <span class="token operator">=</span> <span class="token string">'%(name)s:start_urls'</span>    <span class="token comment">#2、获取起始URL时，去集合中获取还是去列表中获取？True，集合；False，列表</span>REDIS_START_URLS_AS_SET <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token comment"># 获取起始URL时，如果为True，则使用self.server.spop；如果为False，则使用self.server.lpop</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 分布式爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫-分布式爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests</title>
      <link href="/2021/10/13/requests/"/>
      <url>/2021/10/13/requests/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>requests</p><span id="more"></span><p><strong>requests</strong></p><h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#介绍：使用requests可以模拟浏览器的请求，比起之前用到的urllib，requests模块的api更加便捷（本质就是封装了urllib3）</span><span class="token comment">#注意：requests库发送请求将网页内容下载下来以后，并不会执行js代码，这需要我们自己分析目标站点然后发起新的request请求</span><span class="token comment">#安装：pip3 install requests</span><span class="token comment">#各种请求方式：常用的就是requests.get()和requests.post()</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> requests<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com/events'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/put'</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/delete'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>options<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span><span class="token comment"># 建议在正式学习requests前，先熟悉下HTTP协议</span></code></pre><p><a href="http://docs.python-requests.org/en/master/">官网链接：http://docs.python-requests.org/en/master/</a></p><h3 id="二-基于GET请求"><a href="#二-基于GET请求" class="headerlink" title="二 基于GET请求"></a>二 基于GET请求</h3><p><strong>1、基本请求</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsresponse<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p><strong>2、带参数的GET请求-&gt;params</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#在请求头内将自己伪装成浏览器，否则百度不会正常返回页面内容</span><span class="token keyword">import</span> requestsresponse<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/s?wd=python&amp;pn=1'</span><span class="token punctuation">,</span>                      headers<span class="token operator">=</span><span class="token punctuation">{</span>                        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36'</span><span class="token punctuation">,</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment">#如果查询关键词是中文或者有其他特殊符号，则不得不进行url编码</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencodewd<span class="token operator">=</span><span class="token string">'lqz老师'</span>encode_res<span class="token operator">=</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'k'</span><span class="token punctuation">:</span>wd<span class="token punctuation">}</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>keyword<span class="token operator">=</span>encode_res<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token comment"># 然后拼接成url</span>url<span class="token operator">=</span><span class="token string">'https://www.baidu.com/s?wd=%s&amp;pn=1'</span> <span class="token operator">%</span>keywordresponse<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>                      headers<span class="token operator">=</span><span class="token punctuation">{</span>                        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36'</span><span class="token punctuation">,</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span>res1<span class="token operator">=</span>response<span class="token punctuation">.</span>text<span class="token comment">#上述操作可以用requests模块的一个params参数搞定，本质还是调用urlencode</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencodewd<span class="token operator">=</span><span class="token string">'lqz老师'</span>pn<span class="token operator">=</span><span class="token number">1</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/s'</span><span class="token punctuation">,</span>                      params<span class="token operator">=</span><span class="token punctuation">{</span>                          <span class="token string">'wd'</span><span class="token punctuation">:</span>wd<span class="token punctuation">,</span>                          <span class="token string">'pn'</span><span class="token punctuation">:</span>pn                      <span class="token punctuation">}</span><span class="token punctuation">,</span>                      headers<span class="token operator">=</span><span class="token punctuation">{</span>                        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36'</span><span class="token punctuation">,</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span>res2<span class="token operator">=</span>response<span class="token punctuation">.</span>text<span class="token comment">#验证结果，打开a.html与b.html页面内容一样</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.html'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res1<span class="token punctuation">)</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'b.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res2<span class="token punctuation">)</span></code></pre><p><strong>3、带参数的GET请求-&gt;headers</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#通常我们在发送请求时都需要带上请求头，请求头是将自身伪装成浏览器的关键，常见的有用的请求头如下</span>HostReferer <span class="token comment">#大型网站通常都会根据该参数判断请求的来源</span>User<span class="token operator">-</span>Agent <span class="token comment">#客户端</span>Cookie <span class="token comment">#Cookie信息虽然包含在请求头里，但requests模块有单独的参数来处理他，headers={}内就不要放它了</span><span class="token comment">#添加headers(浏览器会识别请求头,不加可能会被拒绝访问,比如访问https://www.zhihu.com/explore)</span><span class="token keyword">import</span> requestsresponse<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.zhihu.com/explore'</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>status_code <span class="token comment">#500</span><span class="token comment">#自己定制headers</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.76 Mobile Safari/537.36'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>respone<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.zhihu.com/explore'</span><span class="token punctuation">,</span>                     headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span> <span class="token comment">#200</span></code></pre><p><strong>4、带参数的GET请求-&gt;cookies</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#登录github，然后从浏览器中获取cookies，以后就可以直接拿着cookie登录了，无需输入用户名密码</span><span class="token keyword">import</span> requestsCookies<span class="token operator">=</span><span class="token punctuation">{</span>   <span class="token string">'user_session'</span><span class="token punctuation">:</span><span class="token string">'wGMHFJKgDcmRIVvcA14_Wrt_3xaUyJNsBnPbYzEL6L0bHcfc'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/settings/emails'</span><span class="token punctuation">,</span>             cookies<span class="token operator">=</span>Cookies<span class="token punctuation">)</span> <span class="token comment">#github对请求头没有什么限制，我们无需定制user-agent，对于其他网站可能还需要定制</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'378533872@qq.com'</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">#True</span></code></pre><h3 id="三-基于POST请求"><a href="#三-基于POST请求" class="headerlink" title="三 基于POST请求"></a>三 基于POST请求</h3><p><strong>1、介绍</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#GET请求</span>HTTP默认的请求方法就是GET     <span class="token operator">*</span> 没有请求体     <span class="token operator">*</span> 数据必须在1K之内！     <span class="token operator">*</span> GET请求数据会暴露在浏览器的地址栏中GET请求常用的操作：       <span class="token number">1.</span> 在浏览器的地址栏中直接给出URL，那么就一定是GET请求       <span class="token number">2.</span> 点击页面上的超链接也一定是GET请求       <span class="token number">3.</span> 提交表单时，表单默认使用GET请求，但可以设置为POST<span class="token comment">#POST请求</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 数据不会出现在地址栏中<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 数据的大小没有上限<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 有请求体<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 请求体中如果存在中文，会使用URL编码！<span class="token comment">#！！！requests.post()用法与requests.get()完全一致，特殊的是requests.post()有一个data参数，用来存放请求体数据</span></code></pre><p><strong>2、发送post请求，模拟浏览器的登录行为</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#对于登录来说，应该输错用户名或密码然后分析抓包流程，用脑子想一想，输对了浏览器就跳转了，还分析个毛线，累死你也找不到包</span><span class="token triple-quoted-string string">'''一 目标站点分析    浏览器输入https://github.com/login    然后输入错误的账号密码，抓包    发现登录行为是post提交到：https://github.com/session    而且请求头包含cookie    而且请求体包含：        commit:Sign in        utf8:✓        authenticity_token:lbI8IJCwGslZS8qJPnof5e7ZkCoSoMn6jmDTsL1r/m06NLyIbw7vCrpwrFAPzHMep3Tmf/TSJVoXWrvDZaVwxQ==        login:egonlin        password:123二 流程分析    先GET：https://github.com/login拿到初始cookie与authenticity_token    返回POST：https://github.com/session， 带上初始cookie，带上请求体（authenticity_token，用户名，密码等）    最后拿到登录cookie```ps：如果密码时密文形式，则可以先输错账号，输对密码，然后到浏览器中拿到加密后的密码，github的密码是明文```'''</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token comment">#第一次请求</span>r1<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/login'</span><span class="token punctuation">)</span>r1_cookie<span class="token operator">=</span>r1<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#拿到初始cookie(未被授权)</span>authenticity_token<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'name="authenticity_token".*?value="(.*?)"'</span><span class="token punctuation">,</span>r1<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#从页面中拿到CSRF TOKEN</span><span class="token comment">#第二次请求：带着初始cookie和TOKEN发送POST请求给登录页面，带上账号密码</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'commit'</span><span class="token punctuation">:</span><span class="token string">'Sign in'</span><span class="token punctuation">,</span>    <span class="token string">'utf8'</span><span class="token punctuation">:</span><span class="token string">'✓'</span><span class="token punctuation">,</span>    <span class="token string">'authenticity_token'</span><span class="token punctuation">:</span>authenticity_token<span class="token punctuation">,</span>    <span class="token string">'login'</span><span class="token punctuation">:</span><span class="token string">'317828332@qq.com'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span><span class="token string">'alex3714'</span><span class="token punctuation">}</span>r2<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://github.com/session'</span><span class="token punctuation">,</span>             data<span class="token operator">=</span>data<span class="token punctuation">,</span>             cookies<span class="token operator">=</span>r1_cookie             <span class="token punctuation">)</span>login_cookie<span class="token operator">=</span>r2<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#第三次请求：以后的登录，拿着login_cookie就可以,比如访问一些个人配置</span>r3<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/settings/emails'</span><span class="token punctuation">,</span>                cookies<span class="token operator">=</span>login_cookie<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'317828332@qq.com'</span> <span class="token keyword">in</span> r3<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">#True</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> resession<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#第一次请求</span>r1<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/login'</span><span class="token punctuation">)</span>authenticity_token<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'name="authenticity_token".*?value="(.*?)"'</span><span class="token punctuation">,</span>r1<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#从页面中拿到CSRF TOKEN</span><span class="token comment">#第二次请求</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'commit'</span><span class="token punctuation">:</span><span class="token string">'Sign in'</span><span class="token punctuation">,</span>    <span class="token string">'utf8'</span><span class="token punctuation">:</span><span class="token string">'✓'</span><span class="token punctuation">,</span>    <span class="token string">'authenticity_token'</span><span class="token punctuation">:</span>authenticity_token<span class="token punctuation">,</span>    <span class="token string">'login'</span><span class="token punctuation">:</span><span class="token string">'317828332@qq.com'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span><span class="token string">'alex3714'</span><span class="token punctuation">}</span>r2<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://github.com/session'</span><span class="token punctuation">,</span>             data<span class="token operator">=</span>data<span class="token punctuation">,</span>             <span class="token punctuation">)</span><span class="token comment">#第三次请求</span>r3<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/settings/emails'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'317828332@qq.com'</span> <span class="token keyword">in</span> r3<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">#True</span></code></pre><p><strong>3、补充</strong></p><pre class="language-python" data-language="python"><code class="language-python">requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'xxxxxxxx'</span><span class="token punctuation">,</span>              data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'xxx'</span><span class="token punctuation">:</span><span class="token string">'yyy'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">#没有指定请求头,#默认的请求头:application/x-www-form-urlencoed</span><span class="token comment">#如果我们自定义请求头是application/json,并且用data传值, 则服务端取不到值</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>              data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">''</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              headers<span class="token operator">=</span><span class="token punctuation">{</span>                  <span class="token string">'content-type'</span><span class="token punctuation">:</span><span class="token string">'application/json'</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>              json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">''</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span> <span class="token comment">#默认的请求头:application/json</span></code></pre><h3 id="四-响应Response"><a href="#四-响应Response" class="headerlink" title="四 响应Response"></a>四 响应Response</h3><p><strong>1、response属性</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsrespone<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.jianshu.com'</span><span class="token punctuation">)</span><span class="token comment"># respone属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>history<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span><span class="token comment">#关闭：response.close()</span><span class="token keyword">from</span> contextlib <span class="token keyword">import</span> closing<span class="token keyword">with</span> closing<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> response<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p><strong>2、编码问题</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#编码问题</span><span class="token keyword">import</span> requestsresponse<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.autohome.com/news'</span><span class="token punctuation">)</span><span class="token comment"># response.encoding='gbk' #汽车之家网站返回的页面内容为gb2312编码的，而requests的默认编码为ISO-8859-1，如果不设置成gbk则中文乱码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p><strong>3、获取二进制数据</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsresponse<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1509868306530&amp;di=712e4ef3ab258b36e9f4b48e85a81c9d&amp;imgtype=0&amp;src=http%3A%2F%2Fc.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F11385343fbf2b211e1fb58a1c08065380dd78e0c.jpg'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.jpg'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token comment">#stream参数:一点一点的取,比如下载视频时,如果视频100G,用response.content然后一下子写到文件中是不合理的</span><span class="token keyword">import</span> requestsresponse<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://gss3.baidu.com/6LZ0ej3k1Qd3ote6lo7D0j9wehsv/tieba-smallvideo-transcode/1767502_56ec685f9c7ec542eeaf6eac93a65dc7_6fe25cd1347c_3.mp4'</span><span class="token punctuation">,</span>                      stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'b.mp4'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> response<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre><p><strong>4、解析json</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#解析json</span><span class="token keyword">import</span> requestsresponse<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span><span class="token keyword">import</span> jsonres1<span class="token operator">=</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">#太麻烦</span>res2<span class="token operator">=</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#直接获取json数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>res1 <span class="token operator">==</span> res2<span class="token punctuation">)</span> <span class="token comment">#True</span></code></pre><p><strong>5、Redirection and History</strong></p><pre class="language-python" data-language="python"><code class="language-python">By default Requests will perform location redirection <span class="token keyword">for</span> <span class="token builtin">all</span> verbs <span class="token keyword">except</span> HEAD<span class="token punctuation">.</span>We can use the history <span class="token builtin">property</span> of the Response <span class="token builtin">object</span> to track redirection<span class="token punctuation">.</span>The Response<span class="token punctuation">.</span>history <span class="token builtin">list</span> contains the Response objects that were created <span class="token keyword">in</span> order to complete the request<span class="token punctuation">.</span> The <span class="token builtin">list</span> <span class="token keyword">is</span> <span class="token builtin">sorted</span> <span class="token keyword">from</span> the oldest to the most recent response<span class="token punctuation">.</span>For example<span class="token punctuation">,</span> GitHub redirects <span class="token builtin">all</span> HTTP requests to HTTPS<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://github.com'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>url<span class="token string">'https://github.com/'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>status_code<span class="token number">200</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">]</span>If you're using GET<span class="token punctuation">,</span> OPTIONS<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> PATCH <span class="token keyword">or</span> DELETE<span class="token punctuation">,</span> you can disable redirection handling <span class="token keyword">with</span> the allow_redirects parameter<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://github.com'</span><span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>status_code<span class="token number">301</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token punctuation">]</span>If you're using HEAD<span class="token punctuation">,</span> you can enable redirection <span class="token keyword">as</span> well<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token string">'http://github.com'</span><span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>url<span class="token string">'https://github.com/'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token comment">#第一次请求</span>r1<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/login'</span><span class="token punctuation">)</span>r1_cookie<span class="token operator">=</span>r1<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#拿到初始cookie(未被授权)</span>authenticity_token<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'name="authenticity_token".*?value="(.*?)"'</span><span class="token punctuation">,</span>r1<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#从页面中拿到CSRF TOKEN</span><span class="token comment">#第二次请求：带着初始cookie和TOKEN发送POST请求给登录页面，带上账号密码</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'commit'</span><span class="token punctuation">:</span><span class="token string">'Sign in'</span><span class="token punctuation">,</span>    <span class="token string">'utf8'</span><span class="token punctuation">:</span><span class="token string">'✓'</span><span class="token punctuation">,</span>    <span class="token string">'authenticity_token'</span><span class="token punctuation">:</span>authenticity_token<span class="token punctuation">,</span>    <span class="token string">'login'</span><span class="token punctuation">:</span><span class="token string">'317828332@qq.com'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span><span class="token string">'alex3714'</span><span class="token punctuation">}</span><span class="token comment">#测试一：没有指定allow_redirects=False,则响应头中出现Location就跳转到新页面，r2代表新页面的response</span>r2<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://github.com/session'</span><span class="token punctuation">,</span>             data<span class="token operator">=</span>data<span class="token punctuation">,</span>             cookies<span class="token operator">=</span>r1_cookie             <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span> <span class="token comment">#200</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token comment">#看到的是跳转后的页面</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>history<span class="token punctuation">)</span> <span class="token comment">#看到的是跳转前的response</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">#看到的是跳转前的response.text</span><span class="token comment">#测试二：指定allow_redirects=False,则响应头中即便出现Location也不会跳转到新页面，r2代表的仍然是老页面的response</span>r2<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://github.com/session'</span><span class="token punctuation">,</span>             data<span class="token operator">=</span>data<span class="token punctuation">,</span>             cookies<span class="token operator">=</span>r1_cookie<span class="token punctuation">,</span>             allow_redirects<span class="token operator">=</span><span class="token boolean">False</span>             <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span> <span class="token comment">#302</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token comment">#看到的是跳转前的页面https://github.com/session</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>history<span class="token punctuation">)</span> <span class="token comment">#[]</span></code></pre><h3 id="五-高级用法"><a href="#五-高级用法" class="headerlink" title="五 高级用法"></a>五 高级用法</h3><p><strong>1、SSL Cert Verification</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#证书验证(大部分网站都是https)</span><span class="token keyword">import</span> requestsrespone<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.12306.cn'</span><span class="token punctuation">)</span> <span class="token comment">#如果是ssl请求,首先检查证书是否合法,不合法则报错,程序终端</span><span class="token comment">#改进1:去掉报错,但是会报警告</span><span class="token keyword">import</span> requestsrespone<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.12306.cn'</span><span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment">#不验证证书,报警告,返回200</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment">#改进2:去掉报错,并且去掉警报信息</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> requests<span class="token punctuation">.</span>packages <span class="token keyword">import</span> urllib3urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#关闭警告</span>respone<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.12306.cn'</span><span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment">#改进3:加上证书</span><span class="token comment">#很多网站都是https,但是不用证书也可以访问,大多数情况都是可以携带也可以不携带证书</span><span class="token comment">#知乎\百度等都是可带可不带</span><span class="token comment">#有硬性要求的,则必须带，比如对于定向的用户,拿到证书后才有权限访问某个特定网站</span><span class="token keyword">import</span> requestsrespone<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.12306.cn'</span><span class="token punctuation">,</span>                     cert<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'/path/server.crt'</span><span class="token punctuation">,</span>                           <span class="token string">'/path/key'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p><strong>2、使用代理</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#官网链接: http://docs.python-requests.org/en/master/user/advanced/#proxies</span><span class="token comment">#代理设置:先发送请求给代理,然后由代理帮忙发送(封ip是常见的事情)</span><span class="token keyword">import</span> requestsproxies<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'http://egon:123@localhost:9743'</span><span class="token punctuation">,</span><span class="token comment">#带用户名密码的代理,@符号前是用户名与密码</span>    <span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'http://localhost:9743'</span><span class="token punctuation">,</span>    <span class="token string">'https'</span><span class="token punctuation">:</span><span class="token string">'https://localhost:9743'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>respone<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.12306.cn'</span><span class="token punctuation">,</span>                     proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment">#支持socks代理,安装:pip install requests[socks]</span><span class="token keyword">import</span> requestsproxies <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'socks5://user:pass@host:port'</span><span class="token punctuation">,</span>    <span class="token string">'https'</span><span class="token punctuation">:</span> <span class="token string">'socks5://user:pass@host:port'</span><span class="token punctuation">}</span>respone<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.12306.cn'</span><span class="token punctuation">,</span>                     proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p><strong>3、超时设置</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#超时设置</span><span class="token comment">#两种超时:float or tuple</span><span class="token comment">#timeout=0.1 #代表接收数据的超时时间</span><span class="token comment">#timeout=(0.1,0.2)#0.1代表链接超时  0.2代表接收数据的超时时间</span><span class="token keyword">import</span> requestsrespone<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>                     timeout<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">)</span></code></pre><p><strong>4、 认证设置</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#官网链接：http://docs.python-requests.org/en/master/user/authentication/</span><span class="token comment">#认证设置:登陆网站是,弹出一个框,要求你输入用户名密码（与alter很类似），此时是无法获取html的</span><span class="token comment"># 但本质原理是拼接成请求头发送</span><span class="token comment">#         r.headers['Authorization'] = _basic_auth_str(self.username, self.password)</span><span class="token comment"># 一般的网站都不用默认的加密方式，都是自己写</span><span class="token comment"># 那么我们就需要按照网站的加密方式，自己写一个类似于_basic_auth_str的方法</span><span class="token comment"># 得到加密字符串后添加到请求头</span><span class="token comment">#         r.headers['Authorization'] =func('.....')</span><span class="token comment">#看一看默认的加密方式吧，通常网站都不会用默认的加密设置</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuthr<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span>auth<span class="token operator">=</span>HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment">#HTTPBasicAuth可以简写为如下格式</span><span class="token keyword">import</span> requestsr<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span>auth<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><p><strong>5、异常处理</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#异常处理</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> requests<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token comment">#可以查看requests.exceptions获取异常类型</span><span class="token keyword">try</span><span class="token punctuation">:</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.00001</span><span class="token punctuation">)</span><span class="token keyword">except</span> ReadTimeout<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'===:'</span><span class="token punctuation">)</span><span class="token comment"># except ConnectionError: #网络不通</span><span class="token comment">#     print('-----')</span><span class="token comment"># except Timeout:</span><span class="token comment">#     print('aaaaa')</span><span class="token keyword">except</span> RequestException<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span></code></pre><p><strong>6、上传文件</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsfiles<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.jpg'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>respone<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span>files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> requests </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-selenium</title>
      <link href="/2021/10/12/selenium/"/>
      <url>/2021/10/12/selenium/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>从入门到入狱之-爬虫-selenium</p><span id="more"></span><p><strong>selenium</strong></p><h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h3><pre class="language-python" data-language="python"><code class="language-python">selenium最初是一个自动化测试工具<span class="token punctuation">,</span>而爬虫中使用它主要是为了解决requests无法直接执行JavaScript代码的问题selenium本质是通过驱动浏览器，完全模拟浏览器的操作，比如跳转、输入、点击、下拉等，来拿到网页渲染之后的结果，可支持多种浏览器<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>PhantomJS<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Safari<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><p>[官网：<a href="http://selenium-python.readthedocs.io]">http://selenium-python.readthedocs.io]</a></p><h3 id="二-安装"><a href="#二-安装" class="headerlink" title="二 安装"></a>二 安装</h3><p><strong>1、有界面浏览器</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#安装：selenium+chromedriver</span>pip3 install selenium下载chromdriver<span class="token punctuation">.</span>exe放到python安装路径的scripts目录中即可，注意最新版本是<span class="token number">2.38</span>，并非<span class="token number">2.9</span>国内镜像网站地址：http<span class="token punctuation">:</span><span class="token operator">//</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token operator">/</span>chromedriver<span class="token operator">/</span><span class="token number">2.38</span><span class="token operator">/</span>最新的版本去官网找<span class="token punctuation">:</span>https<span class="token punctuation">:</span><span class="token operator">//</span>sites<span class="token punctuation">.</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>a<span class="token operator">/</span>chromium<span class="token punctuation">.</span>org<span class="token operator">/</span>chromedriver<span class="token operator">/</span>downloads<span class="token comment">#验证安装</span>C<span class="token punctuation">:</span>\Users\Administrator<span class="token operator">&gt;</span>python3Python <span class="token number">3.6</span><span class="token number">.1</span> <span class="token punctuation">(</span>v3<span class="token punctuation">.</span><span class="token number">6.1</span><span class="token punctuation">:</span>69c0db5<span class="token punctuation">,</span> Mar <span class="token number">21</span> <span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>MSC v<span class="token punctuation">.</span><span class="token number">1900</span> <span class="token number">64</span> bit <span class="token punctuation">(</span>AMD64<span class="token punctuation">)</span><span class="token punctuation">]</span> on win32Type <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token keyword">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> driver<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#弹出浏览器</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> driver<span class="token punctuation">.</span>page_source<span class="token comment">#注意：</span>selenium3默认支持的webdriver是Firfox，而Firefox需要安装geckodriver下载链接：https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>mozilla<span class="token operator">/</span>geckodriver<span class="token operator">/</span>releases</code></pre><p><strong>2、无界面浏览器</strong></p><p>PhantomJS不再更新</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#安装：selenium+phantomjs</span>pip3 install selenium下载phantomjs，解压后把phantomjs<span class="token punctuation">.</span>exe所在的<span class="token builtin">bin</span>目录放到环境变量下载链接：http<span class="token punctuation">:</span><span class="token operator">//</span>phantomjs<span class="token punctuation">.</span>org<span class="token operator">/</span>download<span class="token punctuation">.</span>html<span class="token comment">#验证安装</span>C<span class="token punctuation">:</span>\Users\Administrator<span class="token operator">&gt;</span>phantomjsphantomjs<span class="token operator">&gt;</span> console<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">'lqz gaga'</span><span class="token punctuation">)</span>lqz gagaundefinedphantomjs<span class="token operator">&gt;</span> <span class="token operator">^</span>CC<span class="token punctuation">:</span>\Users\Administrator<span class="token operator">&gt;</span>python3Python <span class="token number">3.6</span><span class="token number">.1</span> <span class="token punctuation">(</span>v3<span class="token punctuation">.</span><span class="token number">6.1</span><span class="token punctuation">:</span>69c0db5<span class="token punctuation">,</span> Mar <span class="token number">21</span> <span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>MSC v<span class="token punctuation">.</span><span class="token number">1900</span> <span class="token number">64</span> bit <span class="token punctuation">(</span>AMD64<span class="token punctuation">)</span><span class="token punctuation">]</span> on win32Type <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token keyword">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> driver<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>PhantomJS<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#无界面浏览器</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> driver<span class="token punctuation">.</span>page_source</code></pre><p>在 PhantomJS 年久失修, 后继无人的节骨眼<br>Chrome 出来救场, 再次成为了反爬虫 Team 的噩梦</p><p>自Google 发布 chrome 59 / 60 正式版 开始便支持<code>Headless mode</code></p><p>这意味着在无 GUI 环境下, PhantomJS 不再是唯一选择 **<br>**</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Optionschrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'window-size=1920x3000'</span><span class="token punctuation">)</span> <span class="token comment">#指定浏览器分辨率</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span> <span class="token comment">#谷歌文档提到需要加上这个属性来规避bug</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--hide-scrollbars'</span><span class="token punctuation">)</span> <span class="token comment">#隐藏滚动条, 应对一些特殊页面</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'blink-settings=imagesEnabled=false'</span><span class="token punctuation">)</span> <span class="token comment">#不加载图片, 提升速度</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span> <span class="token comment">#浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败</span>chrome_options<span class="token punctuation">.</span>binary_location <span class="token operator">=</span> <span class="token string">r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"</span> <span class="token comment">#手动指定使用的浏览器位置</span>driver<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hao123'</span> <span class="token keyword">in</span> driver<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#切记关闭浏览器，回收资源</span></code></pre><h3 id="三-基本使用"><a href="#三-基本使用" class="headerlink" title="三 基本使用"></a>三 基本使用</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By <span class="token comment">#按照什么方式查找，By.ID,By.CSS_SELECTOR</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys <span class="token comment">#键盘按键操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait <span class="token comment">#等待页面加载某些元素</span>browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>```input_tag<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'美女'</span><span class="token punctuation">)</span> <span class="token comment">#python2中输入中文错误，字符串前加个u</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span> <span class="token comment">#输入回车</span>```    wait<span class="token operator">=</span>WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'content_left'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#等到id为content_left的元素加载完毕,最多等10秒</span>```<span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>current_url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>```<span class="token keyword">finally</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="四-选择器"><a href="#四-选择器" class="headerlink" title="四 选择器"></a>四 选择器</h3><p><strong>一 基本用法</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#官网链接：http://selenium-python.readthedocs.io/locating-elements.html</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By <span class="token comment">#按照什么方式查找，By.ID,By.CSS_SELECTOR</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys <span class="token comment">#键盘按键操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait <span class="token comment">#等待页面加载某些元素</span><span class="token keyword">import</span> timedriver<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>wait<span class="token operator">=</span>WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">#===============所有方法===================</span>    <span class="token comment"># 1、find_element_by_id</span>    <span class="token comment"># 2、find_element_by_link_text</span>    <span class="token comment"># 3、find_element_by_partial_link_text</span>    <span class="token comment"># 4、find_element_by_tag_name</span>    <span class="token comment"># 5、find_element_by_class_name</span>    <span class="token comment"># 6、find_element_by_name</span>    <span class="token comment"># 7、find_element_by_css_selector</span>    <span class="token comment"># 8、find_element_by_xpath</span>    <span class="token comment"># 强调：</span>    <span class="token comment"># 1、上述均可以改写成find_element(By.ID,'kw')的形式</span>    <span class="token comment"># 2、find_elements_by_xxx的形式是查找到多个元素，结果为列表</span>```<span class="token comment">#===============示范用法===================</span><span class="token comment"># 1、find_element_by_id</span><span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2、find_element_by_link_text</span><span class="token comment"># login=driver.find_element_by_link_text('登录')</span><span class="token comment"># login.click()</span><span class="token comment"># 3、find_element_by_partial_link_text</span>login<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_elements_by_partial_link_text<span class="token punctuation">(</span><span class="token string">'录'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>login<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 4、find_element_by_tag_name</span><span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5、find_element_by_class_name</span>button<span class="token operator">=</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>element_to_be_clickable<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span><span class="token string">'tang-pass-footerBarULogin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 6、find_element_by_name</span>input_user<span class="token operator">=</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span><span class="token string">'userName'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>input_pwd<span class="token operator">=</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>commit<span class="token operator">=</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>element_to_be_clickable<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'TANGRAM__PSP_10__submit'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>input_user<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'18611453110'</span><span class="token punctuation">)</span>input_pwd<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'xxxxxx'</span><span class="token punctuation">)</span>commit<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 7、find_element_by_css_selector</span>driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'#kw'</span><span class="token punctuation">)</span><span class="token comment"># 8、find_element_by_xpath</span>```    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>二 xpath</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#官网链接：http://selenium-python.readthedocs.io/locating-elements.html</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By <span class="token comment">#按照什么方式查找，By.ID,By.CSS_SELECTOR</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys <span class="token comment">#键盘按键操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait <span class="token comment">#等待页面加载某些元素</span><span class="token keyword">import</span> timedriver<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>PhantomJS<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://doc.scrapy.org/en/latest/_static/selectors-sample1.html'</span><span class="token punctuation">)</span><span class="token comment"># wait=WebDriverWait(driver,3)</span>driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#使用隐式等待</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment"># find_element_by_xpath</span>    <span class="token comment">#//与/</span>    <span class="token comment"># driver.find_element_by_xpath('//body/a')  # 开头的//代表从整篇文档中寻找,body之后的/代表body的儿子，这一行找不到就会报错了</span>    driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//body//a'</span><span class="token punctuation">)</span>  <span class="token comment"># 开头的//代表从整篇文档中寻找,body之后的//代表body的子子孙孙</span>    driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'body a'</span><span class="token punctuation">)</span>```<span class="token comment">#取第n个</span>res1<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">'//body//a[1]'</span><span class="token punctuation">)</span> <span class="token comment">#取第一个a标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>res1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment">#按照属性查找,下述三者查找效果一样</span>res1<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//a[5]'</span><span class="token punctuation">)</span>res2<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//a[@href="image5.html"]'</span><span class="token punctuation">)</span>res3<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@href,"image5")]'</span><span class="token punctuation">)</span> <span class="token comment">#模糊查找</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==&gt;'</span><span class="token punctuation">,</span> res1<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==&gt;'</span><span class="token punctuation">,</span>res2<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==&gt;'</span><span class="token punctuation">,</span>res3<span class="token punctuation">.</span>text<span class="token punctuation">)</span>``````<span class="token comment">#其他</span>res1<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div/a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res1<span class="token punctuation">.</span>text<span class="token punctuation">)</span>res2<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//a[img/@src="image3_thumb.jpg"]'</span><span class="token punctuation">)</span> <span class="token comment">#找到子标签img的src属性为image3_thumb.jpg的a标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span>tag_name<span class="token punctuation">,</span>res2<span class="token punctuation">.</span>text<span class="token punctuation">)</span>res3 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[@name='continue'][@type='button']"</span><span class="token punctuation">)</span> <span class="token comment">#查看属性name为continue且属性type为button的input标签</span>res4 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[@name='continue'][@type='button']"</span><span class="token punctuation">)</span> <span class="token comment">#查看属性name为continue且属性type为button的所有标签</span>```        ```time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>```<span class="token keyword">finally</span><span class="token punctuation">:</span>    driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>doc<span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;html&gt; &lt;head&gt;  &lt;base href='http://example.com/' /&gt;  &lt;title&gt;Example website&lt;/title&gt; &lt;/head&gt; &lt;body&gt;  &lt;div id='images'&gt;   &lt;a href='image1.html'&gt;Name: My image 1 &lt;br /&gt;&lt;img src='image1_thumb.jpg' /&gt;&lt;/a&gt;   &lt;a href='image2.html'&gt;Name: My image 2 &lt;br /&gt;&lt;img src='image2_thumb.jpg' /&gt;&lt;/a&gt;   &lt;a href='image3.html'&gt;Name: My image 3 &lt;br /&gt;&lt;img src='image3_thumb.jpg' /&gt;&lt;/a&gt;   &lt;a href='image4.html'&gt;Name: My image 4 &lt;br /&gt;&lt;img src='image4_thumb.jpg' /&gt;&lt;/a&gt;   &lt;a href='image5.html' class='li li-item' name='items'&gt;Name: My image 5 &lt;br /&gt;&lt;img src='image5_thumb.jpg' /&gt;&lt;/a&gt;   &lt;a href='image6.html' name='items'&gt;&lt;span&gt;&lt;h5&gt;test&lt;/h5&gt;&lt;/span&gt;Name: My image 6 &lt;br /&gt;&lt;img src='image6_thumb.jpg' /&gt;&lt;/a&gt;  &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;'''</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml<span class="token operator">=</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token comment"># html=etree.parse('search.html',etree.HTMLParser())</span><span class="token comment"># 1 所有节点</span><span class="token comment"># a=html.xpath('//*')</span><span class="token comment"># 2 指定节点（结果为列表）</span><span class="token comment"># a=html.xpath('//head')</span><span class="token comment"># 3 子节点，子孙节点</span><span class="token comment"># a=html.xpath('//div/a')</span><span class="token comment"># a=html.xpath('//body/a') #无数据</span><span class="token comment"># a=html.xpath('//body//a')</span><span class="token comment"># 4 父节点</span><span class="token comment"># a=html.xpath('//body//a[@href="image1.html"]/..')</span><span class="token comment"># a=html.xpath('//body//a[1]/..')</span><span class="token comment"># 也可以这样</span><span class="token comment"># a=html.xpath('//body//a[1]/parent::*')</span><span class="token comment"># 5 属性匹配</span><span class="token comment"># a=html.xpath('//body//a[@href="image1.html"]')</span><span class="token comment"># 6 文本获取</span><span class="token comment"># a=html.xpath('//body//a[@href="image1.html"]/text()')</span><span class="token comment"># 7 属性获取</span><span class="token comment"># a=html.xpath('//body//a/@href')</span><span class="token comment"># # 注意从1 开始取（不是从0）</span><span class="token comment"># a=html.xpath('//body//a[1]/@href')</span><span class="token comment"># 8 属性多值匹配</span><span class="token comment">#  a 标签有多个class类，直接匹配就不可以了，需要用contains</span><span class="token comment"># a=html.xpath('//body//a[@class="li"]')</span><span class="token comment"># a=html.xpath('//body//a[contains(@class,"li")]')</span><span class="token comment"># a=html.xpath('//body//a[contains(@class,"li")]/text()')</span><span class="token comment"># 9 多属性匹配</span><span class="token comment"># a=html.xpath('//body//a[contains(@class,"li") or @name="items"]')</span><span class="token comment"># a=html.xpath('//body//a[contains(@class,"li") and @name="items"]/text()')</span><span class="token comment"># # a=html.xpath('//body//a[contains(@class,"li")]/text()')</span><span class="token comment"># 10 按序选择</span><span class="token comment"># a=html.xpath('//a[2]/text()')</span><span class="token comment"># a=html.xpath('//a[2]/@href')</span><span class="token comment"># 取最后一个</span><span class="token comment"># a=html.xpath('//a[last()]/@href')</span><span class="token comment"># 位置小于3的</span><span class="token comment"># a=html.xpath('//a[position()&lt;3]/@href')</span><span class="token comment"># 倒数第二个</span><span class="token comment"># a=html.xpath('//a[last()-2]/@href')</span><span class="token comment"># 11 节点轴选择</span><span class="token comment"># ancestor：祖先节点</span><span class="token comment"># 使用了* 获取所有祖先节点</span><span class="token comment"># a=html.xpath('//a/ancestor::*')</span><span class="token comment"># # 获取祖先节点中的div</span><span class="token comment"># a=html.xpath('//a/ancestor::div')</span><span class="token comment"># attribute：属性值</span><span class="token comment"># a=html.xpath('//a[1]/attribute::*')</span><span class="token comment"># child：直接子节点</span><span class="token comment"># a=html.xpath('//a[1]/child::*')</span><span class="token comment"># descendant：所有子孙节点</span><span class="token comment"># a=html.xpath('//a[6]/descendant::*')</span><span class="token comment"># following:当前节点之后所有节点</span><span class="token comment"># a=html.xpath('//a[1]/following::*')</span><span class="token comment"># a=html.xpath('//a[1]/following::*[1]/@href')</span><span class="token comment"># following-sibling:当前节点之后同级节点</span><span class="token comment"># a=html.xpath('//a[1]/following-sibling::*')</span><span class="token comment"># a=html.xpath('//a[1]/following-sibling::a')</span><span class="token comment"># a=html.xpath('//a[1]/following-sibling::*[2]')</span><span class="token comment"># a=html.xpath('//a[1]/following-sibling::*[2]/@href')</span><span class="token comment"># print(a)</span></code></pre><p><strong>三 获取标签属性</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By <span class="token comment">#按照什么方式查找，By.ID,By.CSS_SELECTOR</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys <span class="token comment">#键盘按键操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait <span class="token comment">#等待页面加载某些元素</span>browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.amazon.cn/'</span><span class="token punctuation">)</span>wait<span class="token operator">=</span>WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'cc-lm-tcgShowImgContainer'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tag<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span><span class="token string">'#cc-lm-tcgShowImgContainer img'</span><span class="token punctuation">)</span><span class="token comment">#获取标签属性，</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#获取标签ID，位置，名称，大小（了解）</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>tag_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>size<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="五-等待元素被加载"><a href="#五-等待元素被加载" class="headerlink" title="五 等待元素被加载"></a>五 等待元素被加载</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#1、selenium只是模拟浏览器的行为，而浏览器解析页面是需要时间的（执行css，js），一些元素可能需要过一段时间才能加载出来，为了保证能查找到元素，必须等待</span><span class="token comment">#2、等待的方式分两种：</span>隐式等待：在browser<span class="token punctuation">.</span>get（<span class="token string">'xxx'</span>）前就设置，针对所有元素有效显式等待：在browser<span class="token punctuation">.</span>get（<span class="token string">'xxx'</span>）之后设置，只针对某个元素有效<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By <span class="token comment">#按照什么方式查找，By.ID,By.CSS_SELECTOR</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys <span class="token comment">#键盘按键操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait <span class="token comment">#等待页面加载某些元素</span>browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#隐式等待:在查找所有元素时，如果尚未被加载，则等10秒</span>browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>input_tag<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'美女'</span><span class="token punctuation">)</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>contents<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'content_left'</span><span class="token punctuation">)</span> <span class="token comment">#没有等待环节而直接查找，找不到则会报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By <span class="token comment">#按照什么方式查找，By.ID,By.CSS_SELECTOR</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys <span class="token comment">#键盘按键操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait <span class="token comment">#等待页面加载某些元素</span>browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>input_tag<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'美女'</span><span class="token punctuation">)</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span><span class="token comment">#显式等待：显式地等待某个元素被加载</span>wait<span class="token operator">=</span>WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'content_left'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>contents<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span><span class="token string">'#content_left'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="六-元素交互操作"><a href="#六-元素交互操作" class="headerlink" title="六 元素交互操作"></a>六 元素交互操作</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By <span class="token comment">#按照什么方式查找，By.ID,By.CSS_SELECTOR</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys <span class="token comment">#键盘按键操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait <span class="token comment">#等待页面加载某些元素</span>browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.amazon.cn/'</span><span class="token punctuation">)</span>wait<span class="token operator">=</span>WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>input_tag<span class="token operator">=</span>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'twotabsearchtextbox'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'iphone 8'</span><span class="token punctuation">)</span>button<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'#nav-search &gt; form &gt; div.nav-right &gt; div &gt; input'</span><span class="token punctuation">)</span>button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> timetime<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>input_tag<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'twotabsearchtextbox'</span><span class="token punctuation">)</span>input_tag<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#清空输入框</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'iphone7plus'</span><span class="token punctuation">)</span>button<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'#nav-search &gt; form &gt; div.nav-right &gt; div &gt; input'</span><span class="token punctuation">)</span>button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># browser.close()</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By  <span class="token comment"># 按照什么方式查找，By.ID,By.CSS_SELECTOR</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys  <span class="token comment"># 键盘按键操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait  <span class="token comment"># 等待页面加载某些元素</span><span class="token keyword">import</span> timedriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span><span class="token punctuation">)</span>wait<span class="token operator">=</span>WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># driver.implicitly_wait(3)  # 使用隐式等待</span><span class="token keyword">try</span><span class="token punctuation">:</span>    driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'iframeResult'</span><span class="token punctuation">)</span> <span class="token comment">##切换到iframeResult</span>    sourse<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'draggable'</span><span class="token punctuation">)</span>    target<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'droppable'</span><span class="token punctuation">)</span>```<span class="token comment">#方式一：基于同一个动作链串行执行</span><span class="token comment"># actions=ActionChains(driver) #拿到动作链对象</span><span class="token comment"># actions.drag_and_drop(sourse,target) #把动作放到动作链中，准备串行执行</span><span class="token comment"># actions.perform()</span><span class="token comment">#方式二：不同的动作链，每次移动的位移都不同</span>```    ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">.</span>click_and_hold<span class="token punctuation">(</span>sourse<span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>    distance<span class="token operator">=</span>target<span class="token punctuation">.</span>location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token operator">-</span>sourse<span class="token punctuation">.</span>location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span>```track<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> track <span class="token operator">&lt;</span> distance<span class="token punctuation">:</span>    ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">.</span>move_by_offset<span class="token punctuation">(</span>xoffset<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>yoffset<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>    track<span class="token operator">+=</span><span class="token number">2</span>ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>```<span class="token keyword">finally</span><span class="token punctuation">:</span>    driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By <span class="token comment">#按照什么方式查找，By.ID,By.CSS_SELECTOR</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys <span class="token comment">#键盘按键操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait <span class="token comment">#等待页面加载某些元素</span><span class="token keyword">try</span><span class="token punctuation">:</span>    browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>    browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'alert("hello world")'</span><span class="token punctuation">)</span> <span class="token comment">#打印警告</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#frame相当于一个单独的网页，在父frame里是无法直接查看到子frame的元素的，必须switch_to_frame切到该frame下，才能进一步查找</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By <span class="token comment">#按照什么方式查找，By.ID,By.CSS_SELECTOR</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys <span class="token comment">#键盘按键操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait <span class="token comment">#等待页面加载某些元素</span><span class="token keyword">try</span><span class="token punctuation">:</span>    browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span><span class="token punctuation">)</span>```browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'iframeResult'</span><span class="token punctuation">)</span> <span class="token comment">#切换到id为iframeResult的frame</span>```    tag1<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'droppable'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tag1<span class="token punctuation">)</span>```<span class="token comment"># tag2=browser.find_element_by_id('textareaCode') #报错，在子frame里无法查看到父frame的元素</span>browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>parent_frame<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#切回父frame,就可以查找到了</span>tag2<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'textareaCode'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tag2<span class="token punctuation">)</span>```<span class="token keyword">finally</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="七-其他"><a href="#七-其他" class="headerlink" title="七 其他"></a>七 其他</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#模拟浏览器的前进后退</span><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.sina.com.cn/'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#cookies</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.zhihu.com/explore'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>add_cookie<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'k1'</span><span class="token punctuation">:</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token string">'k2'</span><span class="token punctuation">:</span><span class="token string">'yyy'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># browser.delete_all_cookies()</span><span class="token comment">#选项卡管理：切换选项卡，有js的方式windows.open,有windows快捷键：ctrl+t等，最通用的就是js的方式</span><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.open()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>window_handles<span class="token punctuation">)</span> <span class="token comment">#获取所有的选项卡</span>browser<span class="token punctuation">.</span>switch_to_window<span class="token punctuation">(</span>browser<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>switch_to_window<span class="token punctuation">(</span>browser<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.sina.com.cn'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> TimeoutException<span class="token punctuation">,</span>NoSuchElementException<span class="token punctuation">,</span>NoSuchFrameException<span class="token keyword">try</span><span class="token punctuation">:</span>    browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span><span class="token punctuation">)</span>    browser<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'iframssseResult'</span><span class="token punctuation">)</span><span class="token keyword">except</span> TimeoutException <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">except</span> NoSuchFrameException <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="八-项目练习"><a href="#八-项目练习" class="headerlink" title="八 项目练习"></a>八 项目练习</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By <span class="token comment">#按照什么方式查找，By.ID,By.CSS_SELECTOR</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys <span class="token comment">#键盘按键操作</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait <span class="token comment">#等待页面加载某些元素</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">get_goods</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        goods<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_elements_by_class_name<span class="token punctuation">(</span><span class="token string">'gl-item'</span><span class="token punctuation">)</span>```    <span class="token keyword">for</span> good <span class="token keyword">in</span> goods<span class="token punctuation">:</span>        detail_url<span class="token operator">=</span>good<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>        p_name<span class="token operator">=</span>good<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'.p-name em'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        price<span class="token operator">=</span>good<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'.p-price i'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        p_commit<span class="token operator">=</span>good<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'.p-commit a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        msg <span class="token operator">=</span> <span class="token triple-quoted-string string">'''        商品 : %s        链接 : %s        价钱 ：%s        评论 ：%s        '''</span> <span class="token operator">%</span> <span class="token punctuation">(</span>p_name<span class="token punctuation">,</span>detail_url<span class="token punctuation">,</span>price<span class="token punctuation">,</span>p_commit<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\n\n'</span><span class="token punctuation">)</span>``````    button<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token string">'下一页'</span><span class="token punctuation">)</span>    button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    get_goods<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">pass</span>```<span class="token keyword">def</span> <span class="token function">spider</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>keyword<span class="token punctuation">)</span><span class="token punctuation">:</span>    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 使用隐式等待</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        input_tag<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span>        input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>        input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>        get_goods<span class="token punctuation">(</span>driver<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    spider<span class="token punctuation">(</span><span class="token string">'https://www.jd.com/'</span><span class="token punctuation">,</span>keyword<span class="token operator">=</span><span class="token string">'iPhone8手机'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫-selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-Beautifulsoup4</title>
      <link href="/2021/10/10/Beautifulsoup4/"/>
      <url>/2021/10/10/Beautifulsoup4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Beautiful Soup</p><span id="more"></span><h1 id="Beautifulsoup4"><a href="#Beautifulsoup4" class="headerlink" title="[Beautifulsoup4]"></a>[Beautifulsoup4]</h1><h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h2><p>Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时间.你可能在寻找 Beautiful Soup3 的文档,Beautiful Soup 3 目前已经停止开发,官网推荐在现在的项目中使用Beautiful Soup 4, 移植到BS4</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#安装 Beautiful Soup</span>pip install beautifulsoup4<span class="token comment">#安装解析器</span>Beautiful Soup支持Python标准库中的HTML解析器<span class="token punctuation">,</span>还支持一些第三方的解析器<span class="token punctuation">,</span>其中一个是 lxml <span class="token punctuation">.</span>根据操作系统不同<span class="token punctuation">,</span>可以选择下列方法来安装lxml<span class="token punctuation">:</span>$ apt<span class="token operator">-</span>get install Python<span class="token operator">-</span>lxml$ easy_install lxml$ pip install lxml另一个可供选择的解析器是纯Python实现的 html5lib <span class="token punctuation">,</span> html5lib的解析方式与浏览器相同<span class="token punctuation">,</span>可以选择下列方法来安装html5lib<span class="token punctuation">:</span>$ apt<span class="token operator">-</span>get install Python<span class="token operator">-</span>html5lib$ easy_install html5lib$ pip install html5lib</code></pre><p><strong>下表列出了主要的解析器,以及它们的优缺点,官网推荐使用lxml作为解析器,因为效率更高. 在Python2.7.3之前的版本和Python3中3.2.2之前的版本,必须安装lxml或html5lib, 因为那些Python版本的标准库中内置的HTML解析方法不够稳定.</strong></p><table><thead><tr><th>解析器</th><th>使用方法</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>Python标准库</td><td><code>BeautifulSoup(markup, "html.parser")</code></td><td>Python的内置标准库 执行速度适中 文档容错能力强</td><td>Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差</td></tr><tr><td>lxml HTML 解析器</td><td><code>BeautifulSoup(markup, "lxml")</code></td><td>速度快 文档容错能力强</td><td>需要安装C语言库</td></tr><tr><td>lxml XML 解析器</td><td><code>BeautifulSoup(markup, ["lxml", "xml"])</code> <code>BeautifulSoup(markup, "xml")</code></td><td>速度快 唯一支持XML的解析器</td><td>需要安装C语言库</td></tr><tr><td>html5lib</td><td><code>BeautifulSoup(markup, "html5lib")</code></td><td>最好的容错性 以浏览器的方式解析文档 生成HTML5格式的文档</td><td>速度慢 不依赖外部扩展</td></tr></tbody></table><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">中文文档：https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p><h3 id="二-基本使用"><a href="#二-基本使用" class="headerlink" title="二 基本使用"></a>二 基本使用</h3><pre class="language-python" data-language="python"><code class="language-python">html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class="story"&gt;...&lt;/p&gt;"""</span><span class="token comment">#基本使用：容错处理,文档的容错能力指的是在html代码不完整的情况下,使用该模块可以识别该错误。使用BeautifulSoup解析上述代码,能够得到一个 BeautifulSoup 的对象,并能按照标准的缩进格式的结构输出</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupsoup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span> <span class="token comment">#具有容错功能</span>res<span class="token operator">=</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#处理好缩进，结构化显示</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="三-遍历文档树"><a href="#三-遍历文档树" class="headerlink" title="三 遍历文档树"></a>三 遍历文档树</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#遍历文档树：即直接通过标签名字选择，特点是选择速度快，但如果存在多个相同的标签则只返回第一个</span><span class="token comment">#1、用法</span><span class="token comment">#2、获取标签的名称</span><span class="token comment">#3、获取标签的属性</span><span class="token comment">#4、获取标签的内容</span><span class="token comment">#5、嵌套选择</span><span class="token comment">#6、子节点、子孙节点</span><span class="token comment">#7、父节点、祖先节点</span><span class="token comment">#8、兄弟节点</span><span class="token comment">#遍历文档树：即直接通过标签名字选择，特点是选择速度快，但如果存在多个相同的标签则只返回第一个</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p id="my p" class="title"&gt;&lt;b id="bbb" class="boldest"&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class="story"&gt;...&lt;/p&gt;"""</span><span class="token comment">#1、用法</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupsoup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment"># soup=BeautifulSoup(open('a.html'),'lxml')</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">)</span> <span class="token comment">#存在多个相同的标签则只返回第一个</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">#存在多个相同的标签则只返回第一个</span><span class="token comment">#2、获取标签的名称</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">#3、获取标签的属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token comment">#4、获取标签的内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>string<span class="token punctuation">)</span> <span class="token comment"># p下的文本只有一个时，取到，否则为None</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>strings<span class="token punctuation">)</span> <span class="token comment">#拿到一个生成器对象, 取到p下所有的文本内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">#取到p下所有的文本内容</span><span class="token keyword">for</span> line <span class="token keyword">in</span> soup<span class="token punctuation">.</span>stripped_strings<span class="token punctuation">:</span> <span class="token comment">#去掉空白</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''如果tag包含了多个子节点,tag就无法确定 .string 方法应该调用哪个子节点的内容, .string 的输出结果是 None，如果只有一个子节点那么就输出该子节点的文本，比如下面的这种结构，soup.p.string 返回为None,但soup.p.strings就可以找到所有文本&lt;p id='list-1'&gt;    哈哈哈哈    &lt;a class='sss'&gt;        &lt;span&gt;            &lt;h1&gt;aaaa&lt;/h1&gt;        &lt;/span&gt;    &lt;/a&gt;    &lt;b&gt;bbbbb&lt;/b&gt;&lt;/p&gt;'''</span><span class="token comment">#5、嵌套选择</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>body<span class="token punctuation">.</span>a<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment">#6、子节点、子孙节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>contents<span class="token punctuation">)</span> <span class="token comment">#p下所有子节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token comment">#得到一个迭代器,包含p下所有子节点</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>child <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>child<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>descendants<span class="token punctuation">)</span> <span class="token comment">#获取子孙节点,p下所有的标签都会选择出来</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>child <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>descendants<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>child<span class="token punctuation">)</span><span class="token comment">#7、父节点、祖先节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token comment">#获取a标签的父节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>parents<span class="token punctuation">)</span> <span class="token comment">#找到a标签所有的祖先节点，父亲的父亲，父亲的父亲的父亲...</span><span class="token comment">#8、兄弟节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'=====&gt;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_sibling<span class="token punctuation">)</span> <span class="token comment">#下一个兄弟</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>previous_sibling<span class="token punctuation">)</span> <span class="token comment">#上一个兄弟</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_siblings<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#下面的兄弟们=&gt;生成器对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>previous_siblings<span class="token punctuation">)</span> <span class="token comment">#上面的兄弟们=&gt;生成器对象</span></code></pre><h3 id="四-搜索文档树"><a href="#四-搜索文档树" class="headerlink" title="四 搜索文档树"></a>四 搜索文档树</h3><p><strong>1、五种过滤器</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#搜索文档树：BeautifulSoup定义了很多搜索方法,这里着重介绍2个: find() 和 find_all() .其它方法的参数和用法类似</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p id="my p" class="title"&gt;&lt;b id="bbb" class="boldest"&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class="story"&gt;...&lt;/p&gt;"""</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupsoup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment">#1、五种过滤器: 字符串、正则表达式、列表、True、方法</span><span class="token comment">#1.1、字符串：即标签名</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#1.2、正则表达式</span><span class="token keyword">import</span> re<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'^b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#找出b开头的标签，结果有body和b标签</span><span class="token comment">#1.3、列表：如果传入列表参数,Beautiful Soup会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有&lt;a&gt;标签和&lt;b&gt;标签:</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#1.4、True：可以匹配任何值,下面代码查找到所有的tag,但是不会返回字符串节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> tag <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">#1.5、方法:如果没有合适过滤器,那么还可以定义一个方法,方法只接受一个元素参数 ,如果这个方法返回 True 表示当前元素匹配并且被找到,如果不是则反回 False</span><span class="token keyword">def</span> <span class="token function">has_class_but_no_id</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tag<span class="token punctuation">.</span>has_attr<span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> tag<span class="token punctuation">.</span>has_attr<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>has_class_but_no_id<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>*<em>2、find_all( name , attrs , recursive , text , *<em>kwargs )</em></em></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#2、find_all( name , attrs , recursive , text , **kwargs )</span><span class="token comment">#2.1、name: 搜索name参数的值可以使任一类型的 过滤器 ,字符窜,正则表达式,列表,方法或是 True .</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'^t'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#2.2、keyword: key=value的形式，value可以是过滤器：字符串 , 正则表达式 , 列表, True .</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'my'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>href<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'lacie'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">id</span><span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'\d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#注意类要用class_</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#查找有id属性的标签</span><span class="token comment"># 有些tag属性在搜索不能使用,比如HTML5中的 data-* 属性:</span>data_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">'&lt;div data-foo="value"&gt;foo!&lt;/div&gt;'</span><span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment"># data_soup.find_all(data-foo="value") #报错：SyntaxError: keyword can't be an expression</span><span class="token comment"># 但是可以通过 find_all() 方法的 attrs 参数定义一个字典参数来搜索包含特殊属性的tag:</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"data-foo"</span><span class="token punctuation">:</span> <span class="token string">"value"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [&lt;div data-foo="value"&gt;foo!&lt;/div&gt;]</span><span class="token comment">#2.3、按照类名查找，注意关键字是class_，class_=value,value可以是五种选择器之一</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'sister'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#查找类为sister的a标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'sister ssss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#查找类为sister和sss的a标签，顺序错误也匹配不成功</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'^sis'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#查找类为sister的所有标签</span><span class="token comment">#2.4、attrs</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">'story'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#2.5、text: 值可以是：字符，列表，True，正则</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">'Elsie'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'Elsie'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#2.6、limit参数:如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用 limit 参数限制返回结果的数量.效果与SQL中的limit关键字类似,当搜索到的结果数量达到 limit 的限制时,就停止搜索返回结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#2.7、recursive:调用tag的 find_all() 方法时,Beautiful Soup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数 recursive=False .</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>html<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>html<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>recursive<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''像调用 find_all() 一样调用tagfind_all() 几乎是Beautiful Soup中最常用的搜索方法,所以我们定义了它的简写方法. BeautifulSoup 对象和 tag 对象可以被当作一个方法来使用,这个方法的执行结果与调用这个对象的 find_all() 方法相同,下面两行代码是等价的:soup.find_all("a")soup("a")这两行代码也是等价的:soup.title.find_all(text=True)soup.title(text=True)'''</span></code></pre><p>*<em>3、find( name , attrs , recursive , text , *<em>kwargs )</em></em></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#3、find( name , attrs , recursive , text , **kwargs )</span>find_all<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法将返回文档中符合条件的所有tag<span class="token punctuation">,</span>尽管有时候我们只想得到一个结果<span class="token punctuation">.</span>比如文档中只有一个<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>标签<span class="token punctuation">,</span>那么使用 find_all<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法来查找<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>标签就不太合适<span class="token punctuation">,</span> 使用 find_all 方法并设置 limit<span class="token operator">=</span><span class="token number">1</span> 参数不如直接使用 find<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法<span class="token punctuation">.</span>下面两行代码是等价的<span class="token punctuation">:</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> limit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># [&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span>唯一的区别是 find_all<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法的返回结果是值包含一个元素的列表<span class="token punctuation">,</span>而 find<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法直接返回结果<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法没有找到目标是返回空列表<span class="token punctuation">,</span> find<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法找不到目标时<span class="token punctuation">,</span>返回 <span class="token boolean">None</span> <span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"nosuchtag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># None</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title 是 tag的名字 方法的简写<span class="token punctuation">.</span>这个简写的原理就是多次调用当前tag的 find<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法<span class="token punctuation">:</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></code></pre><p><strong>4、其他方法</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#见官网:https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#find-parents-find-parent</span></code></pre><p><strong>5、CSS选择器</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#该模块提供了select方法来支持css,详见官网:https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#id37</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class="title"&gt;    &lt;b&gt;The Dormouse's story&lt;/b&gt;    Once upon a time there were three little sisters; and their names were    &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;        &lt;span&gt;Elsie&lt;/span&gt;    &lt;/a&gt;    &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and    &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;    &lt;div class='panel-1'&gt;        &lt;ul class='list' id='list-1'&gt;            &lt;li class='element'&gt;Foo&lt;/li&gt;            &lt;li class='element'&gt;Bar&lt;/li&gt;            &lt;li class='element'&gt;Jay&lt;/li&gt;        &lt;/ul&gt;        &lt;ul class='list list-small' id='list-2'&gt;            &lt;li class='element'&gt;&lt;h1 class='yyyy'&gt;Foo&lt;/h1&gt;&lt;/li&gt;            &lt;li class='element xxx'&gt;Bar&lt;/li&gt;            &lt;li class='element'&gt;Jay&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;    and they lived at the bottom of a well.&lt;/p&gt;&lt;p class="story"&gt;...&lt;/p&gt;"""</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupsoup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment">#1、CSS选择器</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.sister'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.sister span'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#link1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#link1 span'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#list-2 .element.xxx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#list-2'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.element'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#可以一直select,但其实没必要,一条select就可以了</span><span class="token comment"># 2、获取属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#list-2 h1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token comment"># 3、获取内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#list-2 h1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="五-修改文档树"><a href="#五-修改文档树" class="headerlink" title="五 修改文档树"></a>五 修改文档树</h3><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#id40">链接：https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#id40</a></p><h3 id="六-总结"><a href="#六-总结" class="headerlink" title="六 总结"></a>六 总结</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 总结:</span><span class="token comment">#1、推荐使用lxml解析库</span><span class="token comment">#2、讲了三种选择器:标签选择器,find与find_all，css选择器</span>    <span class="token number">1</span>、标签选择器筛选功能弱<span class="token punctuation">,</span>但是速度快    <span class="token number">2</span>、建议使用find<span class="token punctuation">,</span>find_all查询匹配单个结果或者多个结果    <span class="token number">3</span>、如果对css选择器非常熟悉建议使用select<span class="token comment">#3、记住常用的获取属性attrs和文本值get_text()的方法</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Beautifulsoup4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫-Beautifulsoup4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-Scrapy</title>
      <link href="/2021/10/09/Scrapy/"/>
      <url>/2021/10/09/Scrapy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Scrapy</p><span id="more"></span><p><strong>Scrapy</strong></p><h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h3><p>Scrapy一个开源和协作的框架，其最初是为了页面抓取 (更确切来说, 网络抓取 )所设计的，使用它可以以快速、简单、可扩展的方式从网站中提取所需的数据。但目前Scrapy的用途十分广泛，可用于如数据挖掘、监测和自动化测试等领域，也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。</p><p>Scrapy 是基于twisted框架开发而来，twisted是一个流行的事件驱动的python网络框架。因此Scrapy使用了一种非阻塞（又名异步）的代码来实现并发。</p><p><strong>The data flow in Scrapy is controlled by the execution engine, and goes like this:</strong></p><ol><li>The <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-engine">Engine</a> gets the initial Requests to crawl from the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-spiders">Spider</a>.</li><li>The <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-engine">Engine</a> schedules the Requests in the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-scheduler">Scheduler</a> and asks for the next Requests to crawl.</li><li>The <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-scheduler">Scheduler</a> returns the next Requests to the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-engine">Engine</a>.</li><li>The <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-engine">Engine</a> sends the Requests to the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-downloader">Downloader</a>, passing through the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-downloader-middleware">Downloader Middlewares</a> (see <a href="https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#scrapy.downloadermiddlewares.DownloaderMiddleware.process_request"><code>process_request()</code></a>).</li><li>Once the page finishes downloading the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-downloader">Downloader</a> generates a Response (with that page) and sends it to the Engine, passing through the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-downloader-middleware">Downloader Middlewares</a> (see <a href="https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#scrapy.downloadermiddlewares.DownloaderMiddleware.process_response"><code>process_response()</code></a>).</li><li>The <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-engine">Engine</a> receives the Response from the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-downloader">Downloader</a> and sends it to the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-spiders">Spider</a> for processing, passing through the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-spider-middleware">Spider Middleware</a> (see <a href="https://docs.scrapy.org/en/latest/topics/spider-middleware.html#scrapy.spidermiddlewares.SpiderMiddleware.process_spider_input"><code>process_spider_input()</code></a>).</li><li>The <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-spiders">Spider</a> processes the Response and returns scraped items and new Requests (to follow) to the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-engine">Engine</a>, passing through the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-spider-middleware">Spider Middleware</a> (see <a href="https://docs.scrapy.org/en/latest/topics/spider-middleware.html#scrapy.spidermiddlewares.SpiderMiddleware.process_spider_output"><code>process_spider_output()</code></a>).</li><li>The <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-engine">Engine</a> sends processed items to <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-pipelines">Item Pipelines</a>, then send processed Requests to the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-scheduler">Scheduler</a> and asks for possible next Requests to crawl.</li><li>The process repeats (from step 1) until there are no more requests from the <a href="https://docs.scrapy.org/en/latest/topics/architecture.html#component-scheduler">Scheduler</a>.</li></ol><p><strong>Components：</strong></p><ol><li><p>引擎(EGINE)</p><p>引擎负责控制系统所有组件之间的数据流，并在某些动作发生时触发事件。有关详细信息，请参见上面的数据流部分。</p></li><li><p><strong>调度器(SCHEDULER)</strong><br>用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL的优先级队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</p></li><li><p><strong>下载器(DOWLOADER)</strong><br>用于下载网页内容, 并将网页内容返回给EGINE，下载器是建立在twisted这个高效的异步模型上的</p></li><li><p><strong>爬虫(SPIDERS)</strong><br>SPIDERS是开发人员自定义的类，用来解析responses，并且提取items，或者发送新的请求</p></li><li><p><strong>项目管道(ITEM PIPLINES)</strong><br>在items被提取后负责处理它们，主要包括清理、验证、持久化（比如存到数据库）等操作</p></li><li><p>下载器中间件(Downloader Middlewares)</p><p>位于Scrapy引擎和下载器之间，主要用来处理从EGINE传到DOWLOADER的请求request，已经从DOWNLOADER传到EGINE的响应response，你可用该中间件做以下几件事</p><ol><li>process a request just before it is sent to the Downloader (i.e. right before Scrapy sends the request to the website);</li><li>change received response before passing it to a spider;</li><li>send a new Request instead of passing received response to a spider;</li><li>pass response to a spider without fetching a web page;</li><li>silently drop some requests.</li></ol></li><li><p><strong>爬虫中间件(Spider Middlewares)</strong><br>位于EGINE和SPIDERS之间，主要工作是处理SPIDERS的输入（即responses）和输出（即requests）</p></li></ol><p><a href="https://docs.scrapy.org/en/latest/topics/architecture.html">官网链接：https://docs.scrapy.org/en/latest/topics/architecture.html</a></p><h3 id="二-安装"><a href="#二-安装" class="headerlink" title="二 安装"></a>二 安装</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#Windows平台</span>    <span class="token number">1</span>、pip3 install wheel <span class="token comment">#安装后，便支持通过wheel文件安装软件，wheel文件官网：https://www.lfd.uci.edu/~gohlke/pythonlibs</span>    <span class="token number">3</span>、pip3 install lxml    <span class="token number">4</span>、pip3 install pyopenssl    <span class="token number">5</span>、下载并安装pywin32：https<span class="token punctuation">:</span><span class="token operator">//</span>sourceforge<span class="token punctuation">.</span>net<span class="token operator">/</span>projects<span class="token operator">/</span>pywin32<span class="token operator">/</span>files<span class="token operator">/</span>pywin32<span class="token operator">/</span>    <span class="token number">6</span>、下载twisted的wheel文件：http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>lfd<span class="token punctuation">.</span>uci<span class="token punctuation">.</span>edu<span class="token operator">/</span><span class="token operator">~</span>gohlke<span class="token operator">/</span>pythonlibs<span class="token operator">/</span><span class="token comment">#twisted</span>    <span class="token number">7</span>、执行pip3 install 下载目录\Twisted<span class="token operator">-</span><span class="token number">17.9</span><span class="token number">.0</span><span class="token operator">-</span>cp36<span class="token operator">-</span>cp36m<span class="token operator">-</span>win_amd64<span class="token punctuation">.</span>whl    <span class="token number">8</span>、pip3 install scrapy<span class="token comment">#Linux平台</span>    <span class="token number">1</span>、pip3 install scrapy</code></pre><h3 id="三-命令行工具"><a href="#三-命令行工具" class="headerlink" title="三 命令行工具"></a>三 命令行工具</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#1 查看帮助</span>    scrapy <span class="token operator">-</span>h    scrapy <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span> <span class="token operator">-</span>h<span class="token comment">#2 有两种命令：其中Project-only必须切到项目文件夹下才能执行，而Global的命令则不需要</span>    Global commands<span class="token punctuation">:</span>        startproject <span class="token comment">#创建项目</span>        genspider    <span class="token comment">#创建爬虫程序</span>        settings     <span class="token comment">#如果是在项目目录下，则得到的是该项目的配置</span>        runspider    <span class="token comment">#运行一个独立的python文件，不必创建项目</span>        shell        <span class="token comment">#scrapy shell url地址  在交互式调试，如选择器规则正确与否</span>        fetch        <span class="token comment">#独立于程单纯地爬取一个页面，可以拿到请求头</span>        view         <span class="token comment">#下载完毕后直接弹出浏览器，以此可以分辨出哪些数据是ajax请求</span>        version      <span class="token comment">#scrapy version 查看scrapy的版本，scrapy version -v查看scrapy依赖库的版本</span>    Project<span class="token operator">-</span>only commands<span class="token punctuation">:</span>        crawl        <span class="token comment">#运行爬虫，必须创建项目才行，确保配置文件中ROBOTSTXT_OBEY = False</span>        check        <span class="token comment">#检测项目中有无语法错误</span>        <span class="token builtin">list</span>         <span class="token comment">#列出项目中所包含的爬虫名</span>        edit         <span class="token comment">#编辑器，一般不用</span>        parse        <span class="token comment">#scrapy parse url地址 --callback 回调函数  #以此可以验证我们的回调函数是否正确</span>        bench        <span class="token comment">#scrapy bentch压力测试</span><span class="token comment">#3 官网链接</span>    https<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>scrapy<span class="token punctuation">.</span>org<span class="token operator">/</span>en<span class="token operator">/</span>latest<span class="token operator">/</span>topics<span class="token operator">/</span>commands<span class="token punctuation">.</span>html<span class="token comment">#1、执行全局命令：请确保不在某个项目的目录下，排除受该项目配置的影响</span>scrapy startproject MyProjectcd MyProjectscrapy genspider baidu www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>comscrapy settings <span class="token operator">-</span><span class="token operator">-</span>get XXX <span class="token comment">#如果切换到项目目录下，看到的则是该项目的配置</span>scrapy runspider baidu<span class="token punctuation">.</span>pyscrapy shell https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com    response    response<span class="token punctuation">.</span>status    response<span class="token punctuation">.</span>body    view<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    scrapy view https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>com <span class="token comment">#如果页面显示内容不全，不全的内容则是ajax请求实现的，以此快速定位问题</span>scrapy fetch <span class="token operator">-</span><span class="token operator">-</span>nolog <span class="token operator">-</span><span class="token operator">-</span>headers https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>comscrapy version <span class="token comment">#scrapy的版本</span>scrapy version <span class="token operator">-</span>v <span class="token comment">#依赖库的版本</span><span class="token comment">#2、执行项目命令：切到项目目录下</span>scrapy crawl baiduscrapy checkscrapy <span class="token builtin">list</span>scrapy parse http<span class="token punctuation">:</span><span class="token operator">//</span>quotes<span class="token punctuation">.</span>toscrape<span class="token punctuation">.</span>com<span class="token operator">/</span> <span class="token operator">-</span><span class="token operator">-</span>callback parsescrapy bench    </code></pre><h3 id="四-项目结构以及爬虫应用简介"><a href="#四-项目结构以及爬虫应用简介" class="headerlink" title="四 项目结构以及爬虫应用简介"></a>四 项目结构以及爬虫应用简介</h3><pre class="language-python" data-language="python"><code class="language-python">project_name<span class="token operator">/</span>   scrapy<span class="token punctuation">.</span>cfg   project_name<span class="token operator">/</span>       __init__<span class="token punctuation">.</span>py       items<span class="token punctuation">.</span>py       pipelines<span class="token punctuation">.</span>py       settings<span class="token punctuation">.</span>py       spiders<span class="token operator">/</span>           __init__<span class="token punctuation">.</span>py           爬虫<span class="token number">1</span><span class="token punctuation">.</span>py           爬虫<span class="token number">2</span><span class="token punctuation">.</span>py           爬虫<span class="token number">3</span><span class="token punctuation">.</span>py</code></pre><p>文件说明：</p><ul><li>scrapy.cfg 项目的主配置信息，用来部署scrapy时使用，爬虫相关的配置信息在settings.py文件中。</li><li>items.py 设置数据存储模板，用于结构化数据，如：Django的Model</li><li>pipelines 数据处理行为，如：一般结构化的数据持久化</li><li>settings.py 配置文件，如：递归的层数、并发数，延迟下载等。*<em>强调:配置文件的选项必须大写否则视为无效*</em>*<em>，正确写法USER_AGENT=’xxxx’</em>*</li><li>spiders 爬虫目录，如：创建文件，编写爬虫规则</li></ul><p><em>注意：一般创建爬虫文件时，以网站域名命名</em></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#在项目目录下新建：entrypoint.py</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>cmdline <span class="token keyword">import</span> executeexecute<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'scrapy'</span><span class="token punctuation">,</span> <span class="token string">'crawl'</span><span class="token punctuation">,</span> <span class="token string">'xiaohua'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">import</span> sys<span class="token punctuation">,</span>ossys<span class="token punctuation">.</span>stdout<span class="token operator">=</span>io<span class="token punctuation">.</span>TextIOWrapper<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'gb18030'</span><span class="token punctuation">)</span></code></pre><h3 id="五-Spiders"><a href="#五-Spiders" class="headerlink" title="五 Spiders"></a>五 Spiders</h3><p><strong>1、介绍</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#1、Spiders是由一系列类（定义了一个网址或一组网址将被爬取）组成，具体包括如何执行爬取任务并且如何从页面中提取结构化的数据。</span><span class="token comment">#2、换句话说，Spiders是你为了一个特定的网址或一组网址自定义爬取和解析页面行为的地方</span></code></pre><p><strong>2、Spiders会循环做如下事情</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#1、生成初始的Requests来爬取第一个URLS，并且标识一个回调函数</span>第一个请求定义在start_requests<span class="token punctuation">(</span><span class="token punctuation">)</span>方法内默认从start_urls列表中获得url地址来生成Request请求，默认的回调函数是parse方法。回调函数在下载完成返回response时自动触发<span class="token comment">#2、在回调函数中，解析response并且返回值</span>返回值可以<span class="token number">4</span>种：        包含解析数据的字典        Item对象        新的Request对象（新的Requests也需要指定一个回调函数）        或者是可迭代对象（包含Items或Request）<span class="token comment">#3、在回调函数中解析页面内容</span>通常使用Scrapy自带的Selectors，但很明显你也可以使用Beutifulsoup，lxml或其他你爱用啥用啥。<span class="token comment">#4、最后，针对返回的Items对象将会被持久化到数据库</span>通过Item Pipeline组件存到数据库：https<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>scrapy<span class="token punctuation">.</span>org<span class="token operator">/</span>en<span class="token operator">/</span>latest<span class="token operator">/</span>topics<span class="token operator">/</span>item<span class="token operator">-</span>pipeline<span class="token punctuation">.</span>html<span class="token comment">#topics-item-pipeline）</span>或者导出到不同的文件（通过Feed exports：https<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>scrapy<span class="token punctuation">.</span>org<span class="token operator">/</span>en<span class="token operator">/</span>latest<span class="token operator">/</span>topics<span class="token operator">/</span>feed<span class="token operator">-</span>exports<span class="token punctuation">.</span>html<span class="token comment">#topics-feed-exports）</span></code></pre><p><strong>3、Spiders总共提供了五种类：</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#1、scrapy.spiders.Spider #scrapy.Spider等同于scrapy.spiders.Spider</span><span class="token comment">#2、scrapy.spiders.CrawlSpider</span><span class="token comment">#3、scrapy.spiders.XMLFeedSpider</span><span class="token comment">#4、scrapy.spiders.CSVFeedSpider</span><span class="token comment">#5、scrapy.spiders.SitemapSpider</span></code></pre><p><strong>4、导入使用</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> Spider<span class="token punctuation">,</span>CrawlSpider<span class="token punctuation">,</span>XMLFeedSpider<span class="token punctuation">,</span>CSVFeedSpider<span class="token punctuation">,</span>SitemapSpider<span class="token keyword">class</span> <span class="token class-name">AmazonSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#自定义类，继承Spiders提供的基类</span>    name <span class="token operator">=</span> <span class="token string">'amazon'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'www.amazon.cn'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.amazon.cn/'</span><span class="token punctuation">]</span>    ```<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p><strong>5、class scrapy.spiders.Spider</strong></p><p>这是最简单的spider类，任何其他的spider类都需要继承它（包含你自己定义的）。</p><p>该类不提供任何特殊的功能，它仅提供了一个默认的start_requests方法默认从start_urls中读取url地址发送requests请求，并且默认parse作为回调函数</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AmazonSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'amazon'</span> ```allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'www.amazon.cn'</span><span class="token punctuation">]</span> start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.amazon.cn/'</span><span class="token punctuation">]</span>custom_settings <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'BOT_NAME'</span> <span class="token punctuation">:</span> <span class="token string">'Egon_Spider_Amazon'</span><span class="token punctuation">,</span>    <span class="token string">'REQUEST_HEADERS'</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span>      <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment">#1、name = 'amazon' </span>定义爬虫名，scrapy会根据该值定位爬虫程序所以它必须要有且必须唯一（In Python <span class="token number">2</span> this must be ASCII only<span class="token punctuation">.</span>）<span class="token comment">#2、allowed_domains = ['www.amazon.cn'] </span>定义允许爬取的域名，如果OffsiteMiddleware启动（默认就启动），那么不属于该列表的域名及其子域名都不允许爬取如果爬取的网址为：https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">.</span>html，那就添加<span class="token string">'example.com'</span>到列表<span class="token punctuation">.</span><span class="token comment">#3、start_urls = ['http://www.amazon.cn/']</span>如果没有指定url，就从该列表中读取url来生成第一个请求<span class="token comment">#4、custom_settings</span>值为一个字典，定义一些配置信息，在运行爬虫程序时，这些配置会覆盖项目级别的配置所以custom_settings必须被定义成一个类属性，由于settings会在类实例化前被加载<span class="token comment">#5、settings</span>通过self<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'配置项的名字'</span><span class="token punctuation">]</span>可以访问settings<span class="token punctuation">.</span>py中的配置，如果自己定义了custom_settings还是以自己的为准<span class="token comment">#6、logger</span>日志名默认为spider的名字self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'=============&gt;%s'</span> <span class="token operator">%</span>self<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'BOT_NAME'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#5、crawler：了解</span>该属性必须被定义到类方法from_crawler中<span class="token comment">#6、from_crawler(crawler, *args, **kwargs)：了解</span>You probably won’t need to override this directly  because the default implementation acts <span class="token keyword">as</span> a proxy to the __init__<span class="token punctuation">(</span><span class="token punctuation">)</span> method<span class="token punctuation">,</span> calling it <span class="token keyword">with</span> the given arguments args <span class="token keyword">and</span> named arguments kwargs<span class="token punctuation">.</span><span class="token comment">#7、start_requests()</span>该方法用来发起第一个Requests请求，且必须返回一个可迭代的对象。它在爬虫程序打开时就被Scrapy调用，Scrapy只调用它一次。默认从start_urls里取出每个url来生成Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> dont_filter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#针对参数dont_filter,请看自定义去重规则</span>如果你想要改变起始爬取的Requests，你就需要覆盖这个方法，例如你想要起始发送一个POST请求，如下<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'myspider'</span>```<span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">(</span><span class="token string">"http://www.example.com/login"</span><span class="token punctuation">,</span>                               formdata<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">:</span> <span class="token string">'secret'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                               callback<span class="token operator">=</span>self<span class="token punctuation">.</span>logged_in<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">logged_in</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># here you would extract links to follow and return Requests for</span>    <span class="token comment"># each of them, with another callback</span>    <span class="token keyword">pass</span>```<span class="token comment">#8、parse(response)</span>这是默认的回调函数，所有的回调函数必须返回an iterable of Request <span class="token keyword">and</span><span class="token operator">/</span><span class="token keyword">or</span> dicts <span class="token keyword">or</span> Item objects<span class="token punctuation">.</span><span class="token comment">#9、log(message[, level, component])：了解</span>Wrapper that sends a log message through the Spider’s logger<span class="token punctuation">,</span> kept <span class="token keyword">for</span> backwards compatibility<span class="token punctuation">.</span> For more information see Logging <span class="token keyword">from</span> Spiders<span class="token punctuation">.</span><span class="token comment">#10、closed(reason)</span>爬虫程序结束时自动触发去重规则应该多个爬虫共享的，但凡一个爬虫爬取了，其他都不要爬了，实现方式如下<span class="token comment">#方法一：</span><span class="token number">1</span>、新增类属性visited<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#类属性</span><span class="token number">2</span>、回调函数parse方法内：<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>url <span class="token keyword">in</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>```self<span class="token punctuation">.</span>visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span> ```<span class="token comment">#方法一改进：针对url可能过长，所以我们存放url的hash值</span><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        url<span class="token operator">=</span>md5<span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    <span class="token keyword">if</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>```self<span class="token punctuation">.</span>visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>url<span class="token punctuation">)</span> ```<span class="token comment">#方法二：Scrapy自带去重功能</span>配置文件：DUPEFILTER_CLASS <span class="token operator">=</span> <span class="token string">'scrapy.dupefilter.RFPDupeFilter'</span> <span class="token comment">#默认的去重规则帮我们去重，去重规则在内存中</span>DUPEFILTER_DEBUG <span class="token operator">=</span> <span class="token boolean">False</span>JOBDIR <span class="token operator">=</span> <span class="token string">"保存范文记录的日志路径，如：/root/"</span>  <span class="token comment"># 最终路径为 /root/requests.seen，去重规则放文件中</span>scrapy自带去重规则默认为RFPDupeFilter，只需要我们指定Request<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>dont_filter<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> ，如果dont_filter<span class="token operator">=</span><span class="token boolean">True</span>则告诉Scrapy这个URL不参与去重。<span class="token comment">#方法三：</span>我们也可以仿照RFPDupeFilter自定义去重规则，<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>dupefilter <span class="token keyword">import</span> RFPDupeFilter，看源码，仿照BaseDupeFilter<span class="token comment">#步骤一：在项目目录下自定义去重文件dup.py</span><span class="token keyword">class</span> <span class="token class-name">UrlFilter</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#或者放到数据库</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">from_settings</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> settings<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span>```<span class="token keyword">def</span> <span class="token function">request_seen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>url <span class="token keyword">in</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    self<span class="token punctuation">.</span>visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">open</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># can return deferred</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># can return a deferred</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># log that a request has been filtered</span>    <span class="token keyword">pass</span>```<span class="token comment">#步骤二：配置文件settings.py：</span>DUPEFILTER_CLASS <span class="token operator">=</span> <span class="token string">'项目名.dup.UrlFilter'</span><span class="token comment"># 源码分析：</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>core<span class="token punctuation">.</span>scheduler <span class="token keyword">import</span> Scheduler见Scheduler下的enqueue_request方法：self<span class="token punctuation">.</span>df<span class="token punctuation">.</span>request_seen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token comment">#例一：</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'example.com'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'example.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'http://www.example.com/1.html'</span><span class="token punctuation">,</span>        <span class="token string">'http://www.example.com/2.html'</span><span class="token punctuation">,</span>        <span class="token string">'http://www.example.com/3.html'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>```<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'A response from %s just arrived!'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>```    <span class="token comment">#例二：一个回调函数返回多个Requests和Items</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'example.com'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'example.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'http://www.example.com/1.html'</span><span class="token punctuation">,</span>        <span class="token string">'http://www.example.com/2.html'</span><span class="token punctuation">,</span>        <span class="token string">'http://www.example.com/3.html'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>```<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> h3 <span class="token keyword">in</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//h3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> <span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span> h3<span class="token punctuation">}</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>```            <span class="token comment">#例三：在start_requests()内直接指定起始爬取的urls，start_urls就没有用了，</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> myproject<span class="token punctuation">.</span>items <span class="token keyword">import</span> MyItem<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'example.com'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'example.com'</span><span class="token punctuation">]</span>```<span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'http://www.example.com/1.html'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>    <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'http://www.example.com/2.html'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>    <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'http://www.example.com/3.html'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> h3 <span class="token keyword">in</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//h3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> MyItem<span class="token punctuation">(</span>title<span class="token operator">=</span>h3<span class="token punctuation">)</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>我们可能需要在命令行为爬虫程序传递参数，比如传递初始的url，像这样<span class="token comment">#命令行执行</span>scrapy crawl myspider <span class="token operator">-</span>a category<span class="token operator">=</span>electronics<span class="token comment">#在__init__方法中可以接收外部传进来的参数</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'myspider'</span>```<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> category<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span>MySpider<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.example.com/categories/%s'</span> <span class="token operator">%</span> category<span class="token punctuation">]</span>    <span class="token comment">#...</span>```        <span class="token comment">#注意接收的参数全都是字符串，如果想要结构化的数据，你需要用类似json.loads的方法</span></code></pre><p><strong>6、<a href="https://docs.scrapy.org/en/latest/topics/spiders.html#generic-spiders">其他通用Spiders：https://docs.scrapy.org/en/latest/topics/spiders.html#generic-spiders</a></strong></p><h3 id="六-Selectors"><a href="#六-Selectors" class="headerlink" title="六 Selectors"></a>六 Selectors</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#1 //与/</span><span class="token comment">#2 text</span><span class="token comment">#3、extract与extract_first:从selector对象中解出内容</span><span class="token comment">#4、属性：xpath的属性加前缀@</span><span class="token comment">#4、嵌套查找</span><span class="token comment">#5、设置默认值</span><span class="token comment">#4、按照属性查找</span><span class="token comment">#5、按照属性模糊查找</span><span class="token comment">#6、正则表达式</span><span class="token comment">#7、xpath相对路径</span><span class="token comment">#8、带变量的xpath</span>response<span class="token punctuation">.</span>selector<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token punctuation">)</span>可简写为response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#1 //与/</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//body/a/'</span><span class="token punctuation">)</span><span class="token comment">#</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'div a::text'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//body/a'</span><span class="token punctuation">)</span> <span class="token comment">#开头的//代表从整篇文档中寻找,body之后的/代表body的儿子</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//body//a'</span><span class="token punctuation">)</span> <span class="token comment">#开头的//代表从整篇文档中寻找,body之后的//代表body的子子孙孙</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//body//a'</span> data<span class="token operator">=</span><span class="token string">'&lt;a href="image1.html"&gt;Name: My image 1 &lt;'</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//body//a'</span> data<span class="token operator">=</span><span class="token string">'&lt;a href="image2.html"&gt;Name: My image 2 &lt;'</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//body//a'</span> data<span class="token operator">=</span>'<span class="token operator">&lt;</span>a href<span class="token operator">=</span>"image3<span class="token punctuation">.</span>html<span class="token string">"&gt;Name: My image 3 &lt;'&gt;, &lt;Selector xpath='//body//a' data='&lt;a href="</span>image4<span class="token punctuation">.</span>html<span class="token string">"&gt;Name: My image 4 &lt;'&gt;, &lt;Selector xpath='//body//a' data='&lt;a href="</span>image5<span class="token punctuation">.</span>html"<span class="token operator">&gt;</span>Name<span class="token punctuation">:</span> My image <span class="token number">5</span> <span class="token operator">&lt;</span>'<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token comment">#2 text</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//body//a/text()'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'body a::text'</span><span class="token punctuation">)</span><span class="token comment">#3、extract与extract_first:从selector对象中解出内容</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Name: My image 1 '</span><span class="token punctuation">,</span> <span class="token string">'Name: My image 2 '</span><span class="token punctuation">,</span> <span class="token string">'Name: My image 3 '</span><span class="token punctuation">,</span> <span class="token string">'Name: My image 4 '</span><span class="token punctuation">,</span> <span class="token string">'Name: My image 5 '</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'div a::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Name: My image 1 '</span><span class="token punctuation">,</span> <span class="token string">'Name: My image 2 '</span><span class="token punctuation">,</span> <span class="token string">'Name: My image 3 '</span><span class="token punctuation">,</span> <span class="token string">'Name: My image 4 '</span><span class="token punctuation">,</span> <span class="token string">'Name: My image 5 '</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Name: My image 1 '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'div a::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Name: My image 1 '</span><span class="token comment">#4、属性：xpath的属性加前缀@</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'image1.html'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'div a::attr(href)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'image1.html'</span><span class="token comment">#4、嵌套查找</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'image1.html'</span><span class="token comment">#5、设置默认值</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="xxx"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token string">'not found'</span><span class="token comment">#4、按照属性查找</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id="images"]/a[@href="image3.html"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'#images a[@href="image3.html"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#5、按照属性模糊查找</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@href,"image")]/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'a[href*="image"]::attr(href)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@href,"image")]/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'a[href*="imag"] img::attr(src)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@href="image1.html"]'</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'*[href="image1.html"]'</span><span class="token punctuation">)</span><span class="token comment">#6、正则表达式</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re<span class="token punctuation">(</span><span class="token string">r'Name: (.*)'</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re_first<span class="token punctuation">(</span><span class="token string">r'Name: (.*)'</span><span class="token punctuation">)</span><span class="token comment">#7、xpath相对路径</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> res<span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@href,"3")]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> res<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'img'</span> data<span class="token operator">=</span><span class="token string">'&lt;img src="image3_thumb.jpg"&gt;'</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> res<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./img'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'./img'</span> data<span class="token operator">=</span><span class="token string">'&lt;img src="image3_thumb.jpg"&gt;'</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> res<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//img'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'.//img'</span> data<span class="token operator">=</span><span class="token string">'&lt;img src="image3_thumb.jpg"&gt;'</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> res<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//img'</span><span class="token punctuation">)</span> <span class="token comment">#这就是从头开始扫描</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//img'</span> data<span class="token operator">=</span><span class="token string">'&lt;img src="image1_thumb.jpg"&gt;'</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//img'</span> data<span class="token operator">=</span><span class="token string">'&lt;img src="image2_thumb.jpg"&gt;'</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//img'</span> data<span class="token operator">=</span><span class="token string">'&lt;img src="image3_thumb.jpg"&gt;'</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//img'</span> data<span class="token operator">=</span><span class="token string">'&lt;img src="image4_thumb.jpg"&gt;'</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//img'</span> data<span class="token operator">=</span><span class="token string">'&lt;img src="image5_thumb.jpg"&gt;'</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token comment">#8、带变量的xpath</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@id=$xxx]/a/text()'</span><span class="token punctuation">,</span>xxx<span class="token operator">=</span><span class="token string">'images'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Name: My image 1 '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[count(a)=$yyy]/@id'</span><span class="token punctuation">,</span>yyy<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#求有5个a标签的div的id</span><span class="token string">'images'</span></code></pre><p><a href="https://docs.scrapy.org/en/latest/topics/selectors.html">https://docs.scrapy.org/en/latest/topics/selectors.html</a></p><h3 id="七-Items"><a href="#七-Items" class="headerlink" title="七 Items"></a>七 Items</h3><p><a href="https://docs.scrapy.org/en/latest/topics/items.html">https://docs.scrapy.org/en/latest/topics/items.html</a></p><h3 id="八-Item-Pipeline"><a href="#八-Item-Pipeline" class="headerlink" title="八 Item Pipeline"></a>八 Item Pipeline</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#一：可以写多个Pipeline类</span><span class="token comment">#1、如果优先级高的Pipeline的process_item返回一个值或者None，会自动传给下一个pipline的process_item,</span><span class="token comment">#2、如果只想让第一个Pipeline执行，那得让第一个pipline的process_item抛出异常raise DropItem()</span><span class="token comment">#3、可以用spider.name == '爬虫名' 来控制哪些爬虫用哪些pipeline</span>二：示范<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> DropItem<span class="token keyword">class</span> <span class="token class-name">CustomPipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> v```<span class="token decorator annotation punctuation">@classmethod</span><span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Scrapy会先通过getattr判断我们是否自定义了from_crawler,有则调它来完    成实例化    """</span>    val <span class="token operator">=</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>getint<span class="token punctuation">(</span><span class="token string">'MMMM'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> cls<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    爬虫刚启动时执行一次    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'000000'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    爬虫关闭时执行一次    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'111111'</span><span class="token punctuation">)</span>``````<span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 操作并进行持久化</span>    <span class="token comment"># return表示会被后续的pipeline继续处理</span>    <span class="token keyword">return</span> item    <span class="token comment"># 表示将item丢弃，不会被后续pipeline处理</span>    <span class="token comment"># raise DropItem()</span><span class="token comment">#1、settings.py</span>HOST<span class="token operator">=</span><span class="token string">"127.0.0.1"</span>PORT<span class="token operator">=</span><span class="token number">27017</span>USER<span class="token operator">=</span><span class="token string">"root"</span>PWD<span class="token operator">=</span><span class="token string">"123"</span>DB<span class="token operator">=</span><span class="token string">"amazon"</span>TABLE<span class="token operator">=</span><span class="token string">"goods"</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'Amazon.pipelines.CustomPipeline'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">#2、pipelines.py</span><span class="token keyword">class</span> <span class="token class-name">CustomPipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>host<span class="token punctuation">,</span>port<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pwd<span class="token punctuation">,</span>db<span class="token punctuation">,</span>table<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>host<span class="token operator">=</span>host        self<span class="token punctuation">.</span>port<span class="token operator">=</span>port        self<span class="token punctuation">.</span>user<span class="token operator">=</span>user        self<span class="token punctuation">.</span>pwd<span class="token operator">=</span>pwd        self<span class="token punctuation">.</span>db<span class="token operator">=</span>db        self<span class="token punctuation">.</span>table<span class="token operator">=</span>table```<span class="token decorator annotation punctuation">@classmethod</span><span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Scrapy会先通过getattr判断我们是否自定义了from_crawler,有则调它来完    成实例化    """</span>    HOST <span class="token operator">=</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HOST'</span><span class="token punctuation">)</span>    PORT <span class="token operator">=</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'PORT'</span><span class="token punctuation">)</span>    USER <span class="token operator">=</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'USER'</span><span class="token punctuation">)</span>    PWD <span class="token operator">=</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'PWD'</span><span class="token punctuation">)</span>    DB <span class="token operator">=</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'DB'</span><span class="token punctuation">)</span>    TABLE <span class="token operator">=</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'TABLE'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> cls<span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PWD<span class="token punctuation">,</span>DB<span class="token punctuation">,</span>TABLE<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    爬虫刚启动时执行一次    """</span>    self<span class="token punctuation">.</span>client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://%s:%s@%s:%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span>self<span class="token punctuation">.</span>pwd<span class="token punctuation">,</span>self<span class="token punctuation">.</span>host<span class="token punctuation">,</span>self<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    爬虫关闭时执行一次    """</span>    self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>``````<span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 操作并进行持久化</span>```        self<span class="token punctuation">.</span>client<span class="token punctuation">[</span>self<span class="token punctuation">.</span>db<span class="token punctuation">]</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>table<span class="token punctuation">]</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><a href="https://docs.scrapy.org/en/latest/topics/item-pipeline.html">https://docs.scrapy.org/en/latest/topics/item-pipeline.html</a></p><h3 id="九-Dowloader-Middeware"><a href="#九-Dowloader-Middeware" class="headerlink" title="九 Dowloader Middeware"></a>九 Dowloader Middeware</h3><pre class="language-python" data-language="python"><code class="language-python">下载中间件的用途    <span class="token number">1</span>、在process——request内，自定义下载，不用scrapy的下载    <span class="token number">2</span>、对请求进行二次加工，比如        设置请求头        设置cookie        添加代理            scrapy自带的代理组件：                <span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>downloadermiddlewares<span class="token punctuation">.</span>httpproxy <span class="token keyword">import</span> HttpProxyMiddleware                <span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> getproxies<span class="token keyword">class</span> <span class="token class-name">DownMiddleware1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        请求需要被下载时，经过所有下载器中间件的process_request调用        :param request:         :param spider:         :return:              None,继续后续中间件去下载；            Response对象，停止process_request的执行，开始执行process_response            Request对象，停止中间件的执行，将Request重新调度器            raise IgnoreRequest异常，停止process_request的执行，开始执行process_exception        """</span>        <span class="token keyword">pass</span>```<span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    spider处理完成，返回时调用    :param response:    :param result:    :param spider:    :return:         Response 对象：转交给其他中间件process_response        Request 对象：停止中间件，request会被重新调度下载        raise IgnoreRequest 异常：调用Request.errback    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'response1'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    当下载处理器(download handler)或 process_request() (下载中间件)抛出异常    :param response:    :param exception:    :param spider:    :return:         None：继续交给后续中间件处理异常；        Response对象：停止后续process_exception方法        Request对象：停止中间件，request将会被重新调用下载    """</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token comment">#1、与middlewares.py同级目录下新建proxy_handle.py</span><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">get_proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:5010/get/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">def</span> <span class="token function">delete_proxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">:</span>    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:5010/delete/?proxy={}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#2、middlewares.py</span><span class="token keyword">from</span> Amazon<span class="token punctuation">.</span>proxy_handle <span class="token keyword">import</span> get_proxy<span class="token punctuation">,</span>delete_proxy<span class="token keyword">class</span> <span class="token class-name">DownMiddleware1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        请求需要被下载时，经过所有下载器中间件的process_request调用        :param request:        :param spider:        :return:            None,继续后续中间件去下载；            Response对象，停止process_request的执行，开始执行process_response            Request对象，停止中间件的执行，将Request重新调度器            raise IgnoreRequest异常，停止process_request的执行，开始执行process_exception        """</span>        proxy<span class="token operator">=</span><span class="token string">"http://"</span> <span class="token operator">+</span> get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>        request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'download_timeout'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">20</span>        request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"proxy"</span><span class="token punctuation">]</span> <span class="token operator">=</span> proxy        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'为%s 添加代理%s '</span> <span class="token operator">%</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'元数据为'</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>meta<span class="token punctuation">)</span>```<span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    spider处理完成，返回时调用    :param response:    :param result:    :param spider:    :return:        Response 对象：转交给其他中间件process_response        Request 对象：停止中间件，request会被重新调度下载        raise IgnoreRequest 异常：调用Request.errback    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'返回状态吗'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>    <span class="token keyword">return</span> response``````<span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    当下载处理器(download handler)或 process_request() (下载中间件)抛出异常    :param response:    :param exception:    :param spider:    :return:        None：继续交给后续中间件处理异常；        Response对象：停止后续process_exception方法        Request对象：停止中间件，request将会被重新调用下载    """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'代理%s，访问%s出现异常:%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span>exception<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> time    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    delete_proxy<span class="token punctuation">(</span>request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'http://'</span><span class="token operator">+</span>get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> request</code></pre><h3 id="十-Spider-Middleware"><a href="#十-Spider-Middleware" class="headerlink" title="十 Spider Middleware"></a>十 Spider Middleware</h3><p><strong>1、爬虫中间件方法介绍</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Not all methods need to be defined. If a method is not defined,</span>    <span class="token comment"># scrapy acts as if the spider middleware does not modify the</span>    <span class="token comment"># passed objects.</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># This method is used by Scrapy to create your spiders.</span>        s <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span>        crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>s<span class="token punctuation">.</span>spider_opened<span class="token punctuation">,</span> signal<span class="token operator">=</span>signals<span class="token punctuation">.</span>spider_opened<span class="token punctuation">)</span> <span class="token comment">#当前爬虫执行时触发spider_opened</span>        <span class="token keyword">return</span> s```<span class="token keyword">def</span> <span class="token function">spider_opened</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># spider.logger.info('我是egon派来的爬虫1: %s' % spider.name)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是egon派来的爬虫1: %s'</span> <span class="token operator">%</span> spider<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start_requests<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Called with the start requests of the spider, and works</span>    <span class="token comment"># similarly to the process_spider_output() method, except</span>    <span class="token comment"># that it doesn’t have a response associated.</span>    <span class="token comment"># Must return only requests (not items).</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start_requests1'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> r <span class="token keyword">in</span> start_requests<span class="token punctuation">:</span>        <span class="token keyword">yield</span> r<span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Called for each response that goes through the spider</span>    <span class="token comment"># middleware and into the spider.</span>    <span class="token comment"># 每个response经过爬虫中间件进入spider时调用</span>    <span class="token comment"># 返回值：Should return None or raise an exception.</span>    <span class="token comment">#1、None: 继续执行其他中间件的process_spider_input</span>    <span class="token comment">#2、抛出异常：</span>    <span class="token comment"># 一旦抛出异常则不再执行其他中间件的process_spider_input</span>    <span class="token comment"># 并且触发request绑定的errback</span>    <span class="token comment"># errback的返回值倒着传给中间件的process_spider_output</span>    <span class="token comment"># 如果未找到errback，则倒着执行中间件的process_spider_exception</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input1"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Called with the results returned from the Spider, after</span>    <span class="token comment"># it has processed the response.</span>    <span class="token comment"># Must return an iterable of Request, dict or Item objects.</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output1'</span><span class="token punctuation">)</span>    <span class="token comment"># 用yield返回多次，与return返回一次是一个道理</span>    <span class="token comment"># 如果生成器掌握不好（函数内有yield执行函数得到的是生成器而并不会立刻执行），生成器的形式会容易误导你对中间件执行顺序的理解</span>    <span class="token comment"># for i in result:</span>    <span class="token comment">#     yield i</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Called when a spider or process_spider_input() method</span>    <span class="token comment"># (from other spider middleware) raises an exception.</span>    <span class="token comment"># Should return either None or an iterable of Response, dict</span>    <span class="token comment"># or Item objects.</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exception1'</span><span class="token punctuation">)</span></code></pre><p><strong>2、当前爬虫启动时以及初始请求产生时</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#步骤一：</span><span class="token triple-quoted-string string">'''打开注释：SPIDER_MIDDLEWARES = {   'Baidu.middlewares.SpiderMiddleware1': 200,   'Baidu.middlewares.SpiderMiddleware2': 300,   'Baidu.middlewares.SpiderMiddleware3': 400,}'''</span><span class="token comment">#步骤二：middlewares.py</span><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span>        crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>s<span class="token punctuation">.</span>spider_opened<span class="token punctuation">,</span> signal<span class="token operator">=</span>signals<span class="token punctuation">.</span>spider_opened<span class="token punctuation">)</span> <span class="token comment">#当前爬虫执行时触发spider_opened</span>        <span class="token keyword">return</span> s```<span class="token keyword">def</span> <span class="token function">spider_opened</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是egon派来的爬虫1: %s'</span> <span class="token operator">%</span> spider<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start_requests<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Must return only requests (not items).</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start_requests1'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> r <span class="token keyword">in</span> start_requests<span class="token punctuation">:</span>        <span class="token keyword">yield</span> r```                <span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware2</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span>        crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>s<span class="token punctuation">.</span>spider_opened<span class="token punctuation">,</span> signal<span class="token operator">=</span>signals<span class="token punctuation">.</span>spider_opened<span class="token punctuation">)</span>  <span class="token comment"># 当前爬虫执行时触发spider_opened</span>        <span class="token keyword">return</span> s```<span class="token keyword">def</span> <span class="token function">spider_opened</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是egon派来的爬虫2: %s'</span> <span class="token operator">%</span> spider<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start_requests<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start_requests2'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> r <span class="token keyword">in</span> start_requests<span class="token punctuation">:</span>        <span class="token keyword">yield</span> r```<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware3</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span>        crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>s<span class="token punctuation">.</span>spider_opened<span class="token punctuation">,</span> signal<span class="token operator">=</span>signals<span class="token punctuation">.</span>spider_opened<span class="token punctuation">)</span>  <span class="token comment"># 当前爬虫执行时触发spider_opened</span>        <span class="token keyword">return</span> s```<span class="token keyword">def</span> <span class="token function">spider_opened</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是egon派来的爬虫3: %s'</span> <span class="token operator">%</span> spider<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start_requests<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start_requests3'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> r <span class="token keyword">in</span> start_requests<span class="token punctuation">:</span>        <span class="token keyword">yield</span> r```<span class="token comment">#步骤三：分析运行结果</span><span class="token comment">#1、启动爬虫时则立刻执行：</span>我是egon派来的爬虫<span class="token number">1</span><span class="token punctuation">:</span> baidu我是egon派来的爬虫<span class="token number">2</span><span class="token punctuation">:</span> baidu我是egon派来的爬虫<span class="token number">3</span><span class="token punctuation">:</span> baidu<span class="token comment">#2、然后产生一个初始的request请求，依次经过爬虫中间件1,2,3：</span>start_requests1start_requests2start_requests3</code></pre><p><strong>3、process_spider_input返回None时</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#步骤一：打开注释：</span>SPIDER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'Baidu.middlewares.SpiderMiddleware1'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>   <span class="token string">'Baidu.middlewares.SpiderMiddleware2'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>   <span class="token string">'Baidu.middlewares.SpiderMiddleware3'</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token string">''</span>'<span class="token comment">#步骤二：middlewares.py</span><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>```<span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input1"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output1'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exception1'</span><span class="token punctuation">)</span>```<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware2</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>```<span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input2"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output2'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exception2'</span><span class="token punctuation">)</span>```<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware3</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>```<span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input3"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output3'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exception3'</span><span class="token punctuation">)</span>```<span class="token comment">#步骤三：运行结果分析</span><span class="token comment">#1、返回response时，依次经过爬虫中间件1,2,3</span>input1input2input3<span class="token comment">#2、spider处理完毕后，依次经过爬虫中间件3,2,1</span>output3output2output1</code></pre><p><strong>4、process_spider_input抛出异常时</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#步骤一：</span><span class="token triple-quoted-string string">'''打开注释：SPIDER_MIDDLEWARES = {   'Baidu.middlewares.SpiderMiddleware1': 200,   'Baidu.middlewares.SpiderMiddleware2': 300,   'Baidu.middlewares.SpiderMiddleware3': 400,}'''</span><span class="token comment">#步骤二：middlewares.py</span><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>```<span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input1"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output1'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exception1'</span><span class="token punctuation">)</span>```<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware2</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>```<span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input2"</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span> Type<span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output2'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exception2'</span><span class="token punctuation">)</span>```<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware3</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>```<span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input3"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output3'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exception3'</span><span class="token punctuation">)</span>```        <span class="token comment">#运行结果        </span>input1input2exception3exception2exception1<span class="token comment">#分析：</span><span class="token comment">#1、当response经过中间件1的 process_spider_input返回None，继续交给中间件2的process_spider_input</span><span class="token comment">#2、中间件2的process_spider_input抛出异常，则直接跳过后续的process_spider_input，将异常信息传递给Spiders里该请求的errback</span><span class="token comment">#3、没有找到errback，则该response既没有被Spiders正常的callback执行，也没有被errback执行，即Spiders啥事也没有干，那么开始倒着执行process_spider_exception</span><span class="token comment">#4、如果process_spider_exception返回None，代表该方法推卸掉责任，并没处理异常，而是直接交给下一个process_spider_exception，全都返回None，则异常最终交给Engine抛出</span></code></pre><p><strong>5、指定errback</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#步骤一：spider.py</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BaiduSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'baidu'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">]</span>```<span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">,</span>                         callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">,</span>                         errback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_err<span class="token punctuation">,</span>                         <span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">parse_err</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#res 为异常信息，异常已经被该函数处理了，因此不会再抛给因此，于是开始走process_spider_output</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment">#提取异常信息中有用的数据以可迭代对象的形式存放于管道中，等待被process_spider_output取走</span>```<span class="token comment">#步骤二：</span><span class="token triple-quoted-string string">'''打开注释：SPIDER_MIDDLEWARES = {   'Baidu.middlewares.SpiderMiddleware1': 200,   'Baidu.middlewares.SpiderMiddleware2': 300,   'Baidu.middlewares.SpiderMiddleware3': 400,}'''</span><span class="token comment">#步骤三：middlewares.py</span><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>```<span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input1"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output1'</span><span class="token punctuation">,</span><span class="token builtin">list</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exception1'</span><span class="token punctuation">)</span>```<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware2</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>```<span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input2"</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'input2 抛出异常'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output2'</span><span class="token punctuation">,</span><span class="token builtin">list</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exception2'</span><span class="token punctuation">)</span>```<span class="token keyword">class</span> <span class="token class-name">SpiderMiddleware3</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>```<span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input3"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output3'</span><span class="token punctuation">,</span><span class="token builtin">list</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exception3'</span><span class="token punctuation">)</span>```<span class="token comment">#步骤四：运行结果分析</span>input1input2output3 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment">#parse_err的返回值放入管道中，只能被取走一次，在output3的方法内可以根据异常信息封装一个新的request请求</span>output2 <span class="token punctuation">[</span><span class="token punctuation">]</span>output1 <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h3 id="十一-自定义扩展"><a href="#十一-自定义扩展" class="headerlink" title="十一 自定义扩展"></a>十一 自定义扩展</h3><pre class="language-python" data-language="python"><code class="language-python">自定义扩展（与django的信号类似）    <span class="token number">1</span>、django的信号是django是预留的扩展，信号一旦被触发，相应的功能就会执行    <span class="token number">2</span>、scrapy自定义扩展的好处是可以在任意我们想要的位置添加功能，而其他组件中提供的功能只能在规定的位置执行<span class="token comment">#1、在与settings同级目录下新建一个文件，文件名可以为extentions.py,内容如下</span><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token keyword">class</span> <span class="token class-name">MyExtension</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value```<span class="token decorator annotation punctuation">@classmethod</span><span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>    val <span class="token operator">=</span> crawler<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>getint<span class="token punctuation">(</span><span class="token string">'MMMM'</span><span class="token punctuation">)</span>    obj <span class="token operator">=</span> cls<span class="token punctuation">(</span>val<span class="token punctuation">)</span>    crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>obj<span class="token punctuation">.</span>spider_opened<span class="token punctuation">,</span> signal<span class="token operator">=</span>signals<span class="token punctuation">.</span>spider_opened<span class="token punctuation">)</span>    crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>obj<span class="token punctuation">.</span>spider_closed<span class="token punctuation">,</span> signal<span class="token operator">=</span>signals<span class="token punctuation">.</span>spider_closed<span class="token punctuation">)</span>    <span class="token keyword">return</span> obj<span class="token keyword">def</span> <span class="token function">spider_opened</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'=============&gt;open'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">spider_closed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'=============&gt;close'</span><span class="token punctuation">)</span>```<span class="token comment">#2、配置生效</span>EXTENSIONS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"Amazon.extentions.MyExtension"</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">}</span></code></pre><h3 id="十二-settings-py"><a href="#十二-settings-py" class="headerlink" title="十二 settings.py"></a>十二 settings.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#==&gt;第一部分：基本配置&lt;===</span><span class="token comment">#1、项目名称，默认的USER_AGENT由它来构成，也作为日志记录的日志名</span>BOT_NAME <span class="token operator">=</span> <span class="token string">'Amazon'</span><span class="token comment">#2、爬虫应用路径</span>SPIDER_MODULES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Amazon.spiders'</span><span class="token punctuation">]</span>NEWSPIDER_MODULE <span class="token operator">=</span> <span class="token string">'Amazon.spiders'</span><span class="token comment">#3、客户端User-Agent请求头</span><span class="token comment">#USER_AGENT = 'Amazon (+http://www.yourdomain.com)'</span><span class="token comment">#4、是否遵循爬虫协议</span><span class="token comment"># Obey robots.txt rules</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment">#5、是否支持cookie，cookiejar进行操作cookie，默认开启</span><span class="token comment">#COOKIES_ENABLED = False</span><span class="token comment">#6、Telnet用于查看当前爬虫的信息，操作爬虫等...使用telnet ip port ，然后通过命令操作</span><span class="token comment">#TELNETCONSOLE_ENABLED = False</span><span class="token comment">#TELNETCONSOLE_HOST = '127.0.0.1'</span><span class="token comment">#TELNETCONSOLE_PORT = [6023,]</span><span class="token comment">#7、Scrapy发送HTTP请求默认使用的请求头</span><span class="token comment">#DEFAULT_REQUEST_HEADERS = {</span><span class="token comment">#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span><span class="token comment">#   'Accept-Language': 'en',</span><span class="token comment">#}</span><span class="token comment">#===&gt;第二部分：并发与延迟&lt;===</span><span class="token comment">#1、下载器总共最大处理的并发请求数,默认值16</span><span class="token comment">#CONCURRENT_REQUESTS = 32</span><span class="token comment">#2、每个域名能够被执行的最大并发请求数目，默认值8</span><span class="token comment">#CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><span class="token comment">#3、能够被单个IP处理的并发请求数，默认值0，代表无限制，需要注意两点</span><span class="token comment">#I、如果不为零，那CONCURRENT_REQUESTS_PER_DOMAIN将被忽略，即并发数的限制是按照每个IP来计算，而不是每个域名</span><span class="token comment">#II、该设置也影响DOWNLOAD_DELAY，如果该值不为零，那么DOWNLOAD_DELAY下载延迟是限制每个IP而不是每个域</span><span class="token comment">#CONCURRENT_REQUESTS_PER_IP = 16</span><span class="token comment">#4、如果没有开启智能限速，这个值就代表一个规定死的值，代表对同一网址延迟请求的秒数</span><span class="token comment">#DOWNLOAD_DELAY = 3</span><span class="token comment">#===&gt;第三部分：智能限速/自动节流：AutoThrottle extension&lt;===</span><span class="token comment">#一：介绍</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>throttle <span class="token keyword">import</span> AutoThrottle <span class="token comment">#http://scrapy.readthedocs.io/en/latest/topics/autothrottle.html#topics-autothrottle</span>设置目标：<span class="token number">1</span>、比使用默认的下载延迟对站点更好<span class="token number">2</span>、自动调整scrapy到最佳的爬取速度，所以用户无需自己调整下载延迟到最佳状态。用户只需要定义允许最大并发的请求，剩下的事情由该扩展组件自动完成<span class="token comment">#二：如何实现？</span>在Scrapy中，下载延迟是通过计算建立TCP连接到接收到HTTP包头<span class="token punctuation">(</span>header<span class="token punctuation">)</span>之间的时间来测量的。注意，由于Scrapy可能在忙着处理spider的回调函数或者无法下载，因此在合作的多任务环境下准确测量这些延迟是十分苦难的。 不过，这些延迟仍然是对Scrapy<span class="token punctuation">(</span>甚至是服务器<span class="token punctuation">)</span>繁忙程度的合理测量，而这扩展就是以此为前提进行编写的。<span class="token comment">#三：限速算法</span>自动限速算法基于以下规则调整下载延迟<span class="token comment">#1、spiders开始时的下载延迟是基于AUTOTHROTTLE_START_DELAY的值</span><span class="token comment">#2、当收到一个response，对目标站点的下载延迟=收到响应的延迟时间/AUTOTHROTTLE_TARGET_CONCURRENCY</span><span class="token comment">#3、下一次请求的下载延迟就被设置成：对目标站点下载延迟时间和过去的下载延迟时间的平均值</span><span class="token comment">#4、没有达到200个response则不允许降低延迟</span><span class="token comment">#5、下载延迟不能变的比DOWNLOAD_DELAY更低或者比AUTOTHROTTLE_MAX_DELAY更高</span><span class="token comment">#四：配置使用</span><span class="token comment">#开启True，默认False</span>AUTOTHROTTLE_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment">#起始的延迟</span>AUTOTHROTTLE_START_DELAY <span class="token operator">=</span> <span class="token number">5</span><span class="token comment">#最小延迟</span>DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">#最大延迟</span>AUTOTHROTTLE_MAX_DELAY <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">#每秒并发请求数的平均值，不能高于 CONCURRENT_REQUESTS_PER_DOMAIN或CONCURRENT_REQUESTS_PER_IP，调高了则吞吐量增大强奸目标站点，调低了则对目标站点更加”礼貌“</span><span class="token comment">#每个特定的时间点，scrapy并发请求的数目都可能高于或低于该值，这是爬虫视图达到的建议值而不是硬限制</span>AUTOTHROTTLE_TARGET_CONCURRENCY <span class="token operator">=</span> <span class="token number">16.0</span><span class="token comment">#调试</span>AUTOTHROTTLE_DEBUG <span class="token operator">=</span> <span class="token boolean">True</span>CONCURRENT_REQUESTS_PER_DOMAIN <span class="token operator">=</span> <span class="token number">16</span>CONCURRENT_REQUESTS_PER_IP <span class="token operator">=</span> <span class="token number">16</span><span class="token comment">#===&gt;第四部分：爬取深度与爬取方式&lt;===</span><span class="token comment">#1、爬虫允许的最大深度，可以通过meta查看当前深度；0表示无深度</span><span class="token comment"># DEPTH_LIMIT = 3</span><span class="token comment">#2、爬取时，0表示深度优先Lifo(默认)；1表示广度优先FiFo</span><span class="token comment"># 后进先出，深度优先</span><span class="token comment"># DEPTH_PRIORITY = 0</span><span class="token comment"># SCHEDULER_DISK_QUEUE = 'scrapy.squeue.PickleLifoDiskQueue'</span><span class="token comment"># SCHEDULER_MEMORY_QUEUE = 'scrapy.squeue.LifoMemoryQueue'</span><span class="token comment"># 先进先出，广度优先</span><span class="token comment"># DEPTH_PRIORITY = 1</span><span class="token comment"># SCHEDULER_DISK_QUEUE = 'scrapy.squeue.PickleFifoDiskQueue'</span><span class="token comment"># SCHEDULER_MEMORY_QUEUE = 'scrapy.squeue.FifoMemoryQueue'</span><span class="token comment">#3、调度器队列</span><span class="token comment"># SCHEDULER = 'scrapy.core.scheduler.Scheduler'</span><span class="token comment"># from scrapy.core.scheduler import Scheduler</span><span class="token comment">#4、访问URL去重</span><span class="token comment"># DUPEFILTER_CLASS = 'step8_king.duplication.RepeatUrl'</span><span class="token comment">#===&gt;第五部分：中间件、Pipelines、扩展&lt;===</span><span class="token comment">#1、Enable or disable spider middlewares</span><span class="token comment"># See http://scrapy.readthedocs.org/en/latest/topics/spider-middleware.html</span><span class="token comment">#SPIDER_MIDDLEWARES = {</span><span class="token comment">#    'Amazon.middlewares.AmazonSpiderMiddleware': 543,</span><span class="token comment">#}</span><span class="token comment">#2、Enable or disable downloader middlewares</span><span class="token comment"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span>DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment"># 'Amazon.middlewares.DownMiddleware1': 543,</span><span class="token punctuation">}</span><span class="token comment">#3、Enable or disable extensions</span><span class="token comment"># See http://scrapy.readthedocs.org/en/latest/topics/extensions.html</span><span class="token comment">#EXTENSIONS = {</span><span class="token comment">#    'scrapy.extensions.telnet.TelnetConsole': None,</span><span class="token comment">#}</span><span class="token comment">#4、Configure item pipelines</span><span class="token comment"># See http://scrapy.readthedocs.org/en/latest/topics/item-pipeline.html</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment"># 'Amazon.pipelines.CustomPipeline': 200,</span><span class="token punctuation">}</span><span class="token comment">#===&gt;第六部分：缓存&lt;===</span><span class="token triple-quoted-string string">"""1. 启用缓存   目的用于将已经发送的请求或相应缓存下来，以便以后使用   from scrapy.downloadermiddlewares.httpcache import HttpCacheMiddleware   from scrapy.extensions.httpcache import DummyPolicy   from scrapy.extensions.httpcache import FilesystemCacheStorage   """</span>   <span class="token comment"># 是否启用缓存策略</span>   <span class="token comment"># HTTPCACHE_ENABLED = True</span><span class="token comment"># 缓存策略：所有请求均缓存，下次在请求直接访问原来的缓存即可</span><span class="token comment"># HTTPCACHE_POLICY = "scrapy.extensions.httpcache.DummyPolicy"</span><span class="token comment"># 缓存策略：根据Http响应头：Cache-Control、Last-Modified 等进行缓存的策略</span><span class="token comment"># HTTPCACHE_POLICY = "scrapy.extensions.httpcache.RFC2616Policy"</span><span class="token comment"># 缓存超时时间</span><span class="token comment"># HTTPCACHE_EXPIRATION_SECS = 0</span><span class="token comment"># 缓存保存路径</span><span class="token comment"># HTTPCACHE_DIR = 'httpcache'</span><span class="token comment"># 缓存忽略的Http状态码</span><span class="token comment"># HTTPCACHE_IGNORE_HTTP_CODES = []</span><span class="token comment"># 缓存存储的插件</span><span class="token comment"># HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span><span class="token comment">#===&gt;第七部分：线程池&lt;===</span>REACTOR_THREADPOOL_MAXSIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">#Default: 10</span><span class="token comment">#scrapy基于twisted异步IO框架，downloader是多线程的，线程数是Twisted线程池的默认大小(The maximum limit for Twisted Reactor thread pool size.)</span><span class="token comment">#关于twisted线程池：</span>http<span class="token punctuation">:</span><span class="token operator">//</span>twistedmatrix<span class="token punctuation">.</span>com<span class="token operator">/</span>documents<span class="token operator">/</span><span class="token number">10.1</span><span class="token number">.0</span><span class="token operator">/</span>core<span class="token operator">/</span>howto<span class="token operator">/</span>threading<span class="token punctuation">.</span>html<span class="token comment">#线程池实现：twisted.python.threadpool.ThreadPool</span>twisted调整线程池大小：<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>internet <span class="token keyword">import</span> reactorreactor<span class="token punctuation">.</span>suggestThreadPoolSize<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment">#scrapy相关源码：</span>D<span class="token punctuation">:</span>\python3<span class="token punctuation">.</span><span class="token number">6</span>\Lib\site<span class="token operator">-</span>packages\scrapy\crawler<span class="token punctuation">.</span>py<span class="token comment">#补充：</span>windows下查看进程内线程数的工具：    https<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>microsoft<span class="token punctuation">.</span>com<span class="token operator">/</span>zh<span class="token operator">-</span>cn<span class="token operator">/</span>sysinternals<span class="token operator">/</span>downloads<span class="token operator">/</span>pslist    或    https<span class="token punctuation">:</span><span class="token operator">//</span>pan<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>s<span class="token operator">/</span>1jJ0pMaM    ```命令为：pslist <span class="token operator">|</span>findstr python```linux下：top <span class="token operator">-</span>p 进程<span class="token builtin">id</span><span class="token comment">#===&gt;第八部分：其他默认配置参考&lt;===</span>D<span class="token punctuation">:</span>\python3<span class="token punctuation">.</span><span class="token number">6</span>\Lib\site<span class="token operator">-</span>packages\scrapy\settings\default_settings<span class="token punctuation">.</span>py</code></pre><h3 id="十三-自定制命令"><a href="#十三-自定制命令" class="headerlink" title="十三 自定制命令"></a>十三 自定制命令</h3><ul><li><p>在spiders同级创建任意目录，如：commands</p></li><li><p>在其中创建 crawlall.py 文件 （此处文件名就是自定义的命令）</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>commands <span class="token keyword">import</span> ScrapyCommand  <span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>project <span class="token keyword">import</span> get_project_settings      <span class="token keyword">class</span> <span class="token class-name">Command</span><span class="token punctuation">(</span>ScrapyCommand<span class="token punctuation">)</span><span class="token punctuation">:</span>        requires_project <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">def</span> <span class="token function">syntax</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token string">'[options]'</span>        <span class="token keyword">def</span> <span class="token function">short_desc</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token string">'Runs all of the spiders'</span>        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">:</span>          spider_list <span class="token operator">=</span> self<span class="token punctuation">.</span>crawler_process<span class="token punctuation">.</span>spiders<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">for</span> name <span class="token keyword">in</span> spider_list<span class="token punctuation">:</span>              self<span class="token punctuation">.</span>crawler_process<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">**</span>opts<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>          self<span class="token punctuation">.</span>crawler_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>在settings.py 中添加配置 COMMANDS_MODULE = ‘项目名称.目录名称’</p></li><li><p>在项目目录执行命令：scrapy crawlall</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫-Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FLask-SQLAlchemy</title>
      <link href="/2021/10/08/SQLAlchemy/"/>
      <url>/2021/10/08/SQLAlchemy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>FLask-SQLAlchemy</p><span id="more"></span><p><strong>SQLAlchemy</strong></p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>SQLAlchemy是一个基于Python实现的ORM框架。该框架建立在 DB API之上，使用关系对象映射进行数据库操作，简言之便是：将类和对象转换成SQL，然后使用数据API执行SQL并获取执行结果。</p><pre class="language-python" data-language="python"><code class="language-python">pip3 install sqlalchemy</code></pre><p>组成部分：</p><pre class="language-python" data-language="python"><code class="language-python">Engine，框架的引擎Connection Pooling ，数据库连接池Dialect，选择连接数据库的DB API种类Schema<span class="token operator">/</span>Types，架构和类型SQL Exprression Language，SQL表达式语言</code></pre><p>SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：</p><pre class="language-python" data-language="python"><code class="language-python">MySQL<span class="token operator">-</span>Python    mysql<span class="token operator">+</span>mysqldb<span class="token punctuation">:</span><span class="token operator">//</span><span class="token operator">&lt;</span>user<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>host<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token operator">&lt;</span>dbname<span class="token operator">&gt;</span>    pymysql    mysql<span class="token operator">+</span>pymysql<span class="token punctuation">:</span><span class="token operator">//</span><span class="token operator">&lt;</span>username<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>host<span class="token operator">&gt;</span><span class="token operator">/</span><span class="token operator">&lt;</span>dbname<span class="token operator">&gt;</span><span class="token punctuation">[</span>?<span class="token operator">&lt;</span>options<span class="token operator">&gt;</span><span class="token punctuation">]</span>    MySQL<span class="token operator">-</span>Connector    mysql<span class="token operator">+</span>mysqlconnector<span class="token punctuation">:</span><span class="token operator">//</span><span class="token operator">&lt;</span>user<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>host<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token operator">&lt;</span>dbname<span class="token operator">&gt;</span>    cx_Oracle    oracle<span class="token operator">+</span>cx_oracle<span class="token punctuation">:</span><span class="token operator">//</span>user<span class="token punctuation">:</span><span class="token keyword">pass</span>@host<span class="token punctuation">:</span>port<span class="token operator">/</span>dbname<span class="token punctuation">[</span>?key<span class="token operator">=</span>value<span class="token operator">&amp;</span>key<span class="token operator">=</span>value<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>    更多：http<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>sqlalchemy<span class="token punctuation">.</span>org<span class="token operator">/</span>en<span class="token operator">/</span>latest<span class="token operator">/</span>dialects<span class="token operator">/</span>index<span class="token punctuation">.</span>html</code></pre><p><strong>django中如何反向生成models</strong></p><pre class="language-python" data-language="python"><code class="language-python">python manage<span class="token punctuation">.</span>py inspectdb <span class="token operator">&gt;</span> app<span class="token operator">/</span>models<span class="token punctuation">.</span>py</code></pre><h2 id="2-简单使用（能创建表，删除表，不能修改表）"><a href="#2-简单使用（能创建表，删除表，不能修改表）" class="headerlink" title="2.简单使用（能创建表，删除表，不能修改表）"></a>2.简单使用（能创建表，删除表，不能修改表）</h2><p>修改表：在数据库添加字段，类对应上</p><p>1执行原生sql（不常用）</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">import</span> sqlalchemy<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>base <span class="token keyword">import</span> Engineengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>    <span class="token string">"mysql+pymysql://root:123456@127.0.0.1:3306/test?charset=utf8"</span><span class="token punctuation">,</span>    max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment"># 超过连接池大小外最多创建的连接</span>    pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment"># 连接池大小</span>    pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment"># 池中没有线程最多等待的时间，否则报错</span>    pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> engine<span class="token punctuation">.</span>raw_connection<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>        <span class="token string">"select * from app01_book"</span>    <span class="token punctuation">)</span>    result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>2 orm使用</p><p>models.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> UniqueConstraint<span class="token punctuation">,</span> IndexBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Users</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>  <span class="token comment"># 数据库表名称</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># id 主键</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># name列，索引，不可为空</span>    <span class="token comment"># email = Column(String(32), unique=True)</span>    <span class="token comment">#datetime.datetime.now不能加括号，加了括号，以后永远是当前时间</span>    <span class="token comment"># ctime = Column(DateTime, default=datetime.datetime.now)</span>    <span class="token comment"># extra = Column(Text, nullable=True)</span>    __table_args__ <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token comment"># UniqueConstraint('id', 'name', name='uix_id_name'), #联合唯一</span>        <span class="token comment"># Index('ix_id_name', 'name', 'email'), #索引</span>    <span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    根据类创建数据库表    :return:    """</span>    engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>        <span class="token string">"mysql+pymysql://root:123456@127.0.0.1:3306/aaa?charset=utf8"</span><span class="token punctuation">,</span>        max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment"># 超过连接池大小外最多创建的连接</span>        pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment"># 连接池大小</span>        pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment"># 池中没有线程最多等待的时间，否则报错</span>        pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span>    <span class="token punctuation">)</span>    Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drop_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    根据类删除数据库表    :return:    """</span>    engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>        <span class="token string">"mysql+pymysql://root:123456@127.0.0.1:3306/aaa?charset=utf8"</span><span class="token punctuation">,</span>        max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment"># 超过连接池大小外最多创建的连接</span>        pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment"># 连接池大小</span>        pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment"># 池中没有线程最多等待的时间，否则报错</span>        pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span>    <span class="token punctuation">)</span>    Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># drop_db()</span>    init_db<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>app.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> models <span class="token keyword">import</span> Users<span class="token comment">#"mysql+pymysql://root@127.0.0.1:3306/aaa"</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123456@127.0.0.1:3306/aaa"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Connection <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment"># 每次执行数据库操作时，都需要创建一个Connection</span>con <span class="token operator">=</span> Connection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ############# 执行ORM操作 #############</span>obj1 <span class="token operator">=</span> Users<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>con<span class="token punctuation">.</span>add<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token comment"># 提交事务</span>con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭session，其实是将连接放回连接池</span>con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="3-一对多关系"><a href="#3-一对多关系" class="headerlink" title="3.一对多关系"></a>3.一对多关系</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Hobby</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'hobby'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    caption <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'篮球'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'person'</span>    nid <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># hobby指的是tablename而不是类名，uselist=False</span>    hobby_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">"hobby.id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 跟数据库无关，不会新增字段，只用于快速链表操作</span>    <span class="token comment"># 类名，backref用于反向查询</span>    hobby<span class="token operator">=</span>relationship<span class="token punctuation">(</span><span class="token string">'Hobby'</span><span class="token punctuation">,</span>backref<span class="token operator">=</span><span class="token string">'pers'</span><span class="token punctuation">)</span></code></pre><h2 id="4-多对多关系"><a href="#4-多对多关系" class="headerlink" title="4.多对多关系"></a>4.多对多关系</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Boy2Girl</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'boy2girl'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    girl_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'girl.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    boy_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'boy.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'girl'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'boy'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    hostname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token comment"># 与生成表结构无关，仅用于查询方便,放在哪个单表中都可以</span>    servers <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Girl'</span><span class="token punctuation">,</span> secondary<span class="token operator">=</span><span class="token string">'boy2girl'</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">'boys'</span><span class="token punctuation">)</span></code></pre><h2 id="5-操作数据表"><a href="#5-操作数据表" class="headerlink" title="5.操作数据表"></a>5.操作数据表</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> models <span class="token keyword">import</span> Users  engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123456@127.0.0.1:3306/aaa"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>  <span class="token comment"># 每次执行数据库操作时，都需要创建一个session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># ############# 执行ORM操作 #############</span>obj1 <span class="token operator">=</span> Users<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>  <span class="token comment"># 提交事务</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭session</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="6-基于scoped-session实现线程安全"><a href="#6-基于scoped-session实现线程安全" class="headerlink" title="6.基于scoped_session实现线程安全"></a>6.基于scoped_session实现线程安全</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> scoped_session<span class="token keyword">from</span> models <span class="token keyword">import</span> Usersengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/s6"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""# 线程安全，基于本地线程实现每个线程用同一个session# 特殊的：scoped_session中有原来方法的Session中的一下方法：public_methods = (    '__contains__', '__iter__', 'add', 'add_all', 'begin', 'begin_nested',    'close', 'commit', 'connection', 'delete', 'execute', 'expire',    'expire_all', 'expunge', 'expunge_all', 'flush', 'get_bind',    'is_modified', 'bulk_save_objects', 'bulk_insert_mappings',    'bulk_update_mappings',    'merge', 'query', 'refresh', 'rollback',    'scalar')"""</span><span class="token comment">#scoped_session类并没有继承Session,但是却又它的所有方法</span>session <span class="token operator">=</span> scoped_session<span class="token punctuation">(</span>Session<span class="token punctuation">)</span><span class="token comment"># ############# 执行ORM操作 #############</span>obj1 <span class="token operator">=</span> Users<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"alex1"</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token comment"># 提交事务</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭session</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="7-基本增删查改"><a href="#7-基本增删查改" class="headerlink" title="7.基本增删查改"></a>7.基本增删查改</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">,</span> UniqueConstraint<span class="token punctuation">,</span> Index<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token punctuation">,</span> relationship<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> text<span class="token keyword">from</span> db <span class="token keyword">import</span> Users<span class="token punctuation">,</span> Hostsengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/s6"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ################ 添加 ################</span><span class="token triple-quoted-string string">"""obj1 = Users(name="wupeiqi")session.add(obj1)session.add_all([    Users(name="lqz"),    Users(name="egon"),    Hosts(name="c1.com"),])session.commit()"""</span><span class="token comment"># ################ 删除 ################</span><span class="token triple-quoted-string string">"""session.query(Users).filter(Users.id &gt; 2).delete()session.commit()"""</span><span class="token comment"># ################ 修改 ################</span><span class="token triple-quoted-string string">"""#传字典session.query(Users).filter(Users.id &gt; 0).update({"name" : "lqz"})#类似于django的F查询session.query(Users).filter(Users.id &gt; 0).update({Users.name: Users.name + "099"}, synchronize_session=False)session.query(Users).filter(Users.id &gt; 0).update({"age": Users.age + 1}, synchronize_session="evaluate")session.commit()"""</span><span class="token comment"># ################ 查询 ################</span><span class="token triple-quoted-string string">"""r1 = session.query(Users).all()#只取age列，把name重命名为xxr2 = session.query(Users.name.label('xx'), Users.age).all()#filter传的是表达式，filter_by传的是参数r3 = session.query(Users).filter(Users.name == "lqz").all()r4 = session.query(Users).filter_by(name='lqz').all()r5 = session.query(Users).filter_by(name='lqz').first()#:value 和:name 相当于占位符，用params传参数r6 = session.query(Users).filter(text("id&lt;:value and name=:name")).params(value=224, name='fred').order_by(Users.id).all()#自定义查询sqlr7 = session.query(Users).from_statement(text("SELECT * FROM users where name=:name")).params(name='ed').all()"""</span><span class="token comment">#增，删，改都要commit()</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="8-常用操作"><a href="#8-常用操作" class="headerlink" title="8.常用操作"></a>8.常用操作</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#　条件</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'lqz'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#表达式，and条件连接</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span> Users<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'eric'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">.</span>between<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Users<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'eric'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#注意下划线</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">.</span>in_<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#~非，除。。外</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token operator">~</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">.</span>in_<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#二次筛选</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">.</span>in_<span class="token punctuation">(</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'eric'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> and_<span class="token punctuation">,</span> or_<span class="token comment">#or_包裹的都是or条件，and_包裹的都是and条件</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>and_<span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span> Users<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'eric'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>or_<span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span> Users<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'eric'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>    or_<span class="token punctuation">(</span>        Users<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>        and_<span class="token punctuation">(</span>Users<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'eric'</span><span class="token punctuation">,</span> Users<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Users<span class="token punctuation">.</span>extra <span class="token operator">!=</span> <span class="token string">""</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 通配符，以e开头，不以e开头</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span>name<span class="token punctuation">.</span>like<span class="token punctuation">(</span><span class="token string">'e%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token operator">~</span>Users<span class="token punctuation">.</span>name<span class="token punctuation">.</span>like<span class="token punctuation">(</span><span class="token string">'e%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 限制，用于分页，区间</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment"># 排序，根据name降序排列（从大到小）</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>Users<span class="token punctuation">.</span>name<span class="token punctuation">.</span>desc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#第一个条件重复后，再按第二个条件升序排</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>Users<span class="token punctuation">.</span>name<span class="token punctuation">.</span>desc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">.</span>asc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 分组</span><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> funcret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token punctuation">.</span>group_by<span class="token punctuation">(</span>Users<span class="token punctuation">.</span>extra<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#分组之后取最大id，id之和，最小id</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>    func<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    func<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    func<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group_by<span class="token punctuation">(</span>Users<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#haviing筛选</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>    func<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    func<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    func<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group_by<span class="token punctuation">(</span>Users<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>having<span class="token punctuation">(</span>func<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 连表（默认用forinkey关联）</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">,</span> Favor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> Favor<span class="token punctuation">.</span>nid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#join表，默认是inner join</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Favor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#isouter=True 外连，表示Person left join Favor，没有右连接，反过来即可</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Favor<span class="token punctuation">,</span> isouter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#打印原生sql</span>aa<span class="token operator">=</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Favor<span class="token punctuation">,</span> isouter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token comment"># 自己指定on条件（连表条件）,第二个参数，支持on多个条件，用and_,同上</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Favor<span class="token punctuation">,</span>Person<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token operator">==</span>Favor<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span> isouter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 组合（了解）UNION 操作符用于合并两个或多个 SELECT 语句的结果集</span><span class="token comment">#union和union all的区别？</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Favor<span class="token punctuation">.</span>caption<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Favor<span class="token punctuation">.</span>nid <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> q1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Users<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Favor<span class="token punctuation">.</span>caption<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Favor<span class="token punctuation">.</span>nid <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> q1<span class="token punctuation">.</span>union_all<span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="9-执行原生sql"><a href="#9-执行原生sql" class="headerlink" title="9.执行原生sql"></a>9.执行原生sql</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">,</span> UniqueConstraint<span class="token punctuation">,</span> Index<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token punctuation">,</span> relationship<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> text<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>result <span class="token keyword">import</span> ResultProxy<span class="token keyword">from</span> db <span class="token keyword">import</span> Users<span class="token punctuation">,</span> Hostsengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/s6"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 查询</span><span class="token comment"># cursor = session.execute('select * from users')</span><span class="token comment"># result = cursor.fetchall()</span><span class="token comment"># 添加</span>cursor <span class="token operator">=</span> session<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'insert into users(name) values(:value)'</span><span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token string">'lqz'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>lastrowid<span class="token punctuation">)</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="10-一对多"><a href="#10-一对多" class="headerlink" title="10.一对多"></a>10.一对多</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">,</span> UniqueConstraint<span class="token punctuation">,</span> Index<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token punctuation">,</span> relationship<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> text<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>result <span class="token keyword">import</span> ResultProxy<span class="token keyword">from</span> db <span class="token keyword">import</span> Users<span class="token punctuation">,</span> Hosts<span class="token punctuation">,</span> Hobby<span class="token punctuation">,</span> Personengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 添加</span><span class="token triple-quoted-string string">"""session.add_all([    Hobby(caption='乒乓球'),    Hobby(caption='羽毛球'),    Person(name='张三', hobby_id=3),    Person(name='李四', hobby_id=4),])person = Person(name='张九', hobby=Hobby(caption='姑娘'))session.add(person)#添加二hb = Hobby(caption='人妖')hb.pers = [Person(name='文飞'), Person(name='博雅')]session.add(hb)session.commit()"""</span><span class="token comment"># 使用relationship正向查询</span><span class="token triple-quoted-string string">"""v = session.query(Person).first()print(v.name)print(v.hobby.caption)"""</span><span class="token comment"># 使用relationship反向查询</span><span class="token triple-quoted-string string">"""v = session.query(Hobby).first()print(v.caption)print(v.pers)"""</span><span class="token comment">#方式一，自己链表</span><span class="token comment"># person_list=session.query(models.Person.name,models.Hobby.caption).join(models.Hobby,isouter=True).all()</span>person_list<span class="token operator">=</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Person<span class="token punctuation">,</span>models<span class="token punctuation">.</span>Hobby<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Hobby<span class="token punctuation">,</span>isouter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> person_list<span class="token punctuation">:</span>    <span class="token comment"># print(row.name,row.caption)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>caption<span class="token punctuation">)</span><span class="token comment">#方式二：通过relationship</span>person_list<span class="token operator">=</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Person<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> person_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>name<span class="token punctuation">,</span>row<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span>caption<span class="token punctuation">)</span><span class="token comment">#查询喜欢姑娘的所有人</span>obj<span class="token operator">=</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Hobby<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Hobby<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>persons<span class="token operator">=</span>obj<span class="token punctuation">.</span>pers<span class="token keyword">print</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="11-多对多"><a href="#11-多对多" class="headerlink" title="11.多对多"></a>11.多对多</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">,</span> UniqueConstraint<span class="token punctuation">,</span> Index<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token punctuation">,</span> relationship<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> text<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>result <span class="token keyword">import</span> ResultProxy<span class="token keyword">from</span> db <span class="token keyword">import</span> Users<span class="token punctuation">,</span> Hosts<span class="token punctuation">,</span> Hobby<span class="token punctuation">,</span> Person<span class="token punctuation">,</span> Group<span class="token punctuation">,</span> Server<span class="token punctuation">,</span> Server2Groupengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 添加</span><span class="token triple-quoted-string string">"""session.add_all([    Server(hostname='c1.com'),    Server(hostname='c2.com'),    Group(name='A组'),    Group(name='B组'),])session.commit()s2g = Server2Group(server_id=1, group_id=1)session.add(s2g)session.commit()gp = Group(name='C组')gp.servers = [Server(hostname='c3.com'),Server(hostname='c4.com')]session.add(gp)session.commit()ser = Server(hostname='c6.com')ser.groups = [Group(name='F组'),Group(name='G组')]session.add(ser)session.commit()"""</span><span class="token comment"># 使用relationship正向查询</span><span class="token triple-quoted-string string">"""v = session.query(Group).first()print(v.name)print(v.servers)"""</span><span class="token comment"># 使用relationship反向查询</span><span class="token triple-quoted-string string">"""v = session.query(Server).first()print(v.hostname)print(v.groups)"""</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="12-其它"><a href="#12-其它" class="headerlink" title="12.其它"></a>12.其它</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">,</span> UniqueConstraint<span class="token punctuation">,</span> Index<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token punctuation">,</span> relationship<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> text<span class="token punctuation">,</span> func<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>result <span class="token keyword">import</span> ResultProxy<span class="token keyword">from</span> db <span class="token keyword">import</span> Users<span class="token punctuation">,</span> Hosts<span class="token punctuation">,</span> Hobby<span class="token punctuation">,</span> Person<span class="token punctuation">,</span> Group<span class="token punctuation">,</span> Server<span class="token punctuation">,</span> Server2Groupengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关联子查询:correlate(Group)表示跟Group表做关联，as_scalar相当于对该sql加括号，用于放在后面当子查询</span>subqry <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>func<span class="token punctuation">.</span>count<span class="token punctuation">(</span>Server<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>label<span class="token punctuation">(</span><span class="token string">"sid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Server<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> Group<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>correlate<span class="token punctuation">(</span>Group<span class="token punctuation">)</span><span class="token punctuation">.</span>as_scalar<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Group<span class="token punctuation">.</span>name<span class="token punctuation">,</span> subqry<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT `group`.name AS group_name, (SELECT count(server.id) AS sid FROM server WHERE server.id = `group`.id) AS anon_1 FROM `group`"""</span><span class="token triple-quoted-string string">'''select * from tb where id in [select id from xxx];select id,name,#必须保证此次查询只有一个值(select max(id) from xxx) as midfrom tb例如，第三个字段只能有一个值id name  mid1  lqz   1，2  不合理2  egon   2'''</span><span class="token triple-quoted-string string">'''成绩表：id sid    cid    score1  1      物理      99 2  1      化学      883  2      物理      95学生表：id   name  每个学生总分数1     xx      882     yy       77select id，name,(select avr(score) from 成绩表 where 成绩表.sid=学生表.id) as xfrom 学生表subqry = session.query(func.count(成绩表.scort).label("sc")).filter(学生表.id == 成绩表.sid).correlate(学生表).as_scalar()result = session.query(学生表.name, subqry)'''</span><span class="token comment"># 原生SQL</span><span class="token triple-quoted-string string">"""# 查询cursor = session.execute('select * from users')result = cursor.fetchall()# 添加cursor = session.execute('insert into users(name) values(:value)',params={"value":'wupeiqi'})session.commit()print(cursor.lastrowid)"""</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="13-Flask-SQLAlchemy"><a href="#13-Flask-SQLAlchemy" class="headerlink" title="13.Flask-SQLAlchemy"></a>13.Flask-SQLAlchemy</h2><p>flask和SQLAchemy的管理者，通过他把他们做连接</p><pre class="language-python" data-language="python"><code class="language-python">db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> 包含配置<span class="token operator">-</span> 包含ORM基类<span class="token operator">-</span> 包含create_all<span class="token operator">-</span> engine<span class="token operator">-</span> 创建连接</code></pre><p>离线脚本，创建表</p><p>详见代码</p><p>flask-migrate<br>python3 manage.py db init 初始化：只执行一次</p><p>python3 manage.py db migrate 等同于 makemigartions<br>python3 manage.py db upgrade 等同于migrate</p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FLask-SQLAlchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf面试题</title>
      <link href="/2021/09/23/drf%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2021/09/23/drf%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Django-drf面试题</p><span id="more"></span><h3 id="什么是restful规范"><a href="#什么是restful规范" class="headerlink" title="什么是restful规范"></a>什么是restful规范</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">RESTful是一种定义Web API接口的设计风格，尤其适用于前后端分离的应用模式中。 数据的安全保障：url链接一般都采用https协议进行传输(数据交互中安全性) 接口特性表现：一看就知道是个api接口，用api关键字标识接口url：https://api.baidu.com 多数据版本共存：在url链接中标识数据版本https://api.baidu.com/v1 数据即是资源，均使用名词（可复数），尽量不要出现动词 资源操作由请求方式决定（method）：提供请求方式来标识增删改查动作 过滤，通过在url上传参的形式传递搜索条件:例如url后面?=搜索，分页，游标</code></pre><h3 id="查找模板的顺序"><a href="#查找模板的顺序" class="headerlink" title="查找模板的顺序"></a>查找模板的顺序</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">优先查找根目录下：template根据app的注册顺序去每个app的template目录中查找</code></pre><h3 id="drf组件提供的功能"><a href="#drf组件提供的功能" class="headerlink" title="drf组件提供的功能"></a>drf组件提供的功能</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、免除csrf认证2、视图（1.APIView、2.ListAPIview、3.ListModelMixin）3、权限4、认证5、解析器6、筛选器7、分页8、序列化和数据校验：    可以对queryset进行序列化，也可以对用户提交的数据进行校验    source：无需加括号，在源码内部会去判断是否可以执行，可执行自动加括号    SerializerMethodField定义钩子方法9、渲染器：把json数据渲染到drf自己的页面上</code></pre><h3 id="drf继承过哪些视图类，之间的区别"><a href="#drf继承过哪些视图类，之间的区别" class="headerlink" title="drf继承过哪些视图类，之间的区别"></a>drf继承过哪些视图类，之间的区别</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、APIview    遵循了CBV模式，功能多但是需要自己写的代码也多    提供了免除csrf认证，版本处理、认证、权限、节流、解析器、筛选器、分页、序列化、渲染器2、ListAPIView,RetrieveAPIView,CreateAPIView,UpdateAPIView,DestroyAPIView    第二种则在第一种的基础上，封装了许多我们需要自己的写的代码，许多功能的实现只需要给专属的变量名赋值就可以实现该功能    3、GenericViewSet、ListModelMixin,RetrieveModelMixin,CreateModelMixin,UpdateModelMixin,DestroyModelMixin    第三种则重构了APIView中的as_view()方法，结合请求方法和不同Mixin类的方法名从而进行执行不同的功能。与前面两种最主要的区别是url路由中as_view()方法中需要传值。     目前使用的主要目的是把第二种的bug(查询全部数据的功能和查询单个数据的功能无法在一个类中实现)实现在一个类中</code></pre><h3 id="GenericAPIView视图类的作用"><a href="#GenericAPIView视图类的作用" class="headerlink" title="GenericAPIView视图类的作用"></a>GenericAPIView视图类的作用</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">作用：GenericAPIView主要为drf内部帮助我们提供增删查改的类，提供了执行流程和功能，我们在使用drf内置类做增删查改时，就可以通过自定义静态字段（类变量）或重写方法（get_queryset、get_serializer_class）来做一些更高级的定制</code></pre><h3 id="drf版本的实现过程"><a href="#drf版本的实现过程" class="headerlink" title="drf版本的实现过程"></a>drf版本的实现过程</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">drf自带的版本类"DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",允许出现的版本"ALLOWED_VERSIONS": ['v1', 'v2'],如果没有传版本，可以使用默认版本     default_version = api_settings.DEFAULT_VERSION设置url中获取版本的变量，默认是version     version_param = api_settings.VERSION_PARAM     过程：    当前端传来请求，执行了as_view()方法，如果设置了全局版本或者进入了设置了版本的功能函数，则会先执行APIview类中dispatch方法，之后再执行initial方法，然后进入self.determine_version方法，里面会先判断是否有versioning_class，如果没有就返回(None,None)，代表没有版本，有则执行versioning_class(URLPathVersioning)类中的determine_version方法，他会返回版本，里面会判断，如果获取到version为空则返回默认版本，并且还要判断是否存在允许出现的版本列表中，返回版本后再把版本号和版本分类分别赋值给request.version和request.versioning_scheme</code></pre><h3 id="drf组件认证的实现过程"><a href="#drf组件认证的实现过程" class="headerlink" title="drf组件认证的实现过程"></a>drf组件认证的实现过程</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">当用户进行登录的时候，运行了登录类的as_view()方法， 1、进入了APIView类的dispatch方法 2、执行了self.initialize_request这个方法，是重定义request，并且得到了自己定义的认证类对象 3、执行self.initial方法中的self.perform_authentication，里面运行了user方法 4、再执行了user方法里面的self._authenticate()方法 5、然后执行了自己定义的类中的authenticate方法，自己定义的类继承了BaseAuthentication类，里面有  authenticate方法，如果自己定义的类中没有authenticate方法会报错。 6、把从authenticate方法得到的user和auth赋值给user和auth方法 7、这两个方法把user和auth的值赋值给了request.user：是登录用户的对象,request.auth：是认证的信息字典</code></pre><h3 id="drf组件权限的实现过程？"><a href="#drf组件权限的实现过程？" class="headerlink" title="drf组件权限的实现过程？"></a>drf组件权限的实现过程？</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">当用户执行一个业务的时候，运行了as_view方法1、进入了APIView类的dispatch方法2、进入self.initial方法中的self.check_permissions(request)方法3、里面执行了for循环，把每个权限类实例化对象，4、执行自己定义的权限类里面的has_permission方法，里面会判断request.user是否存在5、不存在就返回False，存在就返回True6、之后执行self.permission_denied报错方法，返回的是False就报错，可以自定义报错信息，在has_permission方法中写message = {"status": False, "error": "登录成功之后才能评论"}，就实现了自定义报错7、如果返回的是True就让他进入功能</code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django-drf面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底理解cookie，session，token</title>
      <link href="/2021/09/23/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3cookie%EF%BC%8Csession%EF%BC%8Ctoken/"/>
      <url>/2021/09/23/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3cookie%EF%BC%8Csession%EF%BC%8Ctoken/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>三剑客：cookie，session，token</p><span id="more"></span><p><strong>彻底理解cookie，session，token</strong></p><h2 id="一-Cookie-Session-Token发展史"><a href="#一-Cookie-Session-Token发展史" class="headerlink" title="一 Cookie,Session,Token发展史"></a>一 Cookie,Session,Token发展史</h2><p><strong>无cookie时期</strong></p><p>很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的HTTP协议， 就是请求加响应， 尤其是我不用记住是谁刚刚发了HTTP请求， 每个请求对我来说都是全新的。这段时间很嗨皮</p><p><strong>cookie+session认证时期</strong></p><p>但是随着交互式Web应用的兴起，像在线购物网站，需要登录的网站等等，马上就面临一个问题，那就是要管理会话，必须记住哪些人登录系统， 哪些人往自己的购物车中放商品， 也就是说我必须把每个人区分开，这就是一个不小的挑战，因为HTTP请求是无状态的，所以想出的办法就是给大家发一个会话标识(session id), 说白了就是一个随机的字串，每个人收到的都不一样， 每次大家向我发起HTTP请求的时候，把这个字符串给一并捎过来， 这样我就能区分开谁是谁了</p><p><strong>cookie+session存在问题及解决</strong></p><p>这样大家很嗨皮了，可是服务器就不嗨皮了，每个人只需要保存自己的session id，而服务器要保存所有人的session id ！ 如果访问服务器多了， 就得由成千上万，甚至几十万个。</p><p>这对服务器说是一个巨大的开销 ， 严重的限制了服务器扩展能力， 比如说我用两个机器组成了一个集群， 小F通过机器A登录了系统， 那session id会保存在机器A上， 假设小F的下一次请求被转发到机器B怎么办？ 机器B可没有小F的 session id啊。</p><p>有时候会采用一点小伎俩： session sticky ， 就是让小F的请求一直粘连在机器A上， 但是这也不管用， 要是机器A挂掉了， 还得转到机器B去。</p><p>那只好做session 的复制了， 把session id 在两个机器之间搬来搬去， 快累死了。</p><p>　　　　　　<a href="https://images2018.cnblogs.com/blog/1350514/201805/1350514-20180504122814029-1201707523.png"><img src="https://s2.loli.net/2022/06/22/Xq5E9ZztO8pjDAa.png" alt="img"></a></p><p>后来有个叫Memcached的支了招： 把session id 集中存储到一个地方， 所有的机器都来访问这个地方的数据， 这样一来，就不用复制了， 但是增加了单点失败的可能性， 要是那个负责session 的机器挂了， 所有人都得重新登录一遍， 估计得被人骂死。</p><p>　　　　　　<a href="https://images2018.cnblogs.com/blog/1350514/201805/1350514-20180504123036062-1920411426.png"><img src="https://s2.loli.net/2022/06/22/ZFhUMo7gWYBSdXR.png" alt="img"></a></p><p>也尝试把这个单点的机器也搞出集群，增加可靠性， 但不管如何， 这小小的session 对我来说是一个沉重的负担</p><p><strong>Token认证</strong></p><p>于是有人就一直在思考， 我为什么要保存这可恶的session呢， 只让每个客户端去保存该多好？</p><p>可是如果不保存这些session id , 怎么验证客户端发给我的session id 的确是我生成的呢？ 如果不去验证，我们都不知道他们是不是合法登录的用户， 那些不怀好意的家伙们就可以伪造session id , 为所欲为了。</p><p>嗯，对了，关键点就是验证 ！</p><p>比如说， 小F已经登录了系统， 我给他发一个令牌(token)， 里边包含了小F的 user id， 下一次小F 再次通过Http 请求访问我的时候， 把这个token 通过Http header 带过来不就可以了。</p><p>不过这和session id没有本质区别啊， 任何人都可以可以伪造， 所以我得想点儿办法， 让别人伪造不了。</p><p>那就对数据做一个签名吧， 比如说我用HMAC-SHA256 算法，加上一个只有我才知道的密钥， 对数据做一个签名， 把这个签名和数据一起作为token ， 由于密钥别人不知道， 就无法伪造token了。</p><p><a href="https://images2018.cnblogs.com/blog/1350514/201805/1350514-20180504123206667-444188772.png"><img src="https://s2.loli.net/2022/06/22/5LUOeq8xWiFyMfA.png" alt="img"></a></p><p>这个token 我不保存， 当小F把这个token 给我发过来的时候，我再用同样的HMAC-SHA256 算法和同样的密钥，对数据再计算一次签名， 和token 中的签名做个比较， 如果相同， 我就知道小F已经登录过了，并且可以直接取到小F的user id , 如果不相同， 数据部分肯定被人篡改过， 我就告诉发送者： 对不起，没有认证。</p><p><a href="https://images2018.cnblogs.com/blog/1350514/201805/1350514-20180504123326596-1492094512.png"><img src="https://s2.loli.net/2022/06/22/vTgcp3aVwM4HbD8.png" alt="img"></a></p><p>Token 中的数据是明文保存的（虽然我会用Base64做下编码， 但那不是加密）， 还是可以被别人看到的， 所以我不能在其中保存像密码这样的敏感信息。</p><p>当然， 如果一个人的token 被别人偷走了， 那我也没办法， 我也会认为小偷就是合法用户， 这其实和一个人的session id 被别人偷走是一样的。</p><p>这样一来， 我就不保存session id 了， 我只是生成token , 然后验证token ， 我用我的CPU计算时间获取了我的session 存储空间 ！</p><p>解除了session id这个负担， 可以说是无事一身轻， 我的机器集群现在可以轻松地做水平扩展， 用户访问量增大， 直接加机器就行。 这种无状态的感觉实在是太好了！</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="二-Cookie-Session解释"><a href="#二-Cookie-Session解释" class="headerlink" title="二 Cookie,Session解释"></a>二 Cookie,Session解释</h2><h3 id="3-1-Cookie"><a href="#3-1-Cookie" class="headerlink" title="3.1 Cookie"></a>3.1 Cookie</h3><p>cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。</p><p>cookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。</p><h3 id="3-2-Session"><a href="#3-2-Session" class="headerlink" title="3.2 Session"></a>3.2 Session</h3><p>session 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。</p><p>session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。</p><p>服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。</p><h3 id="3-3-cookie和session的区别"><a href="#3-3-cookie和session的区别" class="headerlink" title="3.3 cookie和session的区别"></a>3.3 cookie和session的区别</h3><p><strong>session是存储服务器端，cookie是存储在客户端，所以session的安全性比cookie高</strong></p><p>获取session里的信息是通过存放在会话cookie里的session id获取的。而session是存放在服务器的内存中里，所以session里的数据不断增加会造成服务器的负担，所以会把很重要的信息存储在session中，而把一些次要东西存储在客户端的cookie里。</p><p><strong>session的信息是通过sessionid获取的，而sessionid是存放在会话cookie中</strong></p><p>当浏览器关闭的时候会话cookie消失，所以sessionid也就消失了，但是session的信息还存在服务器端，只是查不到所谓的session，但它并不是不存在</p><h2 id="三-Token介绍"><a href="#三-Token介绍" class="headerlink" title="三 Token介绍"></a>三 Token介绍</h2><p>在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。</p><p>以下几点特性会让你在程序中使用基于Token的身份验证</p><p>无状态、可扩展<br>支持移动设备<br>跨程序调用<br>安全<br>那些使用基于Token的身份验证的大佬们：大部分你见到过的API和Web应用都使用tokens。例如Facebook, Twitter, Google+, GitHub等。</p><p>在介绍基于Token的身份验证的原理与优势之前，不妨先看看之前的认证都是怎么做的。</p><h3 id="3-1-传统方式——基于服务器的验证"><a href="#3-1-传统方式——基于服务器的验证" class="headerlink" title="3.1 传统方式——基于服务器的验证"></a>3.1 传统方式——基于服务器的验证</h3><p>由于 HTTP 协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。在这之前，程序都是通过在服务端存储登录的用户信息来辨别身份的。这种方式一般都是通过存储 session 来完成，可放在内存或磁盘上。</p><p>随着Web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面</p><h3 id="3-2-基于服务器验证方式的问题"><a href="#3-2-基于服务器验证方式的问题" class="headerlink" title="3.2 基于服务器验证方式的问题"></a>3.2 基于服务器验证方式的问题</h3><h4 id="3-2-1-Seesions"><a href="#3-2-1-Seesions" class="headerlink" title="3.2.1 Seesions"></a>3.2.1 Seesions</h4><p>每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。</p><h4 id="3-2-2-可扩展性"><a href="#3-2-2-可扩展性" class="headerlink" title="3.2.2 可扩展性"></a>3.2.2 可扩展性</h4><p>由于sessions 存放在服务器内存中，伴随而来的是可扩展性问题。当我们想要增加服务器来解决负载问题时，session 里的关键性信息会限制我们的扩展。</p><h4 id="3-2-3-CORS-跨域资源共享"><a href="#3-2-3-CORS-跨域资源共享" class="headerlink" title="3.2.3 CORS (跨域资源共享)"></a>3.2.3 CORS (跨域资源共享)</h4><p>当我们扩展应用程序，让数据能够从不同设备上访问时，跨域资源的共享会是一个让人头疼的问题。在使用 Ajax 抓取另一个域的资源时（移动端访问我们的 API 服务器），可能会出现禁止请求的情况。</p><h4 id="3-2-4-CSRF-跨站请求伪造"><a href="#3-2-4-CSRF-跨站请求伪造" class="headerlink" title="3.2.4 CSRF (跨站请求伪造)"></a>3.2.4 CSRF (跨站请求伪造)</h4><p>用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。<br>在这些问题中，可扩展性是最突出的。因此我们有必要去寻求一种更有行之有效的方法。</p><h3 id="3-3-基于Token的验证原理"><a href="#3-3-基于Token的验证原理" class="headerlink" title="3.3 基于Token的验证原理"></a>3.3 基于Token的验证原理</h3><p>基于 Token 的身份验证是无状态的，我们不用将用户信息存在服务器或 Session 中。这种概念解决了在服务端存储信息时的许多问题。没有 session 信息意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录和已经登录到了哪里。</p><p>虽然基于Token的身份验证实现的方式很多，但大致过程如下:</p><blockquote><p>1 用户通过用户名和密码发送请求<br>2 程序验证<br>3 程序返回一个签名的 token 给客户端<br>4 客户端储存 token, 并且每次请求都会附带它<br>5 服务端验证 token 并返回数据</p></blockquote><p>每一次请求都需要Token。Token 应该在 HTTP的头部发送从而保证了 Http 请求无状态。我们也需要设置服务器属性</p><blockquote><p>Access-Control-Allow-Origin: *</p></blockquote><p>来让服务器能接受到来自所有域的请求。需要注意的是，在ACAO头部指定 * 时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。</p><p>实现思路：</p><blockquote><p>1.用户登录校验，校验成功后就返回Token给客户端。</p><p>2.客户端收到数据后保存在客户端</p><p>3.客户端每次访问API是携带Token到服务器端。</p><p>4.服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码</p></blockquote><p>当我们在程序中认证了信息并取得 token 之后，我们便能通过这个 token 做许多的事情。我们甚至能基于创建一个基于权限的token传给第三方应用程序，这些第三方程序能够获取到我们的数据（当然只限于该 token 被允许访问的数据）</p><p>原理图如下：</p><p><a href="https://images2018.cnblogs.com/blog/1350514/201805/1350514-20180504123850641-479661599.png"><img src="https://s2.loli.net/2022/06/22/uqKa7sSkrBEZWjo.png" alt="img"></a></p><h3 id="3-4-Token的优势"><a href="#3-4-Token的优势" class="headerlink" title="3.4 Token的优势"></a>3.4 Token的优势</h3><h4 id="3-4-1-无状态、可扩展"><a href="#3-4-1-无状态、可扩展" class="headerlink" title="3.4.1 无状态、可扩展"></a>3.4.1 无状态、可扩展</h4><p>在客户端存储的 token 是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载均衡服务器 能够将用户的请求传递到任何一台服务器上，因为服务器与用户信息没有关联。相反在传统方式中，我们必须将请求发送到一台存储了该用户 session 的服务器上（称为Session亲和性），因此当用户量大时，可能会造成 一些拥堵。使用 token 完美解决了此问题。</p><h4 id="3-4-2-安全性"><a href="#3-4-2-安全性" class="headerlink" title="3.4.2 安全性"></a>3.4.2 安全性</h4><p>请求中发送 token 而不是 cookie，这能够防止 CSRF(跨站请求伪造) 攻击。即使在客户端使用 cookie 存储 token，cookie 也仅仅是一个存储机制而不是用于认证。另外，由于没有 session，让我们少我们不必再进行基于 session 的操作。</p><p>Token 是有时效的，一段时间之后用户需要重新验证。我们也不一定需要等到token自动失效，token有撤回的操作，通过 token revocataion可以使一个特定的 token 或是一组有相同认证的 token 无效。</p><h4 id="3-4-3-可扩展性"><a href="#3-4-3-可扩展性" class="headerlink" title="3.4.3 可扩展性"></a>3.4.3 可扩展性</h4><p>使用 Tokens 能够与其它应用共享权限。例如，能将一个博客帐号和自己的QQ号关联起来。当通过一个 第三方平台登录QQ时，我们可以将一个博客发到QQ平台中。</p><p>使用 token，可以给第三方应用程序提供自定义的权限限制。当用户想让一个第三方应用程序访问它们的数据时，我们可以通过建立自己的API，给出具有特殊权限的tokens。</p><h4 id="3-4-4-多平台与跨域"><a href="#3-4-4-多平台与跨域" class="headerlink" title="3.4.4 多平台与跨域"></a>3.4.4 多平台与跨域</h4><p>我们已经讨论了CORS (跨域资源共享)。当我们的应用和服务不断扩大的时候，我们可能需要通过多种不同平台或其他应用来接入我们的服务。</p><p>可以让我们的API只提供数据，我们也可以从CDN提供服务（Having our API just serve data, we can also make the design choice to serve assets from a CDN.）。 在为我们的应用程序做了如下简单的配置之后，就可以消除 CORS 带来的问题。只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。</p><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> *       </code></pre><h4 id="3-4-5-基于标准"><a href="#3-4-5-基于标准" class="headerlink" title="3.4.5 基于标准"></a>3.4.5 基于标准</h4><p>有几种不同方式来创建 token。最常用的标准就是 JSON Web Tokens。很多语言都支持它</p>]]></content>
      
      
      <categories>
          
          <category> cookie，session，token </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2021/03/07/Python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2021/03/07/Python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>强大的Python装饰器</p><span id="more"></span><h2 id="Python装饰器"><a href="#Python装饰器" class="headerlink" title="Python装饰器"></a>Python装饰器</h2><p>我从以下几点，由浅入深详细讲解一下Python装饰器：</p><ul><li>什么是装饰器？</li><li>为什么用装饰器？</li><li>在哪里用装饰器？</li><li>怎么实现装饰器？</li></ul><p>然后以示例+讲解相结合的方式阐述，同时会讲解一些在很多教程和书籍中不会涉及到的内容。</p><h3 id="什么是Python装饰器？"><a href="#什么是Python装饰器？" class="headerlink" title="什么是Python装饰器？"></a><strong>什么是Python装饰器？</strong></h3><p>顾名思义，从字面意思就可以理解，它是用来”装饰”Python的工具，使得代码更具有Python简洁的风格。换句话说，它是一种函数的函数，因为装饰器传入的参数就是一个函数，然后通过实现各种功能来对这个函数的功能进行增强。</p><h3 id="为什么用装饰器？"><a href="#为什么用装饰器？" class="headerlink" title="为什么用装饰器？"></a><strong>为什么用装饰器？</strong></h3><p>前面提到了，装饰器是通过某种方式来增强函数的功能。当然，我们可以通过很多方式来增强函数的功能，只是装饰器有一个无法替代的优势–简洁。</p><p>你只需要在每个函数上方加一个@就可以对这个函数进行增强。</p><h3 id="在哪里用装饰器？"><a href="#在哪里用装饰器？" class="headerlink" title="在哪里用装饰器？"></a><strong>在哪里用装饰器？</strong></h3><p>装饰器最大的优势是用于解决重复性的操作，其主要使用的场景有如下几个：</p><ul><li>计算函数运行时间</li><li>给函数打日志</li><li>类型检查</li></ul><p>当然，如果遇到其他重复操作的场景也可以类比使用装饰器。</p><h3 id="怎么实现装饰器？"><a href="#怎么实现装饰器？" class="headerlink" title="怎么实现装饰器？"></a>怎么实现装饰器？</h3><p>前面都是文字描述，不管说的怎么天花烂坠，可能都无法体会到它的价值，下面就以一个简单的例子来看一下它的作用。</p><p>如果你要对多个函数进行统计运行时间，不使用装饰器会是这样的，</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> time<span class="token punctuation">,</span> sleep<span class="token keyword">def</span> <span class="token function">fun_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>    cost_time <span class="token operator">=</span> end <span class="token operator">-</span> start    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"func one run time {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cost_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fun_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>    cost_time <span class="token operator">=</span> end <span class="token operator">-</span> start    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"func two run time {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cost_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fun_three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>    cost_time <span class="token operator">=</span> end <span class="token operator">-</span> start    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"func three run time {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cost_time<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>在每个函数里都需要获取开始时间<strong>start</strong>、结束时间<strong>end</strong>、计算耗费时间<strong>cost_time</strong>、加上一个输出语句。</p><p>使用装饰器的方法是这样的，</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">run_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        start <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 函数在这里运行</span>        end <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>        cost_time <span class="token operator">=</span> end <span class="token operator">-</span> start        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"func three run time {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cost_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@run_time</span><span class="token keyword">def</span> <span class="token function">fun_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@run_time</span><span class="token keyword">def</span> <span class="token function">fun_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@run_time</span><span class="token keyword">def</span> <span class="token function">fun_three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>通过编写一个统计时间的装饰器<strong>run_time</strong>，函数的作为装饰器的参数，然后返回一个统计时间的函数wrapper，这就是装饰器的写法，用专业属于来说这叫<strong>闭包</strong>，简单来说就是函数内嵌套函数。然后再每个函数上面加上**@run_time**来调用这个装饰器对不同的函数进行统计时间。</p><p>可见，统计时间这4行代码是重复的，一个函数需要4行，如果100个函数就需要400行，而使用装饰器，只需要几行代码实现一个装饰器，然后每个函数前面加一句命令即可，如果是100个函数，能少300行左右的代码量。</p><h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a><strong>带参数的装饰器</strong></h3><p>通过前面简单的例子应该已经明白装饰器的价值和它的简单用法：<strong>通过闭包来实现装饰器，函数作为外层函数的传入参数，然后在内层函数中运行、附加功能，随后把内层函数作为结果返回。</strong></p><p>除了上述简单的用法还有一些更高级的用法，比如用装饰器进行<strong>类型检查</strong>、添加<strong>带参数</strong>的的装饰器等。它们的用法大同小异，关于高级用法，这里以<strong>带参数的装饰器</strong>为例进行介绍。</p><p>不要把问题想的太复杂，带参数的装饰器其实就是在上述基本的装饰器的基础上在外面套一层接收参数的函数，下面通过一个例子说明一下。</p><p>以上述例子为基础，前面的<strong>简单示例</strong>输出的信息是，</p><pre class="language-text" data-language="text"><code class="language-text">func three run time 1.0003271102905273func three run time 1.0006263256072998func three run time 1.000312328338623</code></pre><p>现在我认为这样的信息太<strong>单薄</strong>，需要它携带更多的信息，例如函数名称、日志等级等，这时候可以把函数名称和日志等级作为装饰器的参数，下面来时实现以下。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">logger</span><span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            start <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>            func<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 函数在这里运行</span>            end <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>            cost_time <span class="token operator">=</span> end <span class="token operator">-</span> start            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[{}] func three run time {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> cost_time<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> wrapper    <span class="token keyword">return</span> run_time<span class="token decorator annotation punctuation">@logger</span><span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">"One"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@logger</span><span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">"Two"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@logger</span><span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">"Three"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun_three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    fun_one<span class="token punctuation">(</span><span class="token punctuation">)</span>fun_two<span class="token punctuation">(</span><span class="token punctuation">)</span>fun_three<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>可以看出，我在<strong>示例</strong>基本用法里编写的装饰器外层又嵌套了一层函数用来接收参数<strong>msg</strong>，这样的话在每个函数(func_one、func_two、func_three)前面调用时可以给装饰器传入参数，这样的输出结果是，</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>One<span class="token punctuation">]</span> func three run time <span class="token number">1.0013229846954346</span><span class="token punctuation">[</span>Two<span class="token punctuation">]</span> func three run time <span class="token number">1.000720500946045</span><span class="token punctuation">[</span>Three<span class="token punctuation">]</span> func three run time <span class="token number">1.0001459121704102</span></code></pre><h3 id="自定义属性的装饰器"><a href="#自定义属性的装饰器" class="headerlink" title="自定义属性的装饰器"></a><strong>自定义属性的装饰器</strong></h3><p>上述介绍的几种用法中其实有一个问题，就是装饰器<strong>不够灵活</strong>，我们预先定义了装饰器<strong>run_time</strong>，它就会按照我们定义的流程去工作，只具备这固定的一种功能，当然，我们前面介绍的通过<strong>带参数的装饰器</strong>让它具备了一定的灵活性，但是依然不够灵活。其实，我们还可以对装饰器添加一些属性，就如同给一个类定义实现不同功能的方法那样。</p><p>以输出<strong>日志</strong>为例，初学Python的同学都习惯用<strong>print</strong>打印输出信息，其实这不是一个好习惯，当开发商业工程时，你很用意把一些信息暴露给用户。在开发过程中，我更加鼓励使用日志进行输出，通过定义<strong>WARNING</strong>、<strong>DEBUG</strong>、<strong>INFO</strong>等不同等级来控制信息的输出，比如<strong>INFO</strong>是可以给用户看到的，让用户直到当前程序跑到哪一个阶段了。<strong>DEBUG</strong>是用于开发人员调试和定位问题时使用。<strong>WARING</strong>是用于告警和提示。</p><p>那么问题来了，如果我们预先定义一个打印日志的装饰器，</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">logger_info</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    logmsg <span class="token operator">=</span> func<span class="token punctuation">.</span>__name__    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>         log<span class="token punctuation">.</span>log<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"{} if over."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>logmsg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper</code></pre><p><strong><a href="https://link.zhihu.com/?target=http://logging.INFO">http://logging.INFO</a><strong>是打印日志的等级，如果我们仅仅写一个基本的日志装饰器</strong>logger_info</strong>，那么它的灵活度太差了，因为如果我们要输出<strong>DEBUG</strong>、<strong>WARING</strong>等级的日志，还需要重新写一个装饰器。</p><p>解决这个问题，有两个解决方法：</p><ul><li>利用前面所讲的带参数装饰器，把<strong>日志等级</strong>传入装饰器</li><li>利用自定义属性来修改<strong>日志等级</strong></li></ul><p>由于第一种已经以统计函数运行时间的方式进行讲解，这里主要讲解第二种方法。</p><p>先看一下代码，</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">def</span> <span class="token function">wrapper_property</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> func<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> func <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> partial<span class="token punctuation">(</span>attach_wrapper<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>    <span class="token builtin">setattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> func<span class="token punctuation">)</span>    <span class="token keyword">return</span> func<span class="token keyword">def</span> <span class="token function">logger_info</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decorate</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>                logmsg <span class="token operator">=</span> message <span class="token keyword">if</span> message <span class="token keyword">else</span> func<span class="token punctuation">.</span>__name__        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>log<span class="token punctuation">(</span>level<span class="token punctuation">,</span> logmsg<span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token decorator annotation punctuation">@wrapper_property</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">set_level</span><span class="token punctuation">(</span>newlevel<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">nonlocal</span> level            level <span class="token operator">=</span> newlevel        <span class="token decorator annotation punctuation">@wrapper_property</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">set_message</span><span class="token punctuation">(</span>newmsg<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">nonlocal</span> logmsg            logmsg <span class="token operator">=</span> newmsg        <span class="token keyword">return</span> wrapper    <span class="token keyword">return</span> decorate<span class="token decorator annotation punctuation">@logger_info</span><span class="token punctuation">(</span>logging<span class="token punctuation">.</span>WARNING<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y</code></pre><p>这里面最重要的是<strong>wrapper_property</strong>这个函数，它的功能是把一个函数<strong>func</strong>编程一个对象<strong>obj</strong>的属性，然后通过调用<strong>wrapper_property</strong>，给装饰器添加了两个属性<strong>set_message</strong>和<strong>set_level</strong>，分别用于改变输出日志的内容和改变输出日志的等级。</p><p>看一下输出结果，</p><pre class="language-python" data-language="python"><code class="language-python">main<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 输出</span><span class="token comment"># WARNING:Test:main</span><span class="token comment"># 6</span></code></pre><p>来改变一下输出日志等级，</p><pre class="language-python" data-language="python"><code class="language-python">main<span class="token punctuation">.</span>set_level<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 输出</span><span class="token comment"># ERROR:Test:main</span><span class="token comment"># 10</span></code></pre><p>输出日志等级改成了<strong>ERROR</strong>。</p><h3 id="保留元信息的装饰器"><a href="#保留元信息的装饰器" class="headerlink" title="保留元信息的装饰器"></a><strong>保留元信息的装饰器</strong></h3><p>很多教程中都会介绍装饰器，但是大多数都是千篇一律的围绕基本用法在展开，少部分会讲一下带参数的装饰器，但是有一个细节很少有教程提及，那就是<strong>保留元信息的装饰器</strong>。</p><p><strong>什么是函数的元信息？</strong></p><p>就是函数携带的一些基本信息，例如函数名、函数文档等，我们可以通过<strong>func.<strong>name</strong><strong>获取函数名、可以通过</strong>func.<strong>doc</strong><strong>获取函数的文档信息，用户也可以通过</strong>注解</strong>等方式为函数添加元信息。</p><p>例如下面代码，</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">run_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 函数在这里运行</span>        end <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>        cost_time <span class="token operator">=</span> end <span class="token operator">-</span> start        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"func three run time {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cost_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@run_time</span><span class="token keyword">def</span> <span class="token function">fun_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    func one doc.    '''</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    fun_one<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun_one<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun_one<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span><span class="token comment"># 输出</span><span class="token comment"># wrapper</span><span class="token comment"># None</span></code></pre><p>可以看出，通过使用装饰器，函数<strong>fun_one</strong>的元信息都丢失了，那怎么样才能保留装饰器的元信息呢？</p><p>可以通过使用Python自带模块<strong>functools</strong>中的<strong>wraps</strong>来保留函数的元信息，</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> time<span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">run_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>                                <span class="token comment"># &lt;- 这里加 wraps(func) 即可</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 函数在这里运行</span>        end <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>        cost_time <span class="token operator">=</span> end <span class="token operator">-</span> start        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"func three run time {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cost_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@run_time</span><span class="token keyword">def</span> <span class="token function">fun_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    func one doc.    '''</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    fun_one<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun_one<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun_one<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span><span class="token comment"># 输出</span><span class="token comment"># fun_one   </span><span class="token comment"># func one doc.</span></code></pre><p>只需要在代码中加入<strong>箭头</strong>所指的一行即可保留函数的元信息。</p>]]></content>
      
      
      <categories>
          
          <category> Python装饰器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask面试题</title>
      <link href="/2020/11/24/flask%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/11/24/flask%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>flask面试题 冲冲冲</p><span id="more"></span><h3 id="如何改变Flask的默认地址和端口"><a href="#如何改变Flask的默认地址和端口" class="headerlink" title="如何改变Flask的默认地址和端口"></a>如何改变Flask的默认地址和端口</h3><p>在应用程序上调用run方法时，可以通过将修改的值传递给主机和端口参数来更改Flask的默认主机和端口。</p><h3 id="使用Flask框架有什么好处"><a href="#使用Flask框架有什么好处" class="headerlink" title="使用Flask框架有什么好处"></a>使用Flask框架有什么好处</h3><p>1、 它具有内置的开发服务器。<br>2、 它具有大量的第三方扩展。<br>3、 它具有一个很小的API，并且可以由Web开发人员快速学习。<br>4、 它符合WSGI。<br>5、 它支持Unicode。</p><h3 id="SQLite数据库是否内置Flask"><a href="#SQLite数据库是否内置Flask" class="headerlink" title="SQLite数据库是否内置Flask"></a>SQLite数据库是否内置Flask</h3><p>1、SQLite是Python内置的。<br>2、要在Flask中使用数据库，我们不需要安装任何其他的Flask-Extension。<br>3、在视图内部，我们可以导入SQLite并编写SQL查询以与数据库进行交互。<br>4、Flask开发人员通常使用Flask-SQLAlchemy，它消除了编写复杂SQL查询的需要，并且支持与SQLite数据库进行交互的ORM。</p><h3 id="Flask框架中的模板引擎是什么意思"><a href="#Flask框架中的模板引擎是什么意思" class="headerlink" title="Flask框架中的模板引擎是什么意思"></a>Flask框架中的模板引擎是什么意思</h3><p>1、模板是一个包含两种类型的数据的文件，即静态和动态，在运行期间填充模板中的动态数据。<br>2、Flask利用Jinja2模板引擎，使开发人员可以使用带有占位符的HTML模板来创建动态数据。<br>3、通过使用Flask的render_template方法以及所需的参数和值，可以在运行时填充这些占位符。</p><h3 id="Django和Flask有什么区别？为什么要选择Flask"><a href="#Django和Flask有什么区别？为什么要选择Flask" class="headerlink" title="Django和Flask有什么区别？为什么要选择Flask"></a>Django和Flask有什么区别？为什么要选择Flask</h3><p>1、Django是一个使用Python编程语言创建的Web开发框架。<br>2、它是功能齐全的Web应用程序框架，具有许多内置功能，例如Admin后端和具有迁移功能的ORM。<br>3、它创建时间早，更成熟。<br>4、Flask适用于快速开发用例。<br>5、Flask更适合开发不需要大型代码库的轻量级Web应用程序。它易于开发微服务或无服务器应用程序。<br>5、与Django相比，Flask简单易学且API更少。<br>6、随着行业追随将微服务作为容器的一部分的趋势，将Flask保留在您的Web开发工具包中很实用</p><h3 id="Flask中的g对象是什么？它与会话对象有何不同"><a href="#Flask中的g对象是什么？它与会话对象有何不同" class="headerlink" title="Flask中的g对象是什么？它与会话对象有何不同"></a>Flask中的g对象是什么？它与会话对象有何不同</h3><p>1、Flask的g对象用作全局命名空间，用于在应用程序上下文中保存任何数据。<br>2、g对象不适用于在请求之间存储数据。从某种意义上说，字母g代表global。<br>3、在某些情况下，当您需要在应用程序上下文中保留全局变量，而不是创建全局变量时，最好使用g对象，因为Flask中的每个请求都有一个单独的g对象。<br>4、Flask的g对象使我们免于意外修改自定义全局变量。</p><h3 id="您可以通过哪些方式连接Flask中的数据库"><a href="#您可以通过哪些方式连接Flask中的数据库" class="headerlink" title="您可以通过哪些方式连接Flask中的数据库"></a>您可以通过哪些方式连接Flask中的数据库</h3><p>1、Flask可用于大多数RDB模式，例如PostgreSQL，SQLite和MySQL。<br>2、要连接数据库，我们必须使用Flask-SQLAlchemy扩展。它使开发过程中的数据库交互和管理变得容易，而无需编写原始SQL查询。<br>3、原始SQL查询容易受到SQL注入攻击。对于使用NoSQL数据存储（例如MongoDB），我们可以使用Flask-MongoEngine扩展</p><h3 id="Flask蓝图的作用"><a href="#Flask蓝图的作用" class="headerlink" title="Flask蓝图的作用"></a>Flask蓝图的作用</h3><p>蓝图Blueprint实现模块化的应用<br>book_bp = Blueprint(‘book’, name）创建蓝图对象  </p><p>蓝图中使用路由@book_bp.route(‘url’)<br>在另一.py文件里导入和注册蓝图   </p><p>from book import book_bp<br>app.register_blueprint(book_bp)</p><p>作用:<br>  1、将不同的功能模块化<br>  2、构建大型应用<br>  3、优化项目结构<br>  4、增强可读性,易于维护（跟Django的view功能相似）</p><h3 id="Flask框架默认session处理机制"><a href="#Flask框架默认session处理机制" class="headerlink" title="Flask框架默认session处理机制"></a>Flask框架默认session处理机制</h3><p>1、Flask的默认session利用了Werkzeug的SecureCookie，把信息做序列化(pickle)后编码(base64)，放到cookie里了。<br>2、过期时间是通过cookie的过期时间实现的。<br>3、为了防止cookie内容被篡改，session会自动打上一个叫session的hash串，这个串是经过session内容、SECRET_KEY计算出来的，看得出，这种设计虽然不能保证session里的内容不泄露，但至少防止了不被篡改</p><h3 id="列举HTTP请求中的状态码"><a href="#列举HTTP请求中的状态码" class="headerlink" title="列举HTTP请求中的状态码"></a>列举HTTP请求中的状态码</h3><p>404 请求的url地址不存在<br>503 访问限制有权限<br>200 访问成功<br>302 重定向</p><p>1xx —— 元数据<br>2xx —— 正确的响应<br>3xx —— 重定向<br>4xx —— 客户端错误<br>5xx —— 服务端错误<br>100 Continue。客户端应当继续发送请求。<br>200 OK。请求已成功,请求所希望的响应头或数据体将随此响应返回。<br>201 Created。请求成功,并且服务器创建了新的资源。<br>301 Moved Permanently。请求的网页已永久移动到新位置。 服务器返回此响应(对GET或HEAD请求的响应)时,会自动将请求者转到新位置。</p><p>302 Found。服务器目前从不同位置的网页响应请求,但请求者应继续使用原有位置来进行以后的请求。<br>400 Bad Request。服务器不理解请求的语法。<br>401 Unauthorized。请求要求身份验证。对于需要登录的网页,服务器可能返回此响应。<br>403 Forbidden。服务器拒绝请求。<br>404 Not Found。服务器找不到请求的网页。<br>500 Internal Server Error。服务器遇到错误,无法完成请求。</p><h3 id="Flask-WTF是什么？有什么特点？"><a href="#Flask-WTF是什么？有什么特点？" class="headerlink" title="Flask-WTF是什么？有什么特点？"></a>Flask-WTF是什么？有什么特点？</h3><p>1、Flask-wtf是一个用于表单处理,校验并提供csrf验证的功能的扩展库<br>2、Flask-wtf能把正表单免受CSRF&lt;跨站请求伪造&gt;的攻击<br>3、Flask-WTF 提供 FileField 来处理文件上传，它在表单提交后，自动从 flask.request.files 中抽取数据。FileField 的 data 属性是一个 </p><h3 id="SQLAlchemy如何执行原生SQL"><a href="#SQLAlchemy如何执行原生SQL" class="headerlink" title="SQLAlchemy如何执行原生SQL"></a>SQLAlchemy如何执行原生SQL</h3><p>两种SQLAlchemy可以执行原生sql的方式<br>第一种是通过session(会话)对象执行execute方法</p><p>session = scoped_session(SessionFactory)<br>session.execute(‘insert users(name) values(:value)’, params={‘value’: ‘thanlon’})</p><p>第二种是通过cursor(游标)对象执行execute方法。</p><p>conn = engine.raw_connection()<br>cursor = conn.cursor()<br>cursor.execute(‘select * from users’)</p><h3 id="DBUtils模块的作用"><a href="#DBUtils模块的作用" class="headerlink" title="DBUtils模块的作用"></a>DBUtils模块的作用</h3><p>作用:<br>    DBUtils模块的作用是实现数据库连接池，是为了解决“多线程情况下请求比较多时性能降低”的问题</p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乐观锁与悲观锁的实现</title>
      <link href="/2020/10/13/%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/10/13/%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>乐观锁与悲观锁</p><span id="more"></span><h3 id="Django实现悲观锁"><a href="#Django实现悲观锁" class="headerlink" title="Django实现悲观锁"></a>Django实现悲观锁</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">在Django中使用悲观锁锁定一个对象，需要使用到select_for_update()方法，悲观锁本质上是一个行级锁，能够锁定所有匹配的行，直至事务结束例如在一个类中写一个post方法，在方法里面写表名.object.select_for_update().get(id=x)再return Response函数视图，锁定所有符合条件的文章对象列表。 from django.db import transaction with transaction.atomic():     entries = Entry.objects.select_for_update().filter(author=request.user)     for entry in entries:         ...一般情况下如果其他事务锁定了相关行，那么本次查询将被阻塞，直到锁被释放。如果不想要使查询阻塞的话，使用select_for_update(nowait=True)。当你同时使用select_for_update与select_related方法时，select_related指定的相关对象也会被锁定。你可以通过select_for_update(of=(...))方法指定需要锁定的关联对象注意：select_for_update方法必须与事务(transaction)同时使用。MySQL版本要在8.0.1+ 以上才支持 nowait和 of选项</code></pre><h3 id="Django实现乐观锁"><a href="#Django实现乐观锁" class="headerlink" title="Django实现乐观锁"></a>Django实现乐观锁</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">乐观锁实现一般使用记录版本号，为数据表增加一个版本标识(version)字段，每次对数据的更新操作成功后都对版本号执行+1操作。每次执行更新操作时都去判断当前版本号是不是该条数据的最新版本号，如果不是说明数据已经同时被修改过了，则丢弃更新，需要重新获取目标对象再进行更新。Django项目中实现乐观锁可以借助于django-concurrency这个第三方库, 它可以给模型增加一个version字段，每次执行save操作时会自动给版本号+1。 from django.db import models from concurrency.fields import IntegerVersionField class ConcurrentModel( models.Model ):     version = IntegerVersionField( )     name = models.CharField(max_length=100)下例中a和b同时获取了pk=1的模型对象信息，并尝试对其name字段进行修改。由于a.save()方法调用成功以后对象的版本号version已经加1，b再调用b.save()方法时将会报RecordModifiedError的错误，这样避免了a，b同时修改同一对象信息造成数据冲突。 a = ConcurrentModel.objects.get(pk=1) a.name = '1' b = ConcurrentModel.objects.get(pk=1) b.name = '2' a.save() b.save()</code></pre><h3 id="什么时候该用悲观锁，什么时候该用乐观锁"><a href="#什么时候该用悲观锁，什么时候该用乐观锁" class="headerlink" title="什么时候该用悲观锁，什么时候该用乐观锁"></a>什么时候该用悲观锁，什么时候该用乐观锁</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">并发量：如果并发量不大且不允许脏读，可以使用悲观锁解决并发问题；但如果系统的并发非常大的话,悲观锁定会带来非常大的性能问题, 建议乐观锁。响应速度：如果需要非常高的响应速度，建议采用乐观锁方案，成功就执行，不成功就失败，不需要等待其他并发去释放锁。乐观锁并未真正加锁，效率高。冲突频率：如果冲突频率非常高，建议采用悲观锁，保证成功率。冲突频率大，选择乐观锁会需要多次重试才能成功，代价比较大。重试代价：如果重试代价大，建议采用悲观锁。悲观锁依赖数据库锁，效率低。更新失败的概率比较低。</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>paramiko模块</title>
      <link href="/2020/10/03/paramiko%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/10/03/paramiko%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>用于远程连接到服务器，查看日志等</p><span id="more"></span><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>paramiko是一个基于SSH用于连接远程服务器并执行相关操作（SSHClient和SFTPClinet,即一个是远程连接，一个是上传下载服务），使用该模块可以对远程服务器进行命令或文件操作，值得一说的是，fabric和ansible内部的远程管理就是使用的paramiko来现实<br>ssh是一个协议，OpenSSH是其中一个开源实现，paramiko是Python的一个库，实现了SSHv2协议(底层使用cryptography)。</p><p>有了Paramiko以后，我们就可以在Python代码中直接使用SSH协议对远程服务器执行操作，而不是通过ssh命令对远程服务器进行操作。</p><p>由于paramiko属于第三方库，所以需要使用如下命令先行安装<br>pip3 install paramiko</p><h3 id="Paramiko介绍"><a href="#Paramiko介绍" class="headerlink" title="Paramiko介绍"></a>Paramiko介绍</h3><p>paramiko包含两个核心组件: SSHClient和SFTPClient。</p><p><strong>SSHClient</strong>的作用类似于Linux的ssh命令，是对SSH会话的封装，该类封装了传输(Transport)，通道(Channel)及SFTPClient建立的方法(open_sftp)，通常用于执行远程命令。<br><strong>SFTPClient</strong>的作用类似与Linux的sftp命令，是对SFTP客户端的封装，用以实现远程文件操作，如文件上传、下载、修改文件权限等操作</p><p>Paramiko中的几个基础名词：<br>1、Channel: 是一种类Socket，一种安全的SSH传输通道；<br>2、Transport: 是一种加密的会话，使用时会同步创建了一个加密的Tunnels(通道)，这个Tunnels叫做Channel；<br>3、Session: 是client与Server保持连接的对象，用connect()/start_client()/start_server()开始会话。</p><h3 id="Paramiko的基本使用"><a href="#Paramiko的基本使用" class="headerlink" title="Paramiko的基本使用"></a>Paramiko的基本使用</h3><p><strong>SSHClient常用的方法介绍</strong></p><p><strong>connect()</strong>: 实现远程服务器的连接与认证，对于该方法只有hostname是必传参数。<br>常用参数<br>hostname 连接的目标主机<br>port=SSH_PORT 指定端口<br>username=None 验证的用户名<br>password=None 验证的用户密码<br>pkey=None 私钥方式用于身份验证<br>key_filename=None 一个文件名或文件列表，指定私钥文件<br>timeout=None 可选的tcp连接超时时间<br>allow_agent=True, 是否允许连接到ssh代理，默认为True 允许<br>look_for_keys=True 是否在~/.ssh中搜索私钥文件，默认为True 允许<br>compress=False, 是否打开压缩</p><p><strong>set_missing_host_key_policy()</strong>: 设置远程服务器没有在know_hosts文件中记录时的应对策略。目前支持三种策略<br>设置连接的远程主机没有本地主机密钥或HostKeys对象时的策略，目前支持三种：<br><strong>AutoAddPolicy</strong> 自动添加主机名及主机密钥到本地HostKeys对象，不依赖load_system_host_key的配置。即新建立ssh连接时不需要再输入yes或no进行确认<br><strong>WarningPolicy</strong> 用于记录一个未知的主机密钥的python警告。并接受，功能上和AutoAddPolicy类似，但是会提示是新连接<br><strong>RejectPolicy</strong> 自动拒绝未知的主机名和密钥，依赖load_system_host_key的配置。此为默认选项</p><p><strong>exec_command()</strong>: 在远程服务器执行Linux命令的方法。</p><p><strong>open_sftp()</strong>: 在当前ssh会话的基础上创建一个sftp会话。该方法会返回一个SFTPClient对象<br>利用SSHClient对象的open_sftp()方法，可以直接返回一个基于当前连接的sftp对象，可以进行文件的上传等操作.<br>sftp = client.open_sftp()<br>sftp.put(‘local.txt’,’remote.txt’)</p><p><strong>SSHClient常用的方法举例</strong><br>import paramiko<br>实例化SSHClient<br>ssh_client = paramiko.SSHClient()<br>自动添加策略，保存服务器的主机名和密钥信息，如果不添加，那么不再本地know_hosts文件中记录的主机将无法连接 ，此方法必须放在connect方法的前面<br>ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>连接SSH服务端，以用户名和密码进行认证 ，调用connect方法连接服务器<br>ssh_client.connect(hostname=’192.168.137.105’, port=22, username=’root’, password=’123456’)<br>打开一个Channel并执行命令  结果放到stdout中，如果有错误将放到stderr中<br>stdin, stdout, stderr = ssh_client.exec_command(‘df -hT ‘)<br>stdout 为正确输出，stderr为错误输出，同时是有1个变量有值   # 打印执行结果  print(stdout.read().decode(‘utf-8’))<br>关闭SSHClient连接<br>ssh_client.close()</p><p><strong>密钥连接方式</strong></p><p>配置私人密钥文件位置<br>private = paramiko.RSAKey.from_private_key_file(‘/root/.ssh/id_rsa’)<br>实例化SSHClient<br>ssh_client = paramiko.SSHClient()<br>自动添加策略，保存服务器的主机名和密钥信息，如果不添加，那么不再本地know_hosts文件中记录的主机将无法连接<br>ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>连接SSH服务端，以用户名和密码进行认证<br>ssh_client.connect(<br>hostname=’192.168.137.100’,<br>port=22,<br>username=’root’,<br>pkey=private<br>)</p><p><strong>SFTPClient常用方法介绍</strong></p><p>SFTPCLient作为一个sftp的客户端对象，根据ssh传输协议的sftp会话，实现远程文件操作，如上传、下载、权限、状态<br>from_transport(cls,t) 创建一个已连通的SFTP客户端通道<br>put(localpath, remotepath, callback=None, confirm=True) 将本地文件上传到服务器<br>参数confirm：是否调用stat()方法检查文件状态，返回ls -l的结果<br>get(remotepath, localpath, callback=None) 从服务器下载文件到本地<br>mkdir() 在服务器上创建目录<br>remove() 在服务器上删除目录<br>rename() 在服务器上重命名目录<br>stat() 查看服务器文件状态<br>listdir() 列出服务器目录下的文件</p><p><strong>SFTPClient常用方法举例</strong></p><p>import paramiko<br>实例化一个transport对象<br>tran = paramiko.Transport((‘192.168.137.100’, 22))<br>连接SSH服务端，使用password<br>tran.connect(username=”root”, password=’123456’)<br>或使用配置私人密钥文件位置<br>private = paramiko.RSAKey.from_private_key_file(‘/root/.ssh/id_rsa’)<br>连接SSH服务端，使用pkey指定私钥<br>tran.connect(username=”root”, pkey=private)<br>获取SFTP实例<br>sftp = paramiko.SFTPClient.from_transport(tran)<br>设置上传的本地/远程文件路径<br>local_path = “/home/1.txt”<br>remote_path = “/tmp/1.txt”<br>执行上传动作<br>sftp.put(local_path, remote_path)<br>执行下载动作<br>sftp.get(remote_path, local_path)<br>关闭Transport通道<br>tran.close()</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>concurrent模块</title>
      <link href="/2020/09/27/concurrent%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/09/27/concurrent%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>concurrent模块</p><span id="more"></span><h3 id="关于concurrent模块"><a href="#关于concurrent模块" class="headerlink" title="关于concurrent模块"></a>关于concurrent模块</h3><p>今天来讲下 python 的另外一个自带库 concurrent 。<br>concurrent 是在 Python3.2 中引入的，只用几行代码就可以编写出线程池/进程池。<br>计算型任务效率和 mutiprocessing.pool 提供的 poll 和 ThreadPoll 相比不分伯仲，而且在 IO 型任务由于引入了 Future 的概念效率要高数倍。<br>而threading的话还要自己维护相关的队列防止死锁，代码的可读性也会下降，相反 concurrent 提供的线程池却非常的便捷，不用自己操心死锁以及编写线程池代码，由于异步的概念 IO 型任务也更有优势<br>concurrent 主要提供了 ThreadPoolExecutor 和 ProcessPoolExecutor 。一个多线程，一个多进程。但 concurrent 本质上都是对 threading 和 mutiprocessing 的封装。看它的源码可以知道，所以最底层并没有异步。<br>ThreadPoolExecutor 自己提供了任务队列，不需要自己写了。而所谓的线程池，它只是简单的比较当前的 threads 数量和定义的 max_workers 的大小，小于 max_workers 就允许任务创建线程执行任务</p><h3 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3><p>通过 ThreadPoolExecutor 类创建线程池对象，max_workers 设置最大运行线程数数。<br>使用 ThreadPoolExecutor 的好处是不用担心线程死锁问题，让多线程编程更简洁<br>from concurrent import futures<br>pool = futures.ThreadPoolExecutor(max_workers = 2)</p><h3 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h3><p>submit(self, fn, *args, **kwargs):<br>fn：需要异步执行的函数<br>*args,**kwargs：fn 接受的参数</p><p>该方法的作用就是提交一个可执行的回调task，它返回一个Future对象。可以看出此方法不会阻塞主线程的执行。<br>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="https://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">https://www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>for url in urls:<br>    task = pool.submit(get_request,url)<br>    print(‘{}主线程’.format(datetime.datetime.now()))<br>    time.sleep(2)</p><p>输出结果<br>2021-03-12 15:29:10.780141:主线程<br>2021-03-12 15:29:10.865425:<a href="https://www.baidu.com/">https://www.baidu.com</a>  200<br>2021-03-12 15:29:10.923062:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200<br>2021-03-12 15:29:10.940930:<a href="https://www.jd.com/">https://www.jd.com</a>  200</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map(self, fn, *iterables, timeout=None, chunksize=1):<br>fn：需要异步执行的函数<br>*iterables：可迭代对象</p><p>map 第二个参数是可迭代对象，比如 list、tuple 等，写法相对简单。map 方法也不会阻塞主线程的执行<br>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="https://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">https://www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>tasks = pool.map(get_request,urls)<br>print(‘{}:主线程’.format(datetime.datetime.now()))<br>time.sleep(2)</p><p>输出结果<br>2021-03-12 16:14:04.854452:主线程<br>2021-03-12 16:14:04.938870:<a href="https://www.baidu.com/">https://www.baidu.com</a>  200<br>2021-03-12 16:14:05.033849:<a href="https://www.jd.com/">https://www.jd.com</a>  200<br>2021-03-12 16:14:05.048952:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200</p><h3 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h3><p>如果要等待子线程执行完之后再执行主线程要怎么办呢，可以通过 wait 。</p><p>wait(fs, timeout=None, return_when=ALL_COMPLETED):<br>fs：所有任务 tasks<br>return_when：有三个参数 FIRST_COMPLETED：只要有一个子线程完成则返回结果。<br>             FIRST_EXCEPTION：只要有一个子线程抛异常则返回结果，若没有异常则等同于ALL_COMPLETED。<br>             ALL_COMPLETED：默认参数，等待所有子线程完成</p><p>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="https://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">https://www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>tasks =[]<br>for url in urls:<br>    task = pool.submit(get_request,url)<br>    tasks.append(task)<br>futures.wait(tasks)<br>print(‘{}:主线程’.format(datetime.datetime.now()))<br>time.sleep(2)</p><p>输出结果<br>2021-03-12 16:30:13.437042:<a href="https://www.baidu.com/">https://www.baidu.com</a>  200<br>2021-03-12 16:30:13.552700:<a href="https://www.jd.com/">https://www.jd.com</a>  200<br>2021-03-12 16:30:14.117325:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200<br>2021-03-12 16:30:14.118284:主线程</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>as_completed(fs, timeout=None)</p><p>所有任务 tasks<br>使用 concurrent.futures 操作 多线程/多进程 过程中，很多函数报错并不会直接终止程序，而是什么都没发生。使用 as_completed 可以捕获异常，代码如下<br>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="http://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>创建线程池<br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>tasks =[]<br>for url in urls:<br>    task = pool.submit(get_request,url)<br>    tasks.append(task)<br>异常捕获<br>errors = futures.as_completed(tasks)<br>for error in errors:<br>    # error.result()       等待子线程都完成，并抛出异常，中断主线程<br>    # 捕获子线程异常，不会终止主线程继续运行<br>    print(error.exception())<br>futures.wait(tasks)<br>print(‘{}:主线程’.format(datetime.datetime.now()))<br>time.sleep(2)</p><p>输出结果<br>Invalid URL ‘<a href="http://www.baidu.com&amp;/#39;">www.baidu.com'</a>: No schema supplied. Perhaps you meant <a href="http://www.baidu.com/">http://www.baidu.com</a>?<br>2021-03-12 17:24:26.984933:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200<br>None<br>2021-03-12 17:24:26.993939:<a href="https://www.jd.com/">https://www.jd.com</a>  200<br>None<br>2021-03-12 17:24:26.994937:主线程</p><p>多进程编程与之类似，将 ThreadPoolExecutor 替换成 ProcessPoolExecutor</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多进程包multiprocessing的使用</title>
      <link href="/2020/09/27/multiprocess%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/09/27/multiprocess%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>多进程学习</p><span id="more"></span><p>Python提供了非常好用的多进程包multiprocessing，你只需要定义一个函数，Python会替你完成其他所有事情。借助这个包，可以轻松完成从单进程到并发执行的转换。</p><h3 id="新建单一进程"><a href="#新建单一进程" class="headerlink" title="新建单一进程"></a>新建单一进程</h3><p>如果我们新建少量进程，可以如下：<br>import multiprocessing<br>import time<br>def func(msg):<br>  for i in xrange(3):<br>    print msg<br>    time.sleep(1)<br>if <strong>name</strong> == “<strong>main</strong>“:<br>  p = multiprocessing.Process(target=func, args=(“hello”, ))<br>  p.start()<br>  p.join()<br>  print “Sub-process done.”</p><h3 id="使用进程池"><a href="#使用进程池" class="headerlink" title="使用进程池"></a>使用进程池</h3><p>是的，你没有看错，不是线程池。它可以让你跑满多核CPU，而且使用方法非常简单。<br>注意要用apply_async，如果落下async，就变成阻塞版本了。<br>processes=4是最多并发进程数量。</p><p>import multiprocessing<br>import time<br>def func(msg):<br>  for i in xrange(3):<br>    print msg<br>    time.sleep(1)<br>if <strong>name</strong> == “<strong>main</strong>“:<br>  pool = multiprocessing.Pool(processes=4)<br>  for i in xrange(10):<br>    msg = “hello %d” %(i)<br>    pool.apply_async(func, (msg, ))<br>  pool.close()<br>  pool.join()<br>  print “Sub-process(es) done.”</p><h3 id="使用Pool，并需要关注结果"><a href="#使用Pool，并需要关注结果" class="headerlink" title="使用Pool，并需要关注结果"></a>使用Pool，并需要关注结果</h3><p>更多的时候，我们不仅需要多进程执行，还需要关注每个进程的执行结果，如下：</p><p>import multiprocessing<br>import time<br>def func(msg):<br>  for i in xrange(3):<br>    print msg<br>    time.sleep(1)<br>  return “done “ + msg<br>if <strong>name</strong> == “<strong>main</strong>“:<br>  pool = multiprocessing.Pool(processes=4)<br>  result = []<br>  for i in xrange(10):<br>    msg = “hello %d” %(i)<br>    result.append(pool.apply_async(func, (msg, )))<br>  pool.close()<br>  pool.join()<br>  for res in result:<br>    print res.get()<br>  print “Sub-process(es) done.”</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis缓存</title>
      <link href="/2020/08/10/Redis%E7%BC%93%E5%AD%98/"/>
      <url>/2020/08/10/Redis%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>redis缓存</p><span id="more"></span><p>redis<strong>缓存穿透</strong></p><p>你所要查询的key并不存在于redis缓存中，这时又有大连的请求查询这个key，就会使得数据库负载过大，就像是穿过了缓存直接击中数据库，很容易把数据库给打挂了<br>解决方案：<br>第一种方法呢就是数据库查询不到的key直接保存在redis中，再次查询数据库的时候，缓存层直接返回空<br>第二种方法就涉及到了一个叫布隆过滤器的东西，本质上是一个二进制数组，以空间换时间，以低内存空间解决缓存穿透的问题，将所有存在的key提前存入布隆过滤器，在请求进入缓存之前，布隆过滤器进行拦截，若不存在直接返回空</p><p>redis<strong>缓存击穿</strong></p><p>某一个热点的key失效了，大量的请求直接到达数据库<br>解决方法：<br>第一种设置永不过期<br>第二种就是加互斥锁，互斥锁就是同一时刻只有一个线程能够进行访问，加了互斥锁之后第一个访问完后，缓存中的数据将会被重建，之后直接从缓存中取就可以 </p><p>redis<strong>缓存雪崩</strong></p><p>可能是redis宕机了，也可能是有很多key设置了统一过期时间<br>解决方案：<br>第一种构建高可用的Redis缓存：搭建Redis集群，提高Redis的容灾性<br>第二种使用熔断机制：对存储层增加限流措施，当请求超出限制时，对其提供降级措施，例如：当请求到达一定阈值，直接返回“系统繁忙“等提示，防止过多的请求到达数据库上，这样可以保证一部分用户还可以使用，其他用户多刷新几次也能得到结果</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django面试题</title>
      <link href="/2020/08/08/Django%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/08/08/Django%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>面试题面试题！！！</p><span id="more"></span><h3 id="Django的生命周期"><a href="#Django的生命周期" class="headerlink" title="Django的生命周期"></a>Django的生命周期</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、当用户在浏览器输入url，此时浏览器会生成请求头和请求体随之发送给服务端。2、url经过Django中的wsgi时完成请求对象创建3、经过Django的中间件，到路由系统匹配路由4、完成匹配后进入相应的view视图，执行相关代码返回执行结果5、Django把客户端想要的数据作为字符串返回客户端6、客户端接收数据，再渲染到页面展现给用户</code></pre><img src="https://s2.loli.net/2022/06/12/AK93GHI4SJM7afn.png" alt="image-20220603144648987" style="zoom:50%;"><h3 id="Django内置组件"><a href="#Django内置组件" class="headerlink" title="Django内置组件"></a>Django内置组件</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">admin，from，modelfrom，model</code></pre><h3 id="FBV和CBV"><a href="#FBV和CBV" class="headerlink" title="FBV和CBV"></a>FBV和CBV</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">FBV:基于函数的视图函数CBV:基于类的视图函数</code></pre><h3 id="session和cookie"><a href="#session和cookie" class="headerlink" title="session和cookie"></a>session和cookie</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">区别：    cookie数据存放于客户的浏览器中，session的数据存于服务器中，cookie不是很安全，他人可以分析存放于本地的cookie并进行cookie欺骗，若从安全面考虑则应该使用session，session会在一定的时间内保存在服务器上。当访问量增多，会比较占用服务器的性能，所以建议将登陆信息等重要的信息存放在session中，其他信息则放在cookie中</code></pre><h3 id="HTTP请求常见的方式"><a href="#HTTP请求常见的方式" class="headerlink" title="HTTP请求常见的方式"></a>HTTP请求常见的方式</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、opions 返回服务器针对特定资源所支持的HTML请求方法，允许客户端查看服务器性能2、Get 向特定资源发出请求3、post 向指定资源位置提交数据进行处理请求（提交表单，上传文件），又可能导致新的资源的建立或原有资源的修改4、put 向指定资源位置上传最新内容5、head6、delete7、trace8、connect</code></pre><h3 id="MVC和MTV模式"><a href="#MVC和MTV模式" class="headerlink" title="MVC和MTV模式"></a>MVC和MTV模式</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">Django的MTV模式本质上和MVC是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同。Django的MTV分别是指：    M 代表模型（Model）： 负责业务对象和数据库的关系映(ORM)    T 代表模板 (Template)：负责如何把页面展示给用户(html)    V 代表视图（View）： 负责业务逻辑，并在适当时候调用Model和Template。    除了以上三层之外，还需要一个URL分发器，它的作用是将一个个URL的页面请求分发给不同的View处理，View再调用相应Model Template    优势：低耦合，开发快捷，部署方便，可重用性高，维护成本低。</code></pre><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">对象关系映射优点：ORM使得数据库的交互更加简单了，并且不用考虑开始的sql语句，实现快速开发缺陷:sql封装死了 有时候查询速度很慢</code></pre><h3 id="中间件的4种方法及应用场景"><a href="#中间件的4种方法及应用场景" class="headerlink" title="中间件的4种方法及应用场景"></a>中间件的4种方法及应用场景</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">自定义中间件必须继承MiddlewareMixinfrom django.utils.deprecation import MiddlewareMixin方法：    process_request    process_view    process_exception   view中出现错误执行该方法    process_response    process_template_responseprocess  函数中有render执行</code></pre><h3 id="什么是wsgi、uwsgi、uWSGI"><a href="#什么是wsgi、uwsgi、uWSGI" class="headerlink" title="什么是wsgi、uwsgi、uWSGI"></a>什么是wsgi、uwsgi、uWSGI</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">wsgi:    是web网关接口，是一套协议，用于接收用户请求并将请求进行初次封装，随即将请求交给web框架    实现wsgi协议的模块：        1、wsgiref：本质上就是编写一个socket服务端，用于接收用户请求（django）        2、werkzeug：本质上就是编写一个socket服务端，用于接收用户请求（flask）uwsgi:    与wsgi一样是一种通信协议，它是uWSGI服务器的独占协议，用于定义传输信息的类型uWSGI:    是一个web服务器，实现了wsgi协议，uWSGI协议，http协议</code></pre><p>ORM中的方法</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、model.表名.objects.all() 获取表中所有对象，结果是对象列表2、model.表名.objects.get(条件) 获取符合条件的对象3、model.表名.objects.filter(条件) 筛选所有符合条件的对象4、model.表名.objects.exclude(条件) 筛选所有不合符条件的对象5、model.表名.objects.all().values() 字典列表 values()括号内不指定则显示全部，若有指定则显示指定的6、model.表名.objects.all().values_list() 元祖列表 括号内指定同上7、model.表名.objects.all().order_by('id') 按照ID升序8、model.表名.objects.all().order_by('-id') 按ID降序9、model.表名.objects.all().order_by('a','-id') 先按a升序，a字段相同的按ID降序10、model.表名.objects.all().order_by('-id').reverse() 对结果反转，reverse前必须排序，否则无效；或在model中表类下中的Meta中指定ordering=('id',) 注意逗号不能少11、distinct() 去重12、model.表名.objects.filter().exists() 判断列表是否有东西，返回true或false</code></pre><h3 id="ORM中三种能写sql语句的方法"><a href="#ORM中三种能写sql语句的方法" class="headerlink" title="ORM中三种能写sql语句的方法"></a>ORM中三种能写sql语句的方法</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、execute 直接访问数据库，避开模型层2、extra 3、raw for p in Person.objects.raw('SELECT * FROM myapp_person')   print(p)</code></pre><h3 id="ORM批量处理数据"><a href="#ORM批量处理数据" class="headerlink" title="ORM批量处理数据"></a>ORM批量处理数据</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">插入数据：    创建一个对象列表，然后调用bulk_create方法，一次性将列表中的数据插入数据库    product_list_to_insert = list()    for x in range(10):        product_list_to_insert.append(Product(name='product name' + str(x),price=x))        Product.objects.bulk_create(product_list_to_insert)更新数据:先进行数据过滤，再调用update方法一次性更新    Product.objects.filter(name_contains='name').update(name='new name')删除数据：先进行数据过滤，然后再调用delete方法删除    Product.objects.filter(name_contains='name query').delete()</code></pre><h3 id="CSRF实现机制"><a href="#CSRF实现机制" class="headerlink" title="CSRF实现机制"></a>CSRF实现机制</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、查看中间件是否启用，未启用则启动中间件2、post请求3、验证码4、表单中添加{% csrf_token %}标签</code></pre><h3 id="Django中提供了runserver为什么不能用户来部署项目-runserver和uWSGI的区别"><a href="#Django中提供了runserver为什么不能用户来部署项目-runserver和uWSGI的区别" class="headerlink" title="Django中提供了runserver为什么不能用户来部署项目(runserver和uWSGI的区别)"></a>Django中提供了runserver为什么不能用户来部署项目(runserver和uWSGI的区别)</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、runserver方法是调试Django时用到的运行方式，是Django自带的   WSGI server运行主要在测试和开发中使用，runserver开启的是单进程2、uWSGI是一个web服务器，实现了wsgi协议，uWSGI协议，http协议，它具有超快的性能，低内存占用和多app管理等优点，与nginx搭配可构成一个生产环境，能够将用户访问请求和应用app隔开，实现真正的部署</code></pre><h3 id="calss-Meta中原信息字段有哪些"><a href="#calss-Meta中原信息字段有哪些" class="headerlink" title="calss Meta中原信息字段有哪些"></a>calss Meta中原信息字段有哪些</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、app_label 应用场景：模型类不在默认的应用程序包下的models文件中，这时候需要指定你这个模型类是哪个应用程序的2、db_table 应用场景：用于指定自定义数据库表名3、db_tablespace 应用场景：通过该字段指定模型对应的数据库表放在哪个数据库表空间4、verbose_name 应用场景：给模型类起名字，注释5、verbose_name_plural 应用场景：模型的复数形式是什么6、ordering 应用场景：对象返回的记录结果集是按哪个字段排序的</code></pre><h3 id="get和filter方法的区别"><a href="#get和filter方法的区别" class="headerlink" title="get和filter方法的区别"></a>get和filter方法的区别</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">输入参数：    get的参数只能是model中定义的字段，只支持严格匹配    filter的参数可以使字段，也可以是扩展的where查询关键字，如in like返回值：    get返回值是一个定义的model对象    filter返回值是一个新的queryset对象，然后可以对queryset再进行查询，再返回新的qureyset对象，支持链式操作，queryset是一个集合对象，支持迭代、遍历、切片等，但不同等于list异常：    get只有一条记录返回的时候才正常，也就是说明get查询的字段必须是主键或唯一约束的字段，其余的都会抛异常    filter有没有匹配记录都不会抛异常</code></pre><h3 id="http请求的执行流程"><a href="#http请求的执行流程" class="headerlink" title="http请求的执行流程"></a>http请求的执行流程</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、域名解析2、建立连接3、接收请求 接收客户端访问某一资源的请求    单进程I/O   多进程I/O    复用I/O4、处理请求5、访问资源6、构建响应报文7、发送响应报文8、记录日志</code></pre><h3 id="select-related和prefetch-related的区别"><a href="#select-related和prefetch-related的区别" class="headerlink" title="select_related和prefetch_related的区别"></a>select_related和prefetch_related的区别</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">有外键关系存在时，可以很好的减少数据库的请求次数，减轻数据库的压力，提高性能select_related通过表关系join关联查询，一次性获取所有数据，只进行一次sql查询prefetch_related分别查询每一个表，根据之间的关系进行处理，执行两次sql查询</code></pre><h4 id="Django中orm如何设置读写分离"><a href="#Django中orm如何设置读写分离" class="headerlink" title="Django中orm如何设置读写分离"></a>Django中orm如何设置读写分离</h4><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、手动设置：通过using(db_name)来指定使用的数据库2、自动读写分离：    1、定义类    2、配置settings文件，在其中指定DATEBASE</code></pre><h3 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">定义：远程过程调用(RPC)是一种协议，程序可使用这种协议向网络中的另一台计算机上的程序请求服务1、RPC采用客户机/服务器模式，请求程序就是一个客户机，而服务提供程序就是一个服务器2、客户机调用进程发送一个有进程参数的调用信息到服务进程，等待应答。在服务端，进程保持睡眠状态直至调用信息到达，当第一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，继续等待下一个调用信息3、客户端调用进程接收答复信息，获得进程结果，调用继续执行</code></pre><h3 id="如何实现用户的登陆认证"><a href="#如何实现用户的登陆认证" class="headerlink" title="如何实现用户的登陆认证"></a>如何实现用户的登陆认证</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、cookie session2、token登陆成功后生成加密字符串3、JWT就是一种用户在登录后生成token并把token存放于前端，后端不需要维护用户的状态信息但是可以进行验证token有效性的认证及状态管理方式4、最后一步签名的过程其实是对头部以及负载的内容进行签名处理，防止内容被篡改，提高安全性</code></pre><h3 id="django-rest-framework框架中都有哪些组件"><a href="#django-rest-framework框架中都有哪些组件" class="headerlink" title="django rest framework框架中都有哪些组件"></a>django rest framework框架中都有哪些组件</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、序列化组件：serializers 对queryset序列化以及对请求数据格式教研2、认证组件：写一个类并注册到认证类 在类的方法中编写认证逻辑3、权限组件：写一个类并注册到权限类 在类的方法中编写认证逻辑4、频率组件：写一个类并注册到频率类 在类的方法中编写认证逻辑5、渲染器：定义数据如何渲染至页面，在渲染器类中注册6、分页：对获取到的数据进行分页处理    1、基本分页：pagenumberpagination    2、偏移分页：limitoffsetpagination    3、游标分页：Cursorpagination</code></pre><h3 id="使用orm和原生sql的优缺点"><a href="#使用orm和原生sql的优缺点" class="headerlink" title="使用orm和原生sql的优缺点"></a>使用orm和原生sql的优缺点</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、orm的开发速度快，操作简单，但是执行速度较慢，在处理多表联查等复杂操作时orm语法会变得复杂2、sql开发速度慢，但是执行速度快，性能强</code></pre><h3 id="F、Q查询"><a href="#F、Q查询" class="headerlink" title="F、Q查询"></a>F、Q查询</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">F作用：两个字段之间做比较，专门取对象中某列值的操作Q作用：对对象进行复杂查询，支持特殊操作符运算来组合生成不同的Q对象</code></pre><h3 id="你能列举几个减少数据库查询次数的方法吗"><a href="#你能列举几个减少数据库查询次数的方法吗" class="headerlink" title="你能列举几个减少数据库查询次数的方法吗"></a>你能列举几个减少数据库查询次数的方法吗</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、利用Django queryset的惰性和自带缓存的特性2、使用select_related和prefetch_related方法在数据库层面进行Join操作3、使用缓存</code></pre><h3 id="Django的模型继承有哪几种方式-它们有什么区别以及何时使用它们"><a href="#Django的模型继承有哪几种方式-它们有什么区别以及何时使用它们" class="headerlink" title="Django的模型继承有哪几种方式? 它们有什么区别以及何时使用它们?"></a>Django的模型继承有哪几种方式? 它们有什么区别以及何时使用它们?</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 抽象模型继承(abstract model)<span class="token list punctuation">2.</span> 多表模型继承(multi-table inheritance)<span class="token list punctuation">3.</span> 代理模型(proxy model)它们的区别如下:<span class="token code keyword">    1、Django不会为抽象模型在数据库中生成自己的数据表。父类Meta中的abstract=True也不会传递给子类。如果你发现多模型有很多共同字段时，需使用抽象模型继承。</span><span class="token code keyword">    2、多表模型继承与抽象模型继承最大的区别在于Django也会为父类模型建立自己的数据表，同时隐式地在父类和子类之间建立一个一对一关系。</span><span class="token code keyword">    3、如果我们只想改变某个模型的行为方法，而不是添加额外的字段或创建额外的数据表，我们就可以使用代理模型(proxy model)。设置一个代理模型，需要在子类模型Meta选项中设置proxy=True， Django不会为代理模型生成新的数据表</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深浅拷贝</title>
      <link href="/2020/08/08/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/08/08/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>面试常问之深浅拷贝</p><span id="more"></span><h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><h3 id="一、深浅copy"><a href="#一、深浅copy" class="headerlink" title="一、深浅copy"></a><strong>一、深浅copy</strong></h3><p><strong>1、赋值运算</strong></p><p><img src="https://s2.loli.net/2022/06/11/mkIqjbKXiYtL4a8.png" alt="image-20220611151019511"></p><p><strong>注意</strong>：l2 = l1是一个指向，是赋值，和深浅copy无关</p><p>2、浅<strong>copy</strong></p><p>其实列表是一个个的槽位，每一个槽位存储的是该对象的内存地址</p><p><img src="https://s2.loli.net/2022/06/11/B8zqfNFJuDi3XVc.png" alt="image-20220611151229683"></p><p><img src="https://s2.loli.net/2022/06/11/XwmLQiN3YHOBUpy.png" alt="image-20220611151251385"></p><p><strong>小结</strong>：</p><p>浅copy：会在内存中新开辟一个空间，存放这个copy的列表，但是列表里面的内容还是沿用之前对象的内存地址</p><p>3、深<strong>copy</strong></p><p><img src="https://s2.loli.net/2022/06/11/JDp1vHY6wxAIURq.png" alt="image-20220611151433932"></p><p><img src="https://s2.loli.net/2022/06/11/YKXF9luhUOfDaH7.png" alt="image-20220611151450570"></p><p><strong>小结</strong>：</p><p>深copy：会在内存中开辟新空间，将原列表以及列表里面的可变数据类型重新创建一份，不可变数据类型则沿用之前的。</p><p><strong>为什么Python默认的拷贝方式是浅拷贝</strong>？</p><p>时间角度：浅拷贝花费时间更少。</p><p>空间角度：浅拷贝花费内存更少。</p><p>效率角度：浅拷贝只拷贝顶层数据，一般情况下比深拷贝效率高。</p><p><strong>总结</strong>：</p><p>不可变对象在赋值时会开辟新空间。</p><p>可变对象在赋值时，修改一个的值，另一个也会发生改变。</p><p>深、浅拷贝对不可变对象拷贝时，不开辟新空间，相当于赋值操作。</p><p>浅拷贝在拷贝时，只拷贝第一层中的引用，如果元素是可变对象，并且被修改，那么拷贝的对象也会发生变化。</p><p>深拷贝在拷贝时，会逐层进行拷贝，直到所有的引用都是不可变对象为止。</p><p>Python 有多种方式实现浅拷贝，copy模块的copy 函数 ，对象的 copy 函数 ，工厂方法，切片等。</p><p>大多数情况下，编写程序时，都是使用浅拷贝，除非有特定的需求。</p><p>浅拷贝的优点：拷贝速度快，占用空间少，拷贝效率高 </p>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django必会十三招</title>
      <link href="/2020/06/24/Django%E5%BF%85%E4%BC%9A%E5%8D%81%E4%B8%89%E6%8B%9B/"/>
      <url>/2020/06/24/Django%E5%BF%85%E4%BC%9A%E5%8D%81%E4%B8%89%E6%8B%9B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>必会十三招</p><span id="more"></span><h3 id="必会十三招"><a href="#必会十三招" class="headerlink" title="必会十三招"></a>必会十三招</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""1.all()            所有元素2.filter()         过滤   我们在利用主键字段筛选数据时，可以不考虑主键字段叫什么，直接使用pk代替   3.get()4.values()            获取指定字段对应的数据，返回的结果是queryset对象(列表套字典的形式)   5.values_list()   获取指定字段对应的数据，返回的结果是queryset对象(列表套元祖的形式)   6.count()          统计所查询数据的个数7.first()          所查询数据的第一个 8.last()           所查询数据的最后一个9.order_by()       默认是升序，在字段前加上负号即可改为降序10.reverse()       生效前提是必须已经排序过了的11.exclude()       排除什么在外12.distinct()      去重(主键也得相同)13.exist()         判断数据是否有值，结果返回布尔值"""</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CBV和FBV、from表单</title>
      <link href="/2020/06/24/Django%E7%AC%AC%E4%BA%94%E5%A4%A9/"/>
      <url>/2020/06/24/Django%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Django</p><span id="more"></span><h3 id="JsonResponse类的使用"><a href="#JsonResponse类的使用" class="headerlink" title="JsonResponse类的使用"></a>JsonResponse类的使用</h3><pre class="language-python" data-language="python"><code class="language-python">json格式的数据：进行跨语言数据传输<span class="token keyword">import</span> json<span class="token triple-quoted-string string">'''支持的数据类型：str，list, tuple, dict, set'''</span><span class="token comment"># 序列化出来的数据是可以看得懂的，就是一个字符串</span>dumpsloadsdumpload<span class="token keyword">import</span> pickle<span class="token triple-quoted-string string">'''支持的数据类型：python中的所有数据类型'''</span><span class="token comment"># 序列化出来的结果看不懂，因为结果是一个二进制</span><span class="token comment"># pickle序列化出的来的数据只能在python中使用</span>dumpsloadsdumpload<span class="token comment"># js中如何序列化？</span>JSON<span class="token punctuation">.</span>stringify<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 序列化</span>JSON<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 反序列化</span><span class="token operator">**</span>在形参和实参中的用法不一样<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> JsonResponse<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># print(123)</span>    <span class="token comment"># return HttpResponse('ok')</span>    <span class="token comment"># return redirect()</span>    <span class="token comment"># return render()</span>    user_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string">'ly很帅'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">}</span>    l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>    <span class="token comment"># json_str = json.dumps(l, ensure_ascii=False)</span>    <span class="token comment"># return HttpResponse(json_str)</span>    <span class="token comment"># return JsonResponse(user_dict, json_dumps_params={'ensure_ascii':False})</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>l<span class="token punctuation">,</span>safe<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h3 id="form表单上传文件"><a href="#form表单上传文件" class="headerlink" title="form表单上传文件"></a>form表单上传文件</h3><pre class="language-python" data-language="python"><code class="language-python">上传文件注意事项：<span class="token number">1.</span> 必须是post请求    <span class="token number">2.</span> enctype<span class="token operator">=</span><span class="token string">'multipart/form-data'</span>    后端：在request<span class="token punctuation">.</span>FILES中接收文件数据，其他数据一律按照请求方式接收    form表单可以传递的数据格式：<span class="token number">1.</span> urlencoded    <span class="token number">2.</span> form<span class="token operator">-</span>data <span class="token comment"># 不能提交json格式的数据</span><span class="token triple-quoted-string string">'''提交json格式的数据：1. ajax2. 第三方工具postmanapizza'''</span>    数据格式：<span class="token number">1.</span> urlencoded    <span class="token number">2.</span> form<span class="token operator">-</span>data    <span class="token number">3.</span> json格式       <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>FILES<span class="token punctuation">)</span>        file_obj <span class="token operator">=</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'myfile'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>file_obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment"># 文件名</span>        <span class="token keyword">import</span> random        <span class="token keyword">import</span> uuid        aa <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.png'</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>aa<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> file_obj<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'upload_file.html'</span><span class="token punctuation">)</span></code></pre><h3 id="CBV和FBV"><a href="#CBV和FBV" class="headerlink" title="CBV和FBV"></a>CBV和FBV</h3><pre class="language-python" data-language="python"><code class="language-python">FBV<span class="token punctuation">:</span> function based viewCBV<span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">based</span> view<span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">)</span>    <span class="token comment">#  url(r'^indexCbv/', views.IndexView.as_view()),</span></code></pre><h3 id="CBV的源码"><a href="#CBV的源码" class="headerlink" title="CBV的源码"></a>CBV的源码</h3><pre class="language-python" data-language="python"><code class="language-python">如何通过请求方式确定的方法？<span class="token comment">#############入口################################</span>            <span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            self <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">**</span>initkwargs<span class="token punctuation">)</span>  <span class="token comment"># self = IndexView(**initkwargs)</span>            <span class="token comment"># self =&gt; IndexView</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>dispatch<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment">##############核心方法################################</span>    <span class="token keyword">def</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># GET POST  =&gt; get post</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>http_method_names<span class="token punctuation">:</span>            <span class="token comment"># 反射：get set has del</span>            handler <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">.</span>method<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>http_method_not_allowed<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            handler <span class="token operator">=</span> self<span class="token punctuation">.</span>http_method_not_allowed        <span class="token keyword">return</span> handler<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  <span class="token comment"># get(request, *args, **kwargs)</span></code></pre><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1.</span> 传值<span class="token comment"># 跟变量相关的都使用双括号 {{}}</span><span class="token comment"># 跟逻辑相关的都使用 {%  %}</span><span class="token triple-quoted-string string">'''模板文件中取值一律使用点语法 . '''</span><span class="token comment"># 在模板文件里面的函数，不用加括号，会自动加括号调用， 不能传递参数</span></code></pre><h3 id="模板语法之过滤器"><a href="#模板语法之过滤器" class="headerlink" title="模板语法之过滤器"></a>模板语法之过滤器</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 相当于python里面的内置方法</span>语法：<span class="token punctuation">{</span><span class="token punctuation">{</span>变量<span class="token operator">|</span>过滤器<span class="token punctuation">:</span>参数<span class="token punctuation">}</span><span class="token punctuation">}</span>    过滤器有很多个，大概有六七十，我们需要使用<span class="token number">5</span>个左右<span class="token number">1.</span> length<span class="token number">2.</span> defalut<span class="token number">3.</span> date<span class="token number">4.</span> filesizeformat<span class="token number">5.</span> safe<span class="token comment"># 过滤器里面最大传两个参数，至少一个参数</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CBV和FBV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django路由层</title>
      <link href="/2020/06/23/Django%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
      <url>/2020/06/23/Django%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>路由层</p><span id="more"></span><h3 id="路由层"><a href="#路由层" class="headerlink" title="路由层"></a>路由层</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1.</span> 路由匹配<span class="token punctuation">,</span> urls<span class="token punctuation">.</span>py中<span class="token comment"># APPEND_SLASH = False 控制django是否自动加斜杠匹配</span>url<span class="token punctuation">(</span><span class="token string">r'^testadd/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>testadd<span class="token punctuation">)</span><span class="token comment"># 匹配规则：从上到下只要正则表达式匹配成功，就不会往下匹配了</span><span class="token triple-quoted-string string">'''get请求的传参方式？http://127.0.0.1:8000/test/?a=1http://127.0.0.1:8000/test/1'''</span></code></pre><h3 id="无名分组和有名分组"><a href="#无名分组和有名分组" class="headerlink" title="无名分组和有名分组"></a>无名分组和有名分组</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 无名分组</span>url<span class="token punctuation">(</span><span class="token string">r'^test/(\d+)'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment"># 会把括号中匹配的数字当成位置参数传给视图函数</span><span class="token comment"># 有名分组</span>url<span class="token punctuation">(</span><span class="token string">r'^test/(?P&lt;aaaa&gt;\d{2})$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># # 会把括号中匹配的数字当成关键字参数传给视图函数</span></code></pre><h3 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 反向解析其实就是通过一个路由的别名，可以得到该别名所在的这行路由的完整地址</span><span class="token comment"># 路由是可以起别名的</span><span class="token comment"># 反向解析</span>url<span class="token punctuation">(</span><span class="token string">r'^v1/v2/v3/v4/v5/test/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>test<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> reverse<span class="token comment"># 1. 后端反向解析</span><span class="token keyword">print</span><span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># /test/</span><span class="token comment"># 带参数的反向解析</span><span class="token comment"># 1. 后端反向解析</span><span class="token keyword">print</span><span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># /test/</span><span class="token keyword">print</span><span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'aaa'</span><span class="token punctuation">:</span> <span class="token number">1111</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># /test/</span><span class="token triple-quoted-string string">'''无名有名不能混合使用，可以单个多次使用'''</span><span class="token comment"># url(r'^test/(\d+)/(\d+)/(\d+)/(\d+)', views.test, name='test'),</span>    url<span class="token punctuation">(</span><span class="token string">r'^test/(?P&lt;aaa&gt;\d+)/(?P&lt;bbb&gt;\d+)/(?P&lt;ccc&gt;\d+)/(\d+)'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>test<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h3 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 重点</span>以后我们的django项目会越来越大，那么就会导致总路由文件会越来越大，就会非常难维护，我们会把总路由分开到不同的应用下面<span class="token triple-quoted-string string">'''django的每一个应用都支持有自己的urls.pytemplatesstatic'''</span><span class="token comment"># 怎么样把这些应用串起来？就是使用路由分发。</span><span class="token comment"># 使用路由分发一般都是多个应用</span> <span class="token comment"># 路由分发</span>    <span class="token triple-quoted-string string">'''第一种方式'''</span>    <span class="token keyword">from</span> app01 <span class="token keyword">import</span> urls <span class="token keyword">as</span> app01_urls<span class="token keyword">from</span> app02 <span class="token keyword">import</span> urls <span class="token keyword">as</span> app02_urls    url<span class="token punctuation">(</span><span class="token string">r'^app01/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>app01_urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^app02/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>app02_urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">''' 强调：路由分发时，总路由第一个参数一定不能加$ '''</span>    <span class="token comment"># 第二种方式</span>url<span class="token punctuation">(</span><span class="token string">r'^app01/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'app01.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^app02/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'app02.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h3 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 当多个应用出现相同的别名时，反向解析就没办法识别了</span>  url<span class="token punctuation">(</span><span class="token string">r'^app01/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'app01.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'app01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  url<span class="token punctuation">(</span><span class="token string">r'^app02/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'app02.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'app02'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'app01:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'app02:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 针对不同的项目，创建出来一个新的python环境，类似于是一个新的python解释器</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM</title>
      <link href="/2020/06/22/Django%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
      <url>/2020/06/22/Django%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>ORM：一个好用又不好用的东西</p><span id="more"></span><h3 id="ORM的概念"><a href="#ORM的概念" class="headerlink" title="ORM的概念"></a>ORM的概念</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1.</span> 什么是ORM？关系映射对象    <span class="token comment"># 不但在python中有，在其他语言中也有</span><span class="token number">2.</span> 特点：在操作数据库的时候，不用在写原生SQL语句    <span class="token triple-quoted-string string">'''相对而言，执行效率低了'''</span><span class="token number">3.</span> ORM书写的位置：在models<span class="token punctuation">.</span>py文件中<span class="token number">4.</span> 如何使用？类名    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   表名     对象    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   记录     属性    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    字段 <span class="token number">5.</span> 如何来创建表？<span class="token comment"># 创建一张表出来,必须继承models</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 组合索引，联合索引</span>    <span class="token comment"># id int primary key auto_increment</span>    <span class="token builtin">id</span> <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># username, max_length必须写</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>  <span class="token comment"># varchar(32)</span>    <span class="token comment"># password, orm支持自定义数据类型</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>  <span class="token comment"># char()</span>    <span class="token number">6.</span> 类写完之后，一定要执行数据库迁移命令，才能真正的创建出来数据表<span class="token triple-quoted-string string">'''python36 manage.py makemigrationspython36 manage.py migrate'''</span>    <span class="token comment"># 凡是跟数据相关的操作都要执行以上两句话</span><span class="token comment"># 补充：ORM不能创建数据库，必须提前把库创建完成</span></code></pre><h3 id="字段的增删改查"><a href="#字段的增删改查" class="headerlink" title="字段的增删改查"></a>字段的增删改查</h3><pre class="language-python" data-language="python"><code class="language-python"> <span class="token triple-quoted-string string">'''        如果你的表有主键，并且主键名也叫id，那么可以省略不写，自动创建        如果你的主键名不叫id，那么，就需要指定了'''</span><span class="token comment"># 创建一张表出来,必须继承models</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 组合索引，联合索引</span>    <span class="token triple-quoted-string string">'''        如果你的表有主键，并且主键名也叫id，那么可以省略不写，自动创建        如果你的主键名不叫id，那么，就需要指定了    '''</span>    <span class="token comment"># id int primary key auto_increment</span>    <span class="token builtin">id</span> <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># username, max_length必须写</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>  <span class="token comment"># varchar(32)</span>    <span class="token comment"># password, orm支持自定义数据类型</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>  <span class="token comment"># char() </span></code></pre><h3 id="ORM数据的增删改查"><a href="#ORM数据的增删改查" class="headerlink" title="ORM数据的增删改查"></a>ORM数据的增删改查</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 增加数据</span>    <span class="token comment"># sql: insert into t1 ()...</span>    <span class="token comment"># ORM:</span>    <span class="token comment"># 第一种方式</span>    <span class="token comment"># res=models.User.objects.create(username='ly', password=123)</span>    <span class="token triple-quoted-string string">'''        返回值是当前插入的数据对象    '''</span>    <span class="token comment"># print(res.username)</span>    <span class="token comment"># 第二种方式：</span>    <span class="token comment"># obj=models.User(username='ly1', password=123)</span>    <span class="token comment"># obj.save() # 这句话才是真正的操作数据</span>    <span class="token comment"># 修改:第一种方式</span>    <span class="token comment"># sql:update db1 set username = '', password = '' where id=1 and ...</span>    <span class="token comment"># orm:</span>    <span class="token comment"># models.User.objects.filter(id=1).update(username='LY')</span>    <span class="token comment"># models.User.objects.filter(pk=1).update(username='LY')</span>    <span class="token triple-quoted-string string">'''返回值是影响的行数'''</span>    <span class="token comment"># 第二种方式</span>    <span class="token comment"># res = models.User.objects.filter(pk=1).all()[0]</span>    <span class="token comment"># filter里面的条件是and关系</span>    <span class="token comment"># res = models.User.objects.filter(pk=1, username='aaaa11').first()  # [0]</span>    <span class="token comment"># res = models.User.objects.filter(pk=1).first()  # [0]</span>    <span class="token comment"># res = models.User.objects.filter(username='aaaa').filter(password=123).all()  # [0]</span>    <span class="token triple-quoted-string string">'''只要返回值是QuerySet对象，那么，就可以一直点queryset提供的方法'''</span>    <span class="token comment"># print(res) # &lt;QuerySet [&lt;User: User object&gt;]&gt;</span>    <span class="token comment"># print(res.username)</span>    <span class="token comment"># print(res.password)</span>    <span class="token comment"># res.username = 'aaaa'</span>    <span class="token comment"># res.save()</span>    <span class="token comment"># 删除:delete from user where id = 1</span>    models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="ORM创建表关系"><a href="#ORM创建表关系" class="headerlink" title="ORM创建表关系"></a>ORM创建表关系</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># mysql是关系型数据库</span>一对一：<span class="token triple-quoted-string string">'''外键字段建在任何一方都可以，但是，推荐建在使用频率比较高的一张表'''</span>一对多<span class="token triple-quoted-string string">'''外键字段建在多的一方'''</span>多对多<span class="token triple-quoted-string string">'''外键字段不建在任何一张表，而是，建在第三张表中'''</span>eg：图书表    出版社表    作者表    作者详情表        <span class="token triple-quoted-string string">'''    图书和出版社是一对多，图书是多，出版社是一    图书和作者是多对多的关系    作者和作者详情表是一对一    '''</span>        <span class="token comment"># 不常用的数据我们称之为冷数据，</span>    <span class="token comment"># 常用的数据我们称之为热数据</span>    <span class="token comment"># ORM创建表关系</span>    <span class="token comment"># 1. 先创建这张表的基础字段，</span>    <span class="token comment"># 2. 在回头创建外键字段</span><span class="token comment"># 出版社表</span><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''        float        double        decimal(5, 2) 999999.99    '''</span>    <span class="token comment"># decimal(8, 2)</span>    price <span class="token operator">=</span> models<span class="token punctuation">.</span>DecimalField<span class="token punctuation">(</span>max_digits<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> decimal_places<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># publish_id = models.ForeignKey(to='Publish', to_field='id')</span>    publish_id <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>to<span class="token operator">=</span><span class="token string">'Publish'</span><span class="token punctuation">)</span>  <span class="token comment"># 如果关联的是id字段，那么可以省略不写</span>    <span class="token comment"># publish_id = models.ForeignKey(to=Publish)  # 如果关联的是id字段，那么可以省略不写</span>    authors <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>to<span class="token operator">=</span><span class="token string">'Author'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''        authors是一个虚拟字段，不会真正的在book表中创建出来这个字段        这个字段是关联第三张表的    '''</span><span class="token keyword">class</span> <span class="token class-name">Publish</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    addr <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token comment"># 作者表</span><span class="token keyword">class</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>    author_detail <span class="token operator">=</span> models<span class="token punctuation">.</span>OneToOneField<span class="token punctuation">(</span>to<span class="token operator">=</span><span class="token string">'AuthorDetail'</span><span class="token punctuation">)</span><span class="token comment"># 作者详情表</span><span class="token keyword">class</span> <span class="token class-name">AuthorDetail</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    phone <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>   </code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django之ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10分钟搭建MySQL主从同步（基于docker)</title>
      <link href="/2020/06/22/MySQL%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA%EF%BC%88%E5%9F%BA%E4%BA%8Edocker)/"/>
      <url>/2020/06/22/MySQL%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA%EF%BC%88%E5%9F%BA%E4%BA%8Edocker)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>MySQL主从搭建</p><span id="more"></span><p><strong>MySQL主从搭建（基于docker)</strong></p><p>10分钟搭建MySQL主从同步（基于docker)</p><h2 id="一-主从配置原理"><a href="#一-主从配置原理" class="headerlink" title="一 主从配置原理"></a>一 主从配置原理</h2><p>[<img src="https://s2.loli.net/2022/06/22/viHCAlTOaJmwcS8.jpg" alt="image-20191104214516600">]</p><p>mysql主从配置的流程大体如图：</p><p>1）master会将变动记录到二进制日志里面；</p><p>2）master有一个I/O线程将二进制日志发送到slave;</p><ol><li>slave有一个I/O线程把master发送的二进制写入到relay日志里面；</li></ol><p>4）slave有一个SQL线程，按照relay日志处理slave的数据；</p><h2 id="二-操作步骤"><a href="#二-操作步骤" class="headerlink" title="二 操作步骤"></a>二 操作步骤</h2><h3 id="2-1我们准备两台装好mysql的服务器（我在此用docker模拟了两台机器）"><a href="#2-1我们准备两台装好mysql的服务器（我在此用docker模拟了两台机器）" class="headerlink" title="2.1我们准备两台装好mysql的服务器（我在此用docker模拟了两台机器）"></a>2.1我们准备两台装好mysql的服务器（我在此用docker模拟了两台机器）</h3><table><thead><tr><th>环境</th><th>mysql版本</th><th align="right">ip地址:端口号</th></tr></thead><tbody><tr><td>主库（master）</td><td>5.7</td><td align="right">172.16.209.100:33307</td></tr><tr><td>从库（slave）</td><td>5.7</td><td align="right">172.16.209.100:33306</td></tr></tbody></table><p>用docker拉起两个mysql容器，步骤如下（对docker不熟悉的同学可以查看docker快速入门章节）：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 拉取mysql5.7镜像</span>docker pull mysql<span class="token punctuation">:</span><span class="token number">5.7</span><span class="token comment">#在home目录下创建mysql文件夹，下面创建data和conf.d文件夹</span>mkdir <span class="token operator">/</span>home<span class="token operator">/</span>mysqlmkdir <span class="token operator">/</span>home<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>dmkdir <span class="token operator">/</span>home<span class="token operator">/</span>mysql<span class="token operator">/</span>data<span class="token operator">/</span> 创建my<span class="token punctuation">.</span>cnf配置文件touch <span class="token operator">/</span>home<span class="token operator">/</span>mysql<span class="token operator">/</span>my<span class="token punctuation">.</span>cnfmkdir <span class="token operator">/</span>home<span class="token operator">/</span>mysql2mkdir <span class="token operator">/</span>home<span class="token operator">/</span>mysql2<span class="token operator">/</span>conf<span class="token punctuation">.</span>dmkdir <span class="token operator">/</span>home<span class="token operator">/</span>mysql2<span class="token operator">/</span>data<span class="token operator">/</span>touch <span class="token operator">/</span>home<span class="token operator">/</span>mysql2<span class="token operator">/</span>my<span class="token punctuation">.</span>cnfmy<span class="token punctuation">.</span>cnf添加如下内容：<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>user<span class="token operator">=</span>mysqlcharacter<span class="token operator">-</span><span class="token builtin">set</span><span class="token operator">-</span>server<span class="token operator">=</span>utf8default_authentication_plugin<span class="token operator">=</span>mysql_native_passwordsecure_file_priv<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysqlexpire_logs_days<span class="token operator">=</span><span class="token number">7</span>sql_mode<span class="token operator">=</span>STRICT_TRANS_TABLES<span class="token punctuation">,</span>NO_ZERO_IN_DATE<span class="token punctuation">,</span>NO_ZERO_DATE<span class="token punctuation">,</span>ERROR_FOR_DIVISION_BY_ZERO<span class="token punctuation">,</span>NO_ENGINE_SUBSTITUTIONmax_connections<span class="token operator">=</span><span class="token number">1000</span><span class="token comment">##主库----start--- 同一局域网内注意要唯一</span>server<span class="token operator">-</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">100</span>  <span class="token comment">## 开启二进制日志功能，可以随便取（关键）</span>log<span class="token operator">-</span><span class="token builtin">bin</span><span class="token operator">=</span>mysql<span class="token operator">-</span><span class="token builtin">bin</span><span class="token comment">##主库----end--- </span><span class="token comment">##从库----start--- </span><span class="token comment">## 设置server_id,注意要唯一</span>server<span class="token operator">-</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">101</span>  <span class="token comment">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span>log<span class="token operator">-</span><span class="token builtin">bin</span><span class="token operator">=</span>mysql<span class="token operator">-</span>slave<span class="token operator">-</span><span class="token builtin">bin</span>   <span class="token comment">## relay_log配置中继日志</span>relay_log<span class="token operator">=</span>edu<span class="token operator">-</span>mysql<span class="token operator">-</span>relay<span class="token operator">-</span><span class="token builtin">bin</span> <span class="token comment">##从库----end--- </span><span class="token punctuation">[</span>client<span class="token punctuation">]</span>default<span class="token operator">-</span>character<span class="token operator">-</span><span class="token builtin">set</span><span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>default<span class="token operator">-</span>character<span class="token operator">-</span><span class="token builtin">set</span><span class="token operator">=</span>utf8<span class="token comment">#启动主库容器（挂载外部目录，端口映射成33307，密码设置为123456）</span>docker run  <span class="token operator">-</span>di <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>mysql<span class="token operator">/</span>data<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>mysql<span class="token operator">/</span>my<span class="token punctuation">.</span>cnf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>my<span class="token punctuation">.</span>cnf <span class="token operator">-</span>p <span class="token number">33307</span><span class="token punctuation">:</span><span class="token number">3306</span> <span class="token operator">-</span><span class="token operator">-</span>name mysql<span class="token operator">-</span>master <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token number">123456</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span><span class="token comment">#启动从库容器（挂载外部目录，端口映射成33306，密码设置为123456）</span>docker run  <span class="token operator">-</span>di <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>mysql2<span class="token operator">/</span>data<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>mysql2<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>mysql2<span class="token operator">/</span>my<span class="token punctuation">.</span>cnf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>my<span class="token punctuation">.</span>cnf <span class="token operator">-</span>p <span class="token number">33306</span><span class="token punctuation">:</span><span class="token number">3306</span> <span class="token operator">-</span><span class="token operator">-</span>name mysql<span class="token operator">-</span>slave <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token number">123456</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span><span class="token comment"># 进去授权</span>grant <span class="token builtin">all</span> privileges on <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> to <span class="token string">'root'</span>@<span class="token string">'%'</span> identified by <span class="token string">'Lqz1234?'</span><span class="token punctuation">;</span></code></pre><h2 id="2-2-远程连接入主库和从库"><a href="#2-2-远程连接入主库和从库" class="headerlink" title="2.2 远程连接入主库和从库"></a>2.2 远程连接入主库和从库</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#连接主库</span>mysql <span class="token operator">-</span>h <span class="token number">172.16</span><span class="token number">.209</span><span class="token number">.100</span> <span class="token operator">-</span>P <span class="token number">33307</span> <span class="token operator">-</span>u root <span class="token operator">-</span>p123456<span class="token comment">#在主库创建用户并授权</span><span class="token comment">##创建test用户</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'test'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token comment">##授权用户</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'test'</span><span class="token variable">@'%'</span> <span class="token punctuation">;</span><span class="token comment">###刷新权限</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span class="token comment">#查看主服务器状态(显示如下图)</span><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span> </code></pre><p><img src="https://s2.loli.net/2022/06/22/BVne9wPk7KYqcfS.jpg" alt="image-20191105085514111"></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#连接从库</span>mysql <span class="token operator">-</span>h <span class="token number">172.16</span><span class="token number">.209</span><span class="token number">.100</span> <span class="token operator">-</span>P <span class="token number">33306</span> <span class="token operator">-</span>u root <span class="token operator">-</span>p123456<span class="token comment">#配置详解</span><span class="token comment">/*change master to master_host='MySQL主服务器IP地址', master_user='之前在MySQL主服务器上面创建的用户名'， master_password='之前创建的密码', master_log_file='MySQL主服务器状态中的二进制文件名', master_log_pos='MySQL主服务器状态中的position值';*/</span><span class="token comment">#命令如下</span>change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>master_port<span class="token operator">=</span><span class="token number">33307</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000003'</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">#启用从库</span><span class="token keyword">start</span> slave<span class="token punctuation">;</span><span class="token comment">#查看从库状态（如下图）</span><span class="token keyword">show</span> slave <span class="token keyword">status</span>\G<span class="token punctuation">;</span></code></pre><p><img src="https://s2.loli.net/2022/06/22/zqBH58lherxfnPm.jpg" alt="image-20191105090050611"></p><h2 id="2-3-测试主从同步"><a href="#2-3-测试主从同步" class="headerlink" title="2.3 测试主从同步"></a>2.3 测试主从同步</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#在主库上创建数据库test1</span><span class="token keyword">create</span> <span class="token keyword">database</span> test1<span class="token punctuation">;</span><span class="token keyword">use</span> test1<span class="token punctuation">;</span><span class="token comment">#创建表</span><span class="token keyword">create</span> <span class="token keyword">table</span> tom <span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>age <span class="token keyword">tinyint</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#插入数据</span><span class="token keyword">insert</span> tom <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'yyy'</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'zzz'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#在从库上查看是否同步成功</span><span class="token comment">#查看数据库</span><span class="token keyword">show</span> <span class="token keyword">database</span><span class="token punctuation">;</span><span class="token keyword">use</span> test1<span class="token punctuation">;</span><span class="token comment">#查看表</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">#查看数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test1<span class="token punctuation">;</span></code></pre><p>可以看到大功告成</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL主从 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django三板斧</title>
      <link href="/2020/06/21/Django%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/2020/06/21/Django%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>django</p><span id="more"></span><h3 id="django三板斧"><a href="#django三板斧" class="headerlink" title="django三板斧"></a>django三板斧</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># django自动重启的现象叫‘热更新’</span><span class="token comment"># 如果setting.py文件中DEBUG = False，则必须在ALLOWED_HOSTS = []中填写对应ip地址或者*号</span><span class="token number">1.</span> HttpResponse<span class="token number">2.</span> render<span class="token number">3.</span> redirect<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>    <span class="token comment"># 暂且记忆返回值是字符串类型</span>    <span class="token comment"># return HttpResponse('hello django!')  # 返回给浏览器了</span>    ctime <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %X'</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token number">1</span>    b <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># return render(request, 'index.html', {'ctime11111':ctime, 'a':1, 'b':2})</span>    <span class="token comment"># return render(request, 'index.html', locals())</span>    <span class="token comment"># return redirect('http://www.baidu.com')</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/admin/'</span><span class="token punctuation">)</span>  <span class="token comment"># ip+port/admin 括号内可跟链接地址，直接跳转</span></code></pre><h3 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h3><pre class="language-python" data-language="python"><code class="language-python">什么是静态文件css<span class="token punctuation">,</span> js<span class="token punctuation">,</span> jq<span class="token punctuation">,</span> bootstrap<span class="token punctuation">,</span> img<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> eg<span class="token punctuation">:</span>    以登录功能为例 <span class="token comment"># 静态文件的存储路径一般是static，默认是没有这个文件夹的，所以，需要我们自己手动创建出来这个文件夹</span><span class="token comment"># 在static文件夹中还可以继续根据不同的功能进行划分</span>jscsslibimg<span class="token comment"># http://127.0.0.1:8000/static/css/bootstrap.min.css不能访问是因为后盾没有开放可访问的路径</span><span class="token punctuation">{</span><span class="token comment"># 动态引入 #}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> load static <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"{% static 'css/bootstrap-theme.min.css'%}"</span><span class="token operator">&gt;</span>STATIC_URL <span class="token operator">=</span> <span class="token string">'/aaaaa/'</span>STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 这样一配置完成，静态路径的根就是static</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'static1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 这样一配置完成，静态路径的根就是static</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'static2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 这样一配置完成，静态路径的根就是static</span><span class="token punctuation">]</span></code></pre><h3 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span><span class="token triple-quoted-string string">'''1. 什么都不写，提交到当前页面2. 全写：https://passport.baidu.com/v2/api/?login3. 只写后缀/login/  =&gt; 自动补全ip和端口http://127.0.0.1:8000/login/'''</span>面试题：get和post的区别？http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>login<span class="token operator">/</span>?a<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>c<span class="token operator">=</span><span class="token number">3</span>    <span class="token triple-quoted-string string">'''    get请求：    1. get没有请求体    2. 对数据大小的限制是4KB    3. 不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息    post请求：    1. post有请求体    2. 理论上对数据大小没有限制    3. 相对安全    '''</span>         <span class="token triple-quoted-string string">'''MySQL中可能会出现的安全问题：SQL注入前端当中可能会出现的安全问题：xss攻击django中会出现的安全问题：csrf跨站请求'''</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1. 如何判断请求方式？</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>  <span class="token comment"># &lt;WSGIRequest: GET '/login/'&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>method<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># GET &lt;WSGIRequest: GET '/login/'&gt;</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment">#  2. 如何获取post请求方式的数据？</span>        <span class="token comment"># print(request.POST) # QueryDict: {'user': ['ly'], 'password': ['123']}&gt;</span>        <span class="token comment"># print(request.POST.get('username')) # ly</span>        <span class="token comment"># # get只能拿最后一个值</span>        <span class="token comment"># print(request.POST.get('hobby')) # ly</span>        <span class="token comment"># print(request.POST.getlist('hobby')) # 拿到所有的值</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'ly'</span> <span class="token keyword">and</span> password <span class="token operator">==</span><span class="token string">'123'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'密码错误'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'login.html'</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span></code></pre><h3 id="django连接mysql"><a href="#django连接mysql" class="headerlink" title="django连接mysql"></a>django连接mysql</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 连接mysql的配置</span>  <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'db8_3'</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span><span class="token string">'123'</span><span class="token punctuation">,</span>        <span class="token string">'CHARSET'</span><span class="token punctuation">:</span><span class="token string">'utf8'</span>    <span class="token punctuation">}</span>        <span class="token comment"># django默认的操作mysql的模块是MySQLdb</span><span class="token triple-quoted-string string">'''在python3.6版本以下，需要加入下面两句话        需要先安装pymysql        pip3 install pymysql        import pymysql        pymysql.install_as_MySQLdb()'''</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Django</title>
      <link href="/2020/06/20/%E5%88%9D%E8%AF%86Django/"/>
      <url>/2020/06/20/%E5%88%9D%E8%AF%86Django/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Django新世界</p><span id="more"></span><h3 id="web应用概念"><a href="#web应用概念" class="headerlink" title="web应用概念"></a>web应用概念</h3><pre class="language-python" data-language="python"><code class="language-python">http的默认端口号：<span class="token number">80</span>https的默认端口号：<span class="token number">443</span><span class="token number">1.</span> web应用是什么？通过浏览器访问的应用都是<span class="token number">2.</span> 软件开发模式：服务端需要具备的特征：<span class="token number">24</span>小时对外提供服务C<span class="token operator">/</span>S：client<span class="token punctuation">:</span> 客户端， server<span class="token punctuation">:</span> 服务端    B<span class="token operator">/</span>S：browser<span class="token punctuation">:</span> 浏览器，server：服务端    <span class="token comment"># 本质上B/S架构也是C/S架构</span><span class="token number">3.</span> Web应用程序的优点<span class="token number">1.</span> 只需要一个浏览器    <span class="token number">2.</span> 节省资源    <span class="token number">3.</span> 客户端不需要主动更新，服务端更新即可<span class="token number">4.</span> Web应用程序的缺点<span class="token number">1.</span> 一旦服务端出现问题，客户端立马受影响    <span class="token number">2.</span> 兼容性问题    <span class="token triple-quoted-string string">'''    web框架：就是在固定的位置书写固定的代码    '''</span>    python中的三大主流框架：    <span class="token number">1.</span> Django框架：        大而全，类似于航空母舰        <span class="token number">2.</span> flask框架：        小而精，依赖于第三方模块         <span class="token number">3.</span> tornado框架：        异步高性能框架    </code></pre><h3 id="MVC和MTV模式"><a href="#MVC和MTV模式" class="headerlink" title="MVC和MTV模式"></a>MVC和MTV模式</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1.</span> MVC<span class="token punctuation">:</span>    M<span class="token punctuation">:</span> model<span class="token punctuation">(</span>跟数据打交道的<span class="token punctuation">)</span>        V<span class="token punctuation">:</span> View<span class="token punctuation">(</span>视图， 页面<span class="token punctuation">)</span>        C<span class="token punctuation">:</span> controller<span class="token punctuation">(</span>控制器，主要写逻辑的<span class="token punctuation">)</span>        S<span class="token punctuation">:</span>service <span class="token punctuation">(</span>服务层<span class="token punctuation">)</span><span class="token number">2.</span> MTV<span class="token punctuation">:</span>    M<span class="token punctuation">:</span> model<span class="token punctuation">(</span>模型层：跟数据相关的<span class="token punctuation">)</span>        T<span class="token punctuation">:</span>template<span class="token punctuation">(</span>模板：html页面<span class="token punctuation">)</span>          V：view<span class="token punctuation">(</span>主要写逻辑的<span class="token punctuation">)</span></code></pre><h3 id="django下载与安装"><a href="#django下载与安装" class="headerlink" title="django下载与安装"></a>django下载与安装</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1.</span> django的版本问题：django1<span class="token punctuation">.</span>x<span class="token punctuation">:</span> 老项目再用    django2<span class="token punctuation">.</span>x：新项目再用    django3<span class="token punctuation">.</span>x：刚出来的     <span class="token comment"># 我们学习使用django1.x</span><span class="token comment"># 安装django</span>pip3 install django <span class="token punctuation">(</span>最新版本<span class="token punctuation">)</span>pip3 install django<span class="token operator">==</span><span class="token number">1.1</span><span class="token number">.29</span>如何验证django是否安装成功？<span class="token comment"># 在cmd中， 输入django-admin，如果有输出信息，就代表安装成功</span>    </code></pre><h3 id="创建django项目"><a href="#创建django项目" class="headerlink" title="创建django项目"></a>创建django项目</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''你可以提前切换到项目要保存的位置'''</span><span class="token number">1.</span> 命令行创建django<span class="token operator">-</span>admin startproject 项目名<span class="token number">2.</span> pycharm创建    <span class="token number">3.</span> 命令行创建和pycharm创建的区别<span class="token punctuation">:</span>     <span class="token number">1.</span> pycharm创建：        自动生成templates文件夹        settings<span class="token punctuation">.</span>py文件：        <span class="token triple-quoted-string string">'''        TEMPLATES = [                            {                                'BACKEND': 'django.template.backends.django.DjangoTemplates',                                'DIRS': [os.path.join(BASE_DIR, 'templates')]                                                                }        '''</span>     <span class="token number">2.</span> 命令行创建：    没有templates文件夹        settings<span class="token punctuation">.</span>py文件：        <span class="token triple-quoted-string string">'''        TEMPLATES = [    {                            'BACKEND': 'django.template.backends.django.DjangoTemplates',                            'DIRS': [],                            }             ]        '''</span></code></pre><h3 id="启动django项目"><a href="#启动django项目" class="headerlink" title="启动django项目"></a>启动django项目</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''前提：先切换到manage.py所在的文件夹下面'''</span><span class="token number">1.</span> 命令行启动python3 manage<span class="token punctuation">.</span>py runserver    python3 manage<span class="token punctuation">.</span>py runserver <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8080</span>    python3 manage<span class="token punctuation">.</span>py runserver <span class="token number">8080</span>        <span class="token triple-quoted-string string">'''django的默认端口号：8000'''</span><span class="token number">2.</span> pycharm启动点击pycharm绿色按钮</code></pre><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 应用：application  app</span>我们刚刚创建的项目就类似于是一所大学，而创建的应用就类似于大学里面的二级学院eg：用户模块  user    订单模块  order    收货地址管理 <span class="token punctuation">:</span>address    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    如何创建应用？<span class="token number">1.</span> 命令行创建    <span class="token comment"># python manage.py startapp 应用名</span>        <span class="token triple-quoted-string string">'''        应用名：最好见名知意，就命名为：app01, app02...        '''</span>        <span class="token comment"># 一个django项目至少要有一个应用</span>    <span class="token number">2.</span> pycharm创建     Tools <span class="token operator">=</span><span class="token operator">&gt;</span> run manage<span class="token punctuation">.</span>py task    <span class="token number">3.</span> 应用创建完成之后，第一件事去配置文件中注册应用    <span class="token comment">###################################################</span>        INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>            <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>            <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>            <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>            <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>            <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>            <span class="token string">'app01'</span><span class="token punctuation">,</span>            <span class="token string">'app02'</span>    <span class="token punctuation">]</span>    <span class="token comment">###################################################</span></code></pre><h3 id="主要文件介绍"><a href="#主要文件介绍" class="headerlink" title="主要文件介绍"></a>主要文件介绍</h3><pre class="language-python" data-language="python"><code class="language-python">mysite1  <span class="token comment"># 项目名</span>    app01  <span class="token comment"># 应用名</span>        migrations <span class="token comment"># 迁移数据库的时候，会把迁移记录保存到这里来</span>        __init__<span class="token punctuation">.</span>py        admin<span class="token punctuation">.</span>py   <span class="token comment"># django自带的后台管理系统</span>        apps<span class="token punctuation">.</span>py    <span class="token comment"># 忽略</span>        models<span class="token punctuation">.</span>py  <span class="token comment"># 模型层，以后跟数据库相关的都在这个里面</span>        tests<span class="token punctuation">.</span>py   <span class="token comment"># 测试脚本</span>        views<span class="token punctuation">.</span>py   <span class="token comment"># view层，主要用来写逻辑的</span>mysite1    __init__<span class="token punctuation">.</span>py    settings<span class="token punctuation">.</span>py   <span class="token comment"># 整个django项目的全局配置文件</span>    urls<span class="token punctuation">.</span>py       <span class="token comment"># 路由层，写的是路径与函数的对应关系</span>    wsgi<span class="token punctuation">.</span>py  <span class="token comment"># wsgiref服务器， WSGI协议，uwsgi服务器</span>templates         <span class="token comment"># 写html页面的地方</span>db<span class="token punctuation">.</span>sqlite3        <span class="token comment"># django自带的小型数据库， mysql，oracle</span>manage<span class="token punctuation">.</span>py  <span class="token comment"># 启动文件，入口文件</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
