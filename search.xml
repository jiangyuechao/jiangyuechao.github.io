<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/06/11/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2022/06/11/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><h3 id="一、深浅copy"><a href="#一、深浅copy" class="headerlink" title="一、深浅copy"></a><strong>一、深浅copy</strong></h3><p><strong>1、赋值运算</strong></p><p><img src="https://s2.loli.net/2022/06/11/mkIqjbKXiYtL4a8.png" alt="image-20220611151019511"></p><p><strong>注意</strong>：l2 = l1是一个指向，是赋值，和深浅copy无关</p><p>2、浅<strong>copy</strong></p><p>其实列表是一个个的槽位，每一个槽位存储的是该对象的内存地址</p><p><img src="https://s2.loli.net/2022/06/11/B8zqfNFJuDi3XVc.png" alt="image-20220611151229683"></p><p><img src="https://s2.loli.net/2022/06/11/XwmLQiN3YHOBUpy.png" alt="image-20220611151251385"></p><p><strong>小结</strong>：</p><p>浅copy：会在内存中新开辟一个空间，存放这个copy的列表，但是列表里面的内容还是沿用之前对象的内存地址</p><p>3、深<strong>copy</strong></p><p><img src="https://s2.loli.net/2022/06/11/JDp1vHY6wxAIURq.png" alt="image-20220611151433932"></p><p><img src="https://s2.loli.net/2022/06/11/YKXF9luhUOfDaH7.png" alt="image-20220611151450570"></p><p><strong>小结</strong>：</p><p>深copy：会在内存中开辟新空间，将原列表以及列表里面的可变数据类型重新创建一份，不可变数据类型则沿用之前的。</p><p><strong>为什么Python默认的拷贝方式是浅拷贝</strong>？</p><p>时间角度：浅拷贝花费时间更少。</p><p>空间角度：浅拷贝花费内存更少。</p><p>效率角度：浅拷贝只拷贝顶层数据，一般情况下比深拷贝效率高。</p><p><strong>总结</strong>：</p><p>不可变对象在赋值时会开辟新空间。</p><p>可变对象在赋值时，修改一个的值，另一个也会发生改变。</p><p>深、浅拷贝对不可变对象拷贝时，不开辟新空间，相当于赋值操作。</p><p>浅拷贝在拷贝时，只拷贝第一层中的引用，如果元素是可变对象，并且被修改，那么拷贝的对象也会发生变化。</p><p>深拷贝在拷贝时，会逐层进行拷贝，直到所有的引用都是不可变对象为止。</p><p>Python 有多种方式实现浅拷贝，copy模块的copy 函数 ，对象的 copy 函数 ，工厂方法，切片等。</p><p>大多数情况下，编写程序时，都是使用浅拷贝，除非有特定的需求。</p><p>浅拷贝的优点：拷贝速度快，占用空间少，拷贝效率高 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/10/Redis%E7%BC%93%E5%AD%98/"/>
      <url>/2020/08/10/Redis%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<hr><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">redis缓存穿透</span><br><span class="line"><span class="code">    你所要查询的key并不存在于redis缓存中，这时又有大连的请求查询这个key，就会使得数据库负载过大，就像是穿过了缓存直接击中数据库，很容易把数据库给打挂了</span></span><br><span class="line"><span class="code">    解决方案：</span></span><br><span class="line"><span class="code">        第一种方法呢就是数据库查询不到的key直接保存在redis中，再次查询数据库的时候，缓存层直接返回空</span></span><br><span class="line"><span class="code">        第二种方法就涉及到了一个叫布隆过滤器的东西，本质上是一个二进制数组，以空间换时间，以低内存空间解决缓存穿透的问题，将所有存在的key提前存入布隆过滤器，在请求进入缓存之前，布隆过滤器进行拦截，若不存在直接返回空</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">redis缓存击穿</span></span><br><span class="line"><span class="code">    某一个热点的key失效了，大量的请求直接到达数据库</span></span><br><span class="line"><span class="code">    解决方法：</span></span><br><span class="line"><span class="code">        第一种设置永不过期</span></span><br><span class="line"><span class="code">        第二种就是加互斥锁，互斥锁就是同一时刻只有一个线程能够进行访问，加了互斥锁之后第一个访问完后，缓存中的数据将会被重建，之后直接从缓存中取就可以了</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">redis缓存雪崩</span></span><br><span class="line"><span class="code">    可能是redis宕机了，也可能是有很多key设置了统一过期时间</span></span><br><span class="line"><span class="code">    解决方案：</span></span><br><span class="line"><span class="code">        第一种构建高可用的Redis缓存：搭建Redis集群，提高Redis的容灾性</span></span><br><span class="line"><span class="code">        第二种使用熔断机制：对存储层增加限流措施，当请求超出限制时，对其提供降级措施，例如：当请求到达一定阈值，直接返回“系统繁忙“等提示，防止过多的请求到达数据库上，这样可以保证一部分用户还可以使用，其他用户多刷新几次也能得到结果</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
