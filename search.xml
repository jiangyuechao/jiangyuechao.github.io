<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>drf面试题</title>
      <link href="/2021/09/23/drf%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2021/09/23/drf%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="什么是restful规范"><a href="#什么是restful规范" class="headerlink" title="什么是restful规范"></a>什么是restful规范</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RESTful是一种定义Web API接口的设计风格，尤其适用于前后端分离的应用模式中。 </span><br><span class="line">数据的安全保障：url链接一般都采用https协议进行传输(数据交互中安全性) 接口特性表现：一看就知道是个api接口，用api关键字标识接口url：https://api.baidu.com </span><br><span class="line">多数据版本共存：在url链接中标识数据版本https://api.baidu.com/v1 </span><br><span class="line">数据即是资源，均使用名词（可复数），尽量不要出现动词 资源操作由请求方式决定（method）：提供请求方式来标识增删改查动作 过滤，通过在url上传参的形式传递搜索条件:例如url后面?=搜索，分页，游标</span><br></pre></td></tr></tbody></table></figure><h3 id="查找模板的顺序"><a href="#查找模板的顺序" class="headerlink" title="查找模板的顺序"></a>查找模板的顺序</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优先查找根目录下：template</span><br><span class="line">根据app的注册顺序去每个app的template目录中查找</span><br></pre></td></tr></tbody></table></figure><h3 id="drf组件提供的功能"><a href="#drf组件提供的功能" class="headerlink" title="drf组件提供的功能"></a>drf组件提供的功能</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、免除csrf认证</span><br><span class="line">2、视图（1.APIView、2.ListAPIview、3.ListModelMixin）</span><br><span class="line">3、权限</span><br><span class="line">4、认证</span><br><span class="line">5、解析器</span><br><span class="line">6、筛选器</span><br><span class="line">7、分页</span><br><span class="line">8、序列化和数据校验：</span><br><span class="line"><span class="code">    可以对queryset进行序列化，也可以对用户提交的数据进行校验</span></span><br><span class="line"><span class="code">    source：无需加括号，在源码内部会去判断是否可以执行，可执行自动加括号</span></span><br><span class="line"><span class="code">    SerializerMethodField定义钩子方法</span></span><br><span class="line"><span class="code">9、渲染器：把json数据渲染到drf自己的页面上</span></span><br></pre></td></tr></tbody></table></figure><h3 id="drf继承过哪些视图类，之间的区别"><a href="#drf继承过哪些视图类，之间的区别" class="headerlink" title="drf继承过哪些视图类，之间的区别"></a>drf继承过哪些视图类，之间的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、APIview</span><br><span class="line"><span class="code">    遵循了CBV模式，功能多但是需要自己写的代码也多</span></span><br><span class="line"><span class="code">    提供了免除csrf认证，版本处理、认证、权限、节流、解析器、筛选器、分页、序列化、渲染器</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">2、ListAPIView,RetrieveAPIView,CreateAPIView,UpdateAPIView,DestroyAPIView</span><br><span class="line"><span class="code">    第二种则在第一种的基础上，封装了许多我们需要自己的写的代码，许多功能的实现只需要给专属的变量名赋值就可以实现该功能</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">3、GenericViewSet、ListModelMixin,RetrieveModelMixin,CreateModelMixin,UpdateModelMixin,DestroyModelMixin</span></span><br><span class="line"><span class="code">    第三种则重构了APIView中的as_view()方法，结合请求方法和不同Mixin类的方法名从而进行执行不同的功能。与前面两种最主要的区别是url路由中as_view()方法中需要传值。</span></span><br><span class="line"><span class="code">     目前使用的主要目的是把第二种的bug(查询全部数据的功能和查询单个数据的功能无法在一个类中实现)实现在一个类中</span></span><br></pre></td></tr></tbody></table></figure><h3 id="GenericAPIView视图类的作用"><a href="#GenericAPIView视图类的作用" class="headerlink" title="GenericAPIView视图类的作用"></a>GenericAPIView视图类的作用</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作用：GenericAPIView主要为drf内部帮助我们提供增删查改的类，提供了执行流程和功能，我们在使用drf内置类做增删查改时，就可以通过自定义静态字段（类变量）或重写方法（get<span class="emphasis">_queryset、get_</span>serializer<span class="emphasis">_class）来做一些更高级的定制</span></span><br></pre></td></tr></tbody></table></figure><h3 id="drf版本的实现过程"><a href="#drf版本的实现过程" class="headerlink" title="drf版本的实现过程"></a>drf版本的实现过程</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">drf自带的版本类"DEFAULT<span class="emphasis">_VERSIONING_</span>CLASS": "rest<span class="emphasis">_framework.versioning.URLPathVersioning",</span></span><br><span class="line"><span class="emphasis">允许出现的版本"ALLOWED_</span>VERSIONS": ['v1', 'v2'],</span><br><span class="line">如果没有传版本，可以使用默认版本</span><br><span class="line"><span class="code">     default_version = api_settings.DEFAULT_VERSION</span></span><br><span class="line"><span class="code">设置url中获取版本的变量，默认是version</span></span><br><span class="line"><span class="code">     version_param = api_settings.VERSION_PARAM</span></span><br><span class="line"><span class="code">     </span></span><br><span class="line"><span class="code">过程：</span></span><br><span class="line"><span class="code">    当前端传来请求，执行了as_view()方法，如果设置了全局版本或者进入了设置了版本的功能函数，则会先执行APIview类中dispatch方法，之后再执行initial方法，然后进入self.determine_version方法，里面会先判断是否有versioning_class，如果没有就返回(None,None)，代表没有版本，有则执行versioning_class(URLPathVersioning)类中的determine_version方法，他会返回版本，里面会判断，如果获取到version为空则返回默认版本，并且还要判断是否存在允许出现的版本列表中，返回版本后再把版本号和版本分类分别赋值给request.version和request.versioning_scheme</span></span><br></pre></td></tr></tbody></table></figure><h3 id="drf组件认证的实现过程"><a href="#drf组件认证的实现过程" class="headerlink" title="drf组件认证的实现过程"></a>drf组件认证的实现过程</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当用户进行登录的时候，运行了登录类的as<span class="emphasis">_view()方法，</span></span><br><span class="line"><span class="emphasis"> 1、进入了APIView类的dispatch方法</span></span><br><span class="line"><span class="emphasis"> 2、执行了self.initialize_</span>request这个方法，是重定义request，并且得到了自己定义的认证类对象</span><br><span class="line"> 3、执行self.initial方法中的self.perform<span class="emphasis">_authentication，里面运行了user方法</span></span><br><span class="line"><span class="emphasis"> 4、再执行了user方法里面的self._</span>authenticate()方法</span><br><span class="line"> 5、然后执行了自己定义的类中的authenticate方法，自己定义的类继承了BaseAuthentication类，里面有  authenticate方法，如果自己定义的类中没有authenticate方法会报错。</span><br><span class="line"> 6、把从authenticate方法得到的user和auth赋值给user和auth方法</span><br><span class="line"> 7、这两个方法把user和auth的值赋值给了request.user：是登录用户的对象,request.auth：是认证的信息字典</span><br></pre></td></tr></tbody></table></figure><h3 id="drf组件权限的实现过程？"><a href="#drf组件权限的实现过程？" class="headerlink" title="drf组件权限的实现过程？"></a>drf组件权限的实现过程？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当用户执行一个业务的时候，运行了as<span class="emphasis">_view方法</span></span><br><span class="line"><span class="emphasis">1、进入了APIView类的dispatch方法</span></span><br><span class="line"><span class="emphasis">2、进入self.initial方法中的self.check_</span>permissions(request)方法</span><br><span class="line">3、里面执行了for循环，把每个权限类实例化对象，</span><br><span class="line">4、执行自己定义的权限类里面的has<span class="emphasis">_permission方法，里面会判断request.user是否存在</span></span><br><span class="line"><span class="emphasis">5、不存在就返回False，存在就返回True</span></span><br><span class="line"><span class="emphasis">6、之后执行self.permission_</span>denied报错方法，返回的是False就报错，可以自定义报错信息，在has<span class="emphasis">_permission方法中写message = {"status": False, "error": "登录成功之后才能评论"}，就实现了自定义报错</span></span><br><span class="line"><span class="emphasis">7、如果返回的是True就让他进入功能</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django-drf面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask面试题</title>
      <link href="/2020/11/24/flask%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/11/24/flask%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="如何改变Flask的默认地址和端口"><a href="#如何改变Flask的默认地址和端口" class="headerlink" title="如何改变Flask的默认地址和端口"></a>如何改变Flask的默认地址和端口</h3><p>在应用程序上调用run方法时，可以通过将修改的值传递给主机和端口参数来更改Flask的默认主机和端口。</p><h3 id="使用Flask框架有什么好处"><a href="#使用Flask框架有什么好处" class="headerlink" title="使用Flask框架有什么好处"></a>使用Flask框架有什么好处</h3><p>1、 它具有内置的开发服务器。<br>2、 它具有大量的第三方扩展。<br>3、 它具有一个很小的API，并且可以由Web开发人员快速学习。<br>4、 它符合WSGI。<br>5、 它支持Unicode。</p><h3 id="SQLite数据库是否内置Flask"><a href="#SQLite数据库是否内置Flask" class="headerlink" title="SQLite数据库是否内置Flask"></a>SQLite数据库是否内置Flask</h3><p>1、SQLite是Python内置的。<br>2、要在Flask中使用数据库，我们不需要安装任何其他的Flask-Extension。<br>3、在视图内部，我们可以导入SQLite并编写SQL查询以与数据库进行交互。<br>4、Flask开发人员通常使用Flask-SQLAlchemy，它消除了编写复杂SQL查询的需要，并且支持与SQLite数据库进行交互的ORM。</p><h3 id="Flask框架中的模板引擎是什么意思"><a href="#Flask框架中的模板引擎是什么意思" class="headerlink" title="Flask框架中的模板引擎是什么意思"></a>Flask框架中的模板引擎是什么意思</h3><p>1、模板是一个包含两种类型的数据的文件，即静态和动态，在运行期间填充模板中的动态数据。<br>2、Flask利用Jinja2模板引擎，使开发人员可以使用带有占位符的HTML模板来创建动态数据。<br>3、通过使用Flask的render_template方法以及所需的参数和值，可以在运行时填充这些占位符。</p><h3 id="Django和Flask有什么区别？为什么要选择Flask"><a href="#Django和Flask有什么区别？为什么要选择Flask" class="headerlink" title="Django和Flask有什么区别？为什么要选择Flask"></a>Django和Flask有什么区别？为什么要选择Flask</h3><p>1、Django是一个使用Python编程语言创建的Web开发框架。<br>2、它是功能齐全的Web应用程序框架，具有许多内置功能，例如Admin后端和具有迁移功能的ORM。<br>3、它创建时间早，更成熟。<br>4、Flask适用于快速开发用例。<br>5、Flask更适合开发不需要大型代码库的轻量级Web应用程序。它易于开发微服务或无服务器应用程序。<br>5、与Django相比，Flask简单易学且API更少。<br>6、随着行业追随将微服务作为容器的一部分的趋势，将Flask保留在您的Web开发工具包中很实用</p><h3 id="Flask中的g对象是什么？它与会话对象有何不同"><a href="#Flask中的g对象是什么？它与会话对象有何不同" class="headerlink" title="Flask中的g对象是什么？它与会话对象有何不同"></a>Flask中的g对象是什么？它与会话对象有何不同</h3><p>1、Flask的g对象用作全局命名空间，用于在应用程序上下文中保存任何数据。<br>2、g对象不适用于在请求之间存储数据。从某种意义上说，字母g代表global。<br>3、在某些情况下，当您需要在应用程序上下文中保留全局变量，而不是创建全局变量时，最好使用g对象，因为Flask中的每个请求都有一个单独的g对象。<br>4、Flask的g对象使我们免于意外修改自定义全局变量。</p><h3 id="您可以通过哪些方式连接Flask中的数据库"><a href="#您可以通过哪些方式连接Flask中的数据库" class="headerlink" title="您可以通过哪些方式连接Flask中的数据库"></a>您可以通过哪些方式连接Flask中的数据库</h3><p>1、Flask可用于大多数RDB模式，例如PostgreSQL，SQLite和MySQL。<br>2、要连接数据库，我们必须使用Flask-SQLAlchemy扩展。它使开发过程中的数据库交互和管理变得容易，而无需编写原始SQL查询。<br>3、原始SQL查询容易受到SQL注入攻击。对于使用NoSQL数据存储（例如MongoDB），我们可以使用Flask-MongoEngine扩展</p><h3 id="Flask蓝图的作用"><a href="#Flask蓝图的作用" class="headerlink" title="Flask蓝图的作用"></a>Flask蓝图的作用</h3><p>蓝图Blueprint实现模块化的应用<br>book_bp = Blueprint(‘book’, name）创建蓝图对象  </p><p>蓝图中使用路由@book_bp.route(‘url’)<br>在另一.py文件里导入和注册蓝图   </p><p>from book import book_bp<br>app.register_blueprint(book_bp)</p><p>作用:<br>  1、将不同的功能模块化<br>  2、构建大型应用<br>  3、优化项目结构<br>  4、增强可读性,易于维护（跟Django的view功能相似）</p><h3 id="Flask框架默认session处理机制"><a href="#Flask框架默认session处理机制" class="headerlink" title="Flask框架默认session处理机制"></a>Flask框架默认session处理机制</h3><p>1、Flask的默认session利用了Werkzeug的SecureCookie，把信息做序列化(pickle)后编码(base64)，放到cookie里了。<br>2、过期时间是通过cookie的过期时间实现的。<br>3、为了防止cookie内容被篡改，session会自动打上一个叫session的hash串，这个串是经过session内容、SECRET_KEY计算出来的，看得出，这种设计虽然不能保证session里的内容不泄露，但至少防止了不被篡改</p><h3 id="列举HTTP请求中的状态码"><a href="#列举HTTP请求中的状态码" class="headerlink" title="列举HTTP请求中的状态码"></a>列举HTTP请求中的状态码</h3><p>404 请求的url地址不存在<br>503 访问限制有权限<br>200 访问成功<br>302 重定向</p><p>1xx —— 元数据<br>2xx —— 正确的响应<br>3xx —— 重定向<br>4xx —— 客户端错误<br>5xx —— 服务端错误<br>100 Continue。客户端应当继续发送请求。<br>200 OK。请求已成功,请求所希望的响应头或数据体将随此响应返回。<br>201 Created。请求成功,并且服务器创建了新的资源。<br>301 Moved Permanently。请求的网页已永久移动到新位置。 服务器返回此响应(对GET或HEAD请求的响应)时,会自动将请求者转到新位置。</p><p>302 Found。服务器目前从不同位置的网页响应请求,但请求者应继续使用原有位置来进行以后的请求。<br>400 Bad Request。服务器不理解请求的语法。<br>401 Unauthorized。请求要求身份验证。对于需要登录的网页,服务器可能返回此响应。<br>403 Forbidden。服务器拒绝请求。<br>404 Not Found。服务器找不到请求的网页。<br>500 Internal Server Error。服务器遇到错误,无法完成请求。</p><h3 id="Flask-WTF是什么？有什么特点？"><a href="#Flask-WTF是什么？有什么特点？" class="headerlink" title="Flask-WTF是什么？有什么特点？"></a>Flask-WTF是什么？有什么特点？</h3><p>1、Flask-wtf是一个用于表单处理,校验并提供csrf验证的功能的扩展库<br>2、Flask-wtf能把正表单免受CSRF&lt;跨站请求伪造&gt;的攻击<br>3、Flask-WTF 提供 FileField 来处理文件上传，它在表单提交后，自动从 flask.request.files 中抽取数据。FileField 的 data 属性是一个 </p><h3 id="SQLAlchemy如何执行原生SQL"><a href="#SQLAlchemy如何执行原生SQL" class="headerlink" title="SQLAlchemy如何执行原生SQL"></a>SQLAlchemy如何执行原生SQL</h3><p>两种SQLAlchemy可以执行原生sql的方式<br>第一种是通过session(会话)对象执行execute方法</p><p>session = scoped_session(SessionFactory)<br>session.execute(‘insert users(name) values(:value)’, params={‘value’: ‘thanlon’})</p><p>第二种是通过cursor(游标)对象执行execute方法。</p><p>conn = engine.raw_connection()<br>cursor = conn.cursor()<br>cursor.execute(‘select * from users’)</p><h3 id="DBUtils模块的作用"><a href="#DBUtils模块的作用" class="headerlink" title="DBUtils模块的作用"></a>DBUtils模块的作用</h3><p>作用:<br>    DBUtils模块的作用是实现数据库连接池，是为了解决“多线程情况下请求比较多时性能降低”的问题</p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>paramiko模块</title>
      <link href="/2020/10/03/paramiko%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/10/03/paramiko%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Paramiko是用python语言写的一个模块，远程连接到Linux服务器，查看上面的日志状态，批量配置远程服务器，文件上传，文件下载等</p><span id="more"></span><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>paramiko是一个基于SSH用于连接远程服务器并执行相关操作（SSHClient和SFTPClinet,即一个是远程连接，一个是上传下载服务），使用该模块可以对远程服务器进行命令或文件操作，值得一说的是，fabric和ansible内部的远程管理就是使用的paramiko来现实<br>ssh是一个协议，OpenSSH是其中一个开源实现，paramiko是Python的一个库，实现了SSHv2协议(底层使用cryptography)。</p><p>有了Paramiko以后，我们就可以在Python代码中直接使用SSH协议对远程服务器执行操作，而不是通过ssh命令对远程服务器进行操作。</p><p>由于paramiko属于第三方库，所以需要使用如下命令先行安装<br>pip3 install paramiko</p><h3 id="Paramiko介绍"><a href="#Paramiko介绍" class="headerlink" title="Paramiko介绍"></a>Paramiko介绍</h3><p>paramiko包含两个核心组件：SSHClient和SFTPClient。</p><p><strong>SSHClient</strong>的作用类似于Linux的ssh命令，是对SSH会话的封装，该类封装了传输(Transport)，通道(Channel)及SFTPClient建立的方法(open_sftp)，通常用于执行远程命令。<br><strong>SFTPClient</strong>的作用类似与Linux的sftp命令，是对SFTP客户端的封装，用以实现远程文件操作，如文件上传、下载、修改文件权限等操作</p><p>Paramiko中的几个基础名词：<br>1、Channel：是一种类Socket，一种安全的SSH传输通道；<br>2、Transport：是一种加密的会话，使用时会同步创建了一个加密的Tunnels(通道)，这个Tunnels叫做Channel；<br>3、Session：是client与Server保持连接的对象，用connect()/start_client()/start_server()开始会话。</p><h3 id="Paramiko的基本使用"><a href="#Paramiko的基本使用" class="headerlink" title="Paramiko的基本使用"></a>Paramiko的基本使用</h3><p><strong>SSHClient常用的方法介绍</strong></p><p>**connect()**：实现远程服务器的连接与认证，对于该方法只有hostname是必传参数。<br>常用参数<br>hostname 连接的目标主机<br>port=SSH_PORT 指定端口<br>username=None 验证的用户名<br>password=None 验证的用户密码<br>pkey=None 私钥方式用于身份验证<br>key_filename=None 一个文件名或文件列表，指定私钥文件<br>timeout=None 可选的tcp连接超时时间<br>allow_agent=True, 是否允许连接到ssh代理，默认为True 允许<br>look_for_keys=True 是否在~/.ssh中搜索私钥文件，默认为True 允许<br>compress=False, 是否打开压缩</p><p>**set_missing_host_key_policy()**：设置远程服务器没有在know_hosts文件中记录时的应对策略。目前支持三种策略<br>设置连接的远程主机没有本地主机密钥或HostKeys对象时的策略，目前支持三种：<br><strong>AutoAddPolicy</strong> 自动添加主机名及主机密钥到本地HostKeys对象，不依赖load_system_host_key的配置。即新建立ssh连接时不需要再输入yes或no进行确认<br><strong>WarningPolicy</strong> 用于记录一个未知的主机密钥的python警告。并接受，功能上和AutoAddPolicy类似，但是会提示是新连接<br><strong>RejectPolicy</strong> 自动拒绝未知的主机名和密钥，依赖load_system_host_key的配置。此为默认选项</p><p>**exec_command()**：在远程服务器执行Linux命令的方法。</p><p>**open_sftp()**：在当前ssh会话的基础上创建一个sftp会话。该方法会返回一个SFTPClient对象<br>利用SSHClient对象的open_sftp()方法，可以直接返回一个基于当前连接的sftp对象，可以进行文件的上传等操作.<br>sftp = client.open_sftp()<br>sftp.put(‘local.txt’,’remote.txt’)</p><p><strong>SSHClient常用的方法举例</strong><br>import paramiko<br>实例化SSHClient<br>ssh_client = paramiko.SSHClient()<br>自动添加策略，保存服务器的主机名和密钥信息，如果不添加，那么不再本地know_hosts文件中记录的主机将无法连接 ，此方法必须放在connect方法的前面<br>ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>连接SSH服务端，以用户名和密码进行认证 ，调用connect方法连接服务器<br>ssh_client.connect(hostname=’192.168.137.105’, port=22, username=’root’, password=’123456’)<br>打开一个Channel并执行命令  结果放到stdout中，如果有错误将放到stderr中<br>stdin, stdout, stderr = ssh_client.exec_command(‘df -hT ‘)<br>stdout 为正确输出，stderr为错误输出，同时是有1个变量有值   # 打印执行结果  print(stdout.read().decode(‘utf-8’))<br>关闭SSHClient连接<br>ssh_client.close()</p><p><strong>密钥连接方式</strong></p><p>配置私人密钥文件位置<br>private = paramiko.RSAKey.from_private_key_file(‘/root/.ssh/id_rsa’)<br>实例化SSHClient<br>ssh_client = paramiko.SSHClient()<br>自动添加策略，保存服务器的主机名和密钥信息，如果不添加，那么不再本地know_hosts文件中记录的主机将无法连接<br>ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>连接SSH服务端，以用户名和密码进行认证<br>ssh_client.connect(<br>hostname=’192.168.137.100’,<br>port=22,<br>username=’root’,<br>pkey=private<br>)</p><p><strong>SFTPClient常用方法介绍</strong></p><p>SFTPCLient作为一个sftp的客户端对象，根据ssh传输协议的sftp会话，实现远程文件操作，如上传、下载、权限、状态<br>from_transport(cls,t) 创建一个已连通的SFTP客户端通道<br>put(localpath, remotepath, callback=None, confirm=True) 将本地文件上传到服务器<br>参数confirm：是否调用stat()方法检查文件状态，返回ls -l的结果<br>get(remotepath, localpath, callback=None) 从服务器下载文件到本地<br>mkdir() 在服务器上创建目录<br>remove() 在服务器上删除目录<br>rename() 在服务器上重命名目录<br>stat() 查看服务器文件状态<br>listdir() 列出服务器目录下的文件</p><p><strong>SFTPClient常用方法举例</strong></p><p>import paramiko<br>实例化一个transport对象<br>tran = paramiko.Transport((‘192.168.137.100’, 22))<br>连接SSH服务端，使用password<br>tran.connect(username=”root”, password=’123456’)<br>或使用配置私人密钥文件位置<br>private = paramiko.RSAKey.from_private_key_file(‘/root/.ssh/id_rsa’)<br>连接SSH服务端，使用pkey指定私钥<br>tran.connect(username=”root”, pkey=private)<br>获取SFTP实例<br>sftp = paramiko.SFTPClient.from_transport(tran)<br>设置上传的本地/远程文件路径<br>local_path = “/home/1.txt”<br>remote_path = “/tmp/1.txt”<br>执行上传动作<br>sftp.put(local_path, remote_path)<br>执行下载动作<br>sftp.get(remote_path, local_path)<br>关闭Transport通道<br>tran.close()</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>concurrent模块</title>
      <link href="/2020/09/27/concurrent%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/09/27/concurrent%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="关于concurrent模块"><a href="#关于concurrent模块" class="headerlink" title="关于concurrent模块"></a>关于concurrent模块</h3><p>今天来讲下 python 的另外一个自带库 concurrent 。<br>concurrent 是在 Python3.2 中引入的，只用几行代码就可以编写出线程池/进程池。<br>计算型任务效率和 mutiprocessing.pool 提供的 poll 和 ThreadPoll 相比不分伯仲，而且在 IO 型任务由于引入了 Future 的概念效率要高数倍。<br>而threading的话还要自己维护相关的队列防止死锁，代码的可读性也会下降，相反 concurrent 提供的线程池却非常的便捷，不用自己操心死锁以及编写线程池代码，由于异步的概念 IO 型任务也更有优势<br>concurrent 主要提供了 ThreadPoolExecutor 和 ProcessPoolExecutor 。一个多线程，一个多进程。但 concurrent 本质上都是对 threading 和 mutiprocessing 的封装。看它的源码可以知道，所以最底层并没有异步。<br>ThreadPoolExecutor 自己提供了任务队列，不需要自己写了。而所谓的线程池，它只是简单的比较当前的 threads 数量和定义的 max_workers 的大小，小于 max_workers 就允许任务创建线程执行任务</p><h3 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3><p>通过 ThreadPoolExecutor 类创建线程池对象，max_workers 设置最大运行线程数数。<br>使用 ThreadPoolExecutor 的好处是不用担心线程死锁问题，让多线程编程更简洁<br>from concurrent import futures<br>pool = futures.ThreadPoolExecutor(max_workers = 2)</p><h3 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h3><p>submit(self, fn, *args, **kwargs):<br>fn：需要异步执行的函数<br>*args,**kwargs：fn 接受的参数</p><p>该方法的作用就是提交一个可执行的回调task，它返回一个Future对象。可以看出此方法不会阻塞主线程的执行。<br>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="https://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">https://www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>for url in urls:<br>    task = pool.submit(get_request,url)<br>    print(‘{}主线程’.format(datetime.datetime.now()))<br>    time.sleep(2)</p><p>输出结果<br>2021-03-12 15:29:10.780141:主线程<br>2021-03-12 15:29:10.865425:<a href="https://www.baidu.com/">https://www.baidu.com</a>  200<br>2021-03-12 15:29:10.923062:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200<br>2021-03-12 15:29:10.940930:<a href="https://www.jd.com/">https://www.jd.com</a>  200</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map(self, fn, *iterables, timeout=None, chunksize=1):<br>fn：需要异步执行的函数<br>*iterables：可迭代对象</p><p>map 第二个参数是可迭代对象，比如 list、tuple 等，写法相对简单。map 方法也不会阻塞主线程的执行<br>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="https://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">https://www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>tasks = pool.map(get_request,urls)<br>print(‘{}:主线程’.format(datetime.datetime.now()))<br>time.sleep(2)</p><p>输出结果<br>2021-03-12 16:14:04.854452:主线程<br>2021-03-12 16:14:04.938870:<a href="https://www.baidu.com/">https://www.baidu.com</a>  200<br>2021-03-12 16:14:05.033849:<a href="https://www.jd.com/">https://www.jd.com</a>  200<br>2021-03-12 16:14:05.048952:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200</p><h3 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h3><p>如果要等待子线程执行完之后再执行主线程要怎么办呢，可以通过 wait 。</p><p>wait(fs, timeout=None, return_when=ALL_COMPLETED):<br>fs：所有任务 tasks<br>return_when：有三个参数 FIRST_COMPLETED：只要有一个子线程完成则返回结果。<br>             FIRST_EXCEPTION：只要有一个子线程抛异常则返回结果，若没有异常则等同于ALL_COMPLETED。<br>             ALL_COMPLETED：默认参数，等待所有子线程完成</p><p>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="https://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">https://www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>tasks =[]<br>for url in urls:<br>    task = pool.submit(get_request,url)<br>    tasks.append(task)<br>futures.wait(tasks)<br>print(‘{}:主线程’.format(datetime.datetime.now()))<br>time.sleep(2)</p><p>输出结果<br>2021-03-12 16:30:13.437042:<a href="https://www.baidu.com/">https://www.baidu.com</a>  200<br>2021-03-12 16:30:13.552700:<a href="https://www.jd.com/">https://www.jd.com</a>  200<br>2021-03-12 16:30:14.117325:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200<br>2021-03-12 16:30:14.118284:主线程</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>as_completed(fs, timeout=None)</p><p>所有任务 tasks<br>使用 concurrent.futures 操作 多线程/多进程 过程中，很多函数报错并不会直接终止程序，而是什么都没发生。使用 as_completed 可以捕获异常，代码如下<br>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="http://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>创建线程池<br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>tasks =[]<br>for url in urls:<br>    task = pool.submit(get_request,url)<br>    tasks.append(task)<br>异常捕获<br>errors = futures.as_completed(tasks)<br>for error in errors:<br>    # error.result()       等待子线程都完成，并抛出异常，中断主线程<br>    # 捕获子线程异常，不会终止主线程继续运行<br>    print(error.exception())<br>futures.wait(tasks)<br>print(‘{}:主线程’.format(datetime.datetime.now()))<br>time.sleep(2)</p><p>输出结果<br>Invalid URL ‘<a href="http://www.baidu.com&amp;/#39;">www.baidu.com'</a>: No schema supplied. Perhaps you meant <a href="http://www.baidu.com/">http://www.baidu.com</a>?<br>2021-03-12 17:24:26.984933:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200<br>None<br>2021-03-12 17:24:26.993939:<a href="https://www.jd.com/">https://www.jd.com</a>  200<br>None<br>2021-03-12 17:24:26.994937:主线程</p><p>多进程编程与之类似，将 ThreadPoolExecutor 替换成 ProcessPoolExecutor</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多进程包multiprocessing的使用</title>
      <link href="/2020/09/27/multiprocess%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/09/27/multiprocess%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><p>Python提供了非常好用的多进程包multiprocessing，你只需要定义一个函数，Python会替你完成其他所有事情。借助这个包，可以轻松完成从单进程到并发执行的转换。</p><h3 id="新建单一进程"><a href="#新建单一进程" class="headerlink" title="新建单一进程"></a>新建单一进程</h3><p>如果我们新建少量进程，可以如下：<br>import multiprocessing<br>import time<br>def func(msg):<br>  for i in xrange(3):<br>    print msg<br>    time.sleep(1)<br>if <strong>name</strong> == “<strong>main</strong>“:<br>  p = multiprocessing.Process(target=func, args=(“hello”, ))<br>  p.start()<br>  p.join()<br>  print “Sub-process done.”</p><h3 id="使用进程池"><a href="#使用进程池" class="headerlink" title="使用进程池"></a>使用进程池</h3><p>是的，你没有看错，不是线程池。它可以让你跑满多核CPU，而且使用方法非常简单。<br>注意要用apply_async，如果落下async，就变成阻塞版本了。<br>processes=4是最多并发进程数量。</p><p>import multiprocessing<br>import time<br>def func(msg):<br>  for i in xrange(3):<br>    print msg<br>    time.sleep(1)<br>if <strong>name</strong> == “<strong>main</strong>“:<br>  pool = multiprocessing.Pool(processes=4)<br>  for i in xrange(10):<br>    msg = “hello %d” %(i)<br>    pool.apply_async(func, (msg, ))<br>  pool.close()<br>  pool.join()<br>  print “Sub-process(es) done.”</p><h3 id="使用Pool，并需要关注结果"><a href="#使用Pool，并需要关注结果" class="headerlink" title="使用Pool，并需要关注结果"></a>使用Pool，并需要关注结果</h3><p>更多的时候，我们不仅需要多进程执行，还需要关注每个进程的执行结果，如下：</p><p>import multiprocessing<br>import time<br>def func(msg):<br>  for i in xrange(3):<br>    print msg<br>    time.sleep(1)<br>  return “done “ + msg<br>if <strong>name</strong> == “<strong>main</strong>“:<br>  pool = multiprocessing.Pool(processes=4)<br>  result = []<br>  for i in xrange(10):<br>    msg = “hello %d” %(i)<br>    result.append(pool.apply_async(func, (msg, )))<br>  pool.close()<br>  pool.join()<br>  for res in result:<br>    print res.get()<br>  print “Sub-process(es) done.”</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis缓存</title>
      <link href="/2020/08/10/Redis%E7%BC%93%E5%AD%98/"/>
      <url>/2020/08/10/Redis%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><p>redis<strong>缓存穿透</strong></p><p>你所要查询的key并不存在于redis缓存中，这时又有大连的请求查询这个key，就会使得数据库负载过大，就像是穿过了缓存直接击中数据库，很容易把数据库给打挂了<br>解决方案：<br>第一种方法呢就是数据库查询不到的key直接保存在redis中，再次查询数据库的时候，缓存层直接返回空<br>第二种方法就涉及到了一个叫布隆过滤器的东西，本质上是一个二进制数组，以空间换时间，以低内存空间解决缓存穿透的问题，将所有存在的key提前存入布隆过滤器，在请求进入缓存之前，布隆过滤器进行拦截，若不存在直接返回空</p><p>redis<strong>缓存击穿</strong></p><p>某一个热点的key失效了，大量的请求直接到达数据库<br>解决方法：<br>第一种设置永不过期<br>第二种就是加互斥锁，互斥锁就是同一时刻只有一个线程能够进行访问，加了互斥锁之后第一个访问完后，缓存中的数据将会被重建，之后直接从缓存中取就可以 </p><p>redis<strong>缓存雪崩</strong></p><p>可能是redis宕机了，也可能是有很多key设置了统一过期时间<br>解决方案：<br>第一种构建高可用的Redis缓存：搭建Redis集群，提高Redis的容灾性<br>第二种使用熔断机制：对存储层增加限流措施，当请求超出限制时，对其提供降级措施，例如：当请求到达一定阈值，直接返回“系统繁忙“等提示，防止过多的请求到达数据库上，这样可以保证一部分用户还可以使用，其他用户多刷新几次也能得到结果</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django面试题</title>
      <link href="/2020/08/08/Django%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/08/08/Django%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="Django的生命周期"><a href="#Django的生命周期" class="headerlink" title="Django的生命周期"></a>Django的生命周期</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、当用户在浏览器输入url，此时浏览器会生成请求头和请求体随之发送给服务端。</span><br><span class="line">2、url经过Django中的wsgi时完成请求对象创建</span><br><span class="line">3、经过Django的中间件，到路由系统匹配路由</span><br><span class="line">4、完成匹配后进入相应的view视图，执行相关代码返回执行结果</span><br><span class="line">5、Django把客户端想要的数据作为字符串返回客户端</span><br><span class="line">6、客户端接收数据，再渲染到页面展现给用户</span><br></pre></td></tr></tbody></table></figure><img src="https://s2.loli.net/2022/06/12/AK93GHI4SJM7afn.png" alt="image-20220603144648987" style="zoom:50%;"><h3 id="Django内置组件"><a href="#Django内置组件" class="headerlink" title="Django内置组件"></a>Django内置组件</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin，from，modelfrom，model</span><br></pre></td></tr></tbody></table></figure><h3 id="FBV和CBV"><a href="#FBV和CBV" class="headerlink" title="FBV和CBV"></a>FBV和CBV</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FBV:基于函数的视图函数</span><br><span class="line">CBV:基于类的视图函数</span><br></pre></td></tr></tbody></table></figure><h3 id="session和cookie"><a href="#session和cookie" class="headerlink" title="session和cookie"></a>session和cookie</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">区别：</span><br><span class="line"><span class="code">    cookie数据存放于客户的浏览器中，session的数据存于服务器中，cookie不是很安全，他人可以分析存放于本地的cookie并进行cookie欺骗，若从安全面考虑则应该使用session，session会在一定的时间内保存在服务器上。当访问量增多，会比较占用服务器的性能，所以建议将登陆信息等重要的信息存放在session中，其他信息则放在cookie中</span></span><br></pre></td></tr></tbody></table></figure><h3 id="HTTP请求常见的方式"><a href="#HTTP请求常见的方式" class="headerlink" title="HTTP请求常见的方式"></a>HTTP请求常见的方式</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、opions 返回服务器针对特定资源所支持的HTML请求方法，允许客户端查看服务器性能</span><br><span class="line">2、Get 向特定资源发出请求</span><br><span class="line">3、post 向指定资源位置提交数据进行处理请求（提交表单，上传文件），又可能导致新的资源的建立或原有资源的修改</span><br><span class="line">4、put 向指定资源位置上传最新内容</span><br><span class="line">5、head</span><br><span class="line">6、delete</span><br><span class="line">7、trace</span><br><span class="line">8、connect</span><br></pre></td></tr></tbody></table></figure><h3 id="MVC和MTV模式"><a href="#MVC和MTV模式" class="headerlink" title="MVC和MTV模式"></a>MVC和MTV模式</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Django的MTV模式本质上和MVC是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同。</span><br><span class="line">Django的MTV分别是指： </span><br><span class="line">   M 代表模型（Model）： 负责业务对象和数据库的关系映(ORM) </span><br><span class="line">   T 代表模板 (Template)：负责如何把页面展示给用户(html) </span><br><span class="line">   V 代表视图（View）： 负责业务逻辑，并在适当时候调用Model和Template。 </span><br><span class="line">   除了以上三层之外，还需要一个URL分发器，它的作用是将一个个URL的页面请求分发给不同的View处理，View再调用相应Model Template    优势：低耦合，开发快捷，部署方便，可重用性高，维护成本低。</span><br></pre></td></tr></tbody></table></figure><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象关系映射</span><br><span class="line">优点：ORM使得数据库的交互更加简单了，并且不用考虑开始的sql语句，实现快速开发</span><br><span class="line">缺陷:sql封装死了 有时候查询速度很慢</span><br></pre></td></tr></tbody></table></figure><h3 id="中间件的4种方法及应用场景"><a href="#中间件的4种方法及应用场景" class="headerlink" title="中间件的4种方法及应用场景"></a>中间件的4种方法及应用场景</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">自定义中间件必须继承MiddlewareMixin</span><br><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">方法：</span><br><span class="line"><span class="code">    process_request</span></span><br><span class="line"><span class="code">    process_view</span></span><br><span class="line"><span class="code">    process_exception   view中出现错误执行该方法</span></span><br><span class="line"><span class="code">    process_response</span></span><br><span class="line"><span class="code">    process_template_responseprocess  函数中有render执行</span></span><br></pre></td></tr></tbody></table></figure><h3 id="什么是wsgi、uwsgi、uWSGI"><a href="#什么是wsgi、uwsgi、uWSGI" class="headerlink" title="什么是wsgi、uwsgi、uWSGI"></a>什么是wsgi、uwsgi、uWSGI</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wsgi:</span><br><span class="line"><span class="code">    是web网关接口，是一套协议，用于接收用户请求并将请求进行初次封装，随即将请求交给web框架</span></span><br><span class="line"><span class="code">    实现wsgi协议的模块：</span></span><br><span class="line"><span class="code">        1、wsgiref：本质上就是编写一个socket服务端，用于接收用户请求（django）</span></span><br><span class="line"><span class="code">        2、werkzeug：本质上就是编写一个socket服务端，用于接收用户请求（flask）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">uwsgi:</span><br><span class="line"><span class="code">    与wsgi一样是一种通信协议，它是uWSGI服务器的独占协议，用于定义传输信息的类型</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">uWSGI:</span><br><span class="line"><span class="code">    是一个web服务器，实现了wsgi协议，uWSGI协议，http协议</span></span><br></pre></td></tr></tbody></table></figure><p>ORM中的方法</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、model.表名.objects.all() 获取表中所有对象，结果是对象列表</span><br><span class="line">2、model.表名.objects.get(条件) 获取符合条件的对象</span><br><span class="line">3、model.表名.objects.filter(条件) 筛选所有符合条件的对象</span><br><span class="line">4、model.表名.objects.exclude(条件) 筛选所有不合符条件的对象</span><br><span class="line">5、model.表名.objects.all().values() 字典列表 values()括号内不指定则显示全部，若有指定则显示指定的</span><br><span class="line">6、model.表名.objects.all().values<span class="emphasis">_list() 元祖列表 括号内指定同上</span></span><br><span class="line"><span class="emphasis">7、model.表名.objects.all().order_</span>by('id') 按照ID升序</span><br><span class="line">8、model.表名.objects.all().order<span class="emphasis">_by('-id') 按ID降序</span></span><br><span class="line"><span class="emphasis">9、model.表名.objects.all().order_</span>by('a','-id') 先按a升序，a字段相同的按ID降序</span><br><span class="line">10、model.表名.objects.all().order<span class="emphasis">_by('-id').reverse() 对结果反转，reverse前必须排序，否则无效；或在model中表类下中的Meta中指定ordering=('id',) 注意逗号不能少</span></span><br><span class="line"><span class="emphasis">11、distinct() 去重</span></span><br><span class="line"><span class="emphasis">12、model.表名.objects.filter().exists() 判断列表是否有东西，返回true或false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="ORM中三种能写sql语句的方法"><a href="#ORM中三种能写sql语句的方法" class="headerlink" title="ORM中三种能写sql语句的方法"></a>ORM中三种能写sql语句的方法</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、execute 直接访问数据库，避开模型层</span><br><span class="line">2、extra </span><br><span class="line">3、raw for p in Person.objects.raw('SELECT <span class="emphasis">* FROM myapp_person')   print(p)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="ORM批量处理数据"><a href="#ORM批量处理数据" class="headerlink" title="ORM批量处理数据"></a>ORM批量处理数据</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">插入数据：</span><br><span class="line"><span class="code">    创建一个对象列表，然后调用bulk_create方法，一次性将列表中的数据插入数据库</span></span><br><span class="line"><span class="code">    product_list_to_insert = list()</span></span><br><span class="line"><span class="code">    for x in range(10):</span></span><br><span class="line"><span class="code">        product_list_to_insert.append(Product(name='product name' + str(x),price=x))</span></span><br><span class="line"><span class="code">        Product.objects.bulk_create(product_list_to_insert)</span></span><br><span class="line"><span class="code">更新数据:先进行数据过滤，再调用update方法一次性更新</span></span><br><span class="line"><span class="code">    Product.objects.filter(name_contains='name').update(name='new name')</span></span><br><span class="line"><span class="code">删除数据：先进行数据过滤，然后再调用delete方法删除</span></span><br><span class="line"><span class="code">    Product.objects.filter(name_contains='name query').delete()</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></tbody></table></figure><h3 id="CSRF实现机制"><a href="#CSRF实现机制" class="headerlink" title="CSRF实现机制"></a>CSRF实现机制</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、查看中间件是否启用，未启用则启动中间件</span><br><span class="line">2、post请求</span><br><span class="line">3、验证码</span><br><span class="line">4、表单中添加{% csrf<span class="emphasis">_token %}标签</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Django中提供了runserver为什么不能用户来部署项目-runserver和uWSGI的区别"><a href="#Django中提供了runserver为什么不能用户来部署项目-runserver和uWSGI的区别" class="headerlink" title="Django中提供了runserver为什么不能用户来部署项目(runserver和uWSGI的区别)"></a>Django中提供了runserver为什么不能用户来部署项目(runserver和uWSGI的区别)</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、runserver方法是调试Django时用到的运行方式，是Django自带的</span><br><span class="line">   WSGI server运行主要在测试和开发中使用，runserver开启的是单进程</span><br><span class="line">2、uWSGI是一个web服务器，实现了wsgi协议，uWSGI协议，http协议，它具有超快的性能，低内存占用和多app管理等优点，与nginx搭配可构成一个生产环境，能够将用户访问请求和应用app隔开，实现真正的部署</span><br></pre></td></tr></tbody></table></figure><h3 id="calss-Meta中原信息字段有哪些"><a href="#calss-Meta中原信息字段有哪些" class="headerlink" title="calss Meta中原信息字段有哪些"></a>calss Meta中原信息字段有哪些</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、app<span class="emphasis">_label 应用场景：模型类不在默认的应用程序包下的models文件中，这时候需要指定你这个模型类是哪个应用程序的</span></span><br><span class="line"><span class="emphasis">2、db_</span>table 应用场景：用于指定自定义数据库表名</span><br><span class="line">3、db<span class="emphasis">_tablespace 应用场景：通过该字段指定模型对应的数据库表放在哪个数据库表空间</span></span><br><span class="line"><span class="emphasis">4、verbose_</span>name 应用场景：给模型类起名字，注释</span><br><span class="line">5、verbose<span class="emphasis">_name_</span>plural 应用场景：模型的复数形式是什么</span><br><span class="line">6、ordering 应用场景：对象返回的记录结果集是按哪个字段排序的</span><br></pre></td></tr></tbody></table></figure><h3 id="get和filter方法的区别"><a href="#get和filter方法的区别" class="headerlink" title="get和filter方法的区别"></a>get和filter方法的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入参数：</span><br><span class="line"><span class="code">    get的参数只能是model中定义的字段，只支持严格匹配</span></span><br><span class="line"><span class="code">    filter的参数可以使字段，也可以是扩展的where查询关键字，如in like</span></span><br><span class="line"><span class="code">返回值：</span></span><br><span class="line"><span class="code">    get返回值是一个定义的model对象</span></span><br><span class="line"><span class="code">    filter返回值是一个新的queryset对象，然后可以对queryset再进行查询，再返回新的qureyset对象，支持链式操作，queryset是一个集合对象，支持迭代、遍历、切片等，但不同等于list</span></span><br><span class="line"><span class="code">异常：</span></span><br><span class="line"><span class="code">    get只有一条记录返回的时候才正常，也就是说明get查询的字段必须是主键或唯一约束的字段，其余的都会抛异常</span></span><br><span class="line"><span class="code">    filter有没有匹配记录都不会抛异常</span></span><br></pre></td></tr></tbody></table></figure><h3 id="http请求的执行流程"><a href="#http请求的执行流程" class="headerlink" title="http请求的执行流程"></a>http请求的执行流程</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、域名解析</span><br><span class="line">2、建立连接</span><br><span class="line">3、接收请求 接收客户端访问某一资源的请求</span><br><span class="line"><span class="code">    单进程I/O   多进程I/O    复用I/O</span></span><br><span class="line"><span class="code">4、处理请求</span></span><br><span class="line"><span class="code">5、访问资源</span></span><br><span class="line"><span class="code">6、构建响应报文</span></span><br><span class="line"><span class="code">7、发送响应报文</span></span><br><span class="line"><span class="code">8、记录日志</span></span><br></pre></td></tr></tbody></table></figure><h3 id="select-related和prefetch-related的区别"><a href="#select-related和prefetch-related的区别" class="headerlink" title="select_related和prefetch_related的区别"></a>select_related和prefetch_related的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有外键关系存在时，可以很好的减少数据库的请求次数，减轻数据库的压力，提高性能</span><br><span class="line">select<span class="emphasis">_related通过表关系join关联查询，一次性获取所有数据，只进行一次sql查询</span></span><br><span class="line"><span class="emphasis">prefetch_</span>related分别查询每一个表，根据之间的关系进行处理，执行两次sql查询</span><br></pre></td></tr></tbody></table></figure><h4 id="Django中orm如何设置读写分离"><a href="#Django中orm如何设置读写分离" class="headerlink" title="Django中orm如何设置读写分离"></a>Django中orm如何设置读写分离</h4><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、手动设置：通过using(db<span class="emphasis">_name)来指定使用的数据库</span></span><br><span class="line"><span class="emphasis">2、自动读写分离：</span></span><br><span class="line"><span class="emphasis">    1、定义类</span></span><br><span class="line"><span class="emphasis">    2、配置settings文件，在其中指定DATEBASE</span></span><br></pre></td></tr></tbody></table></figure><h3 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定义：远程过程调用(RPC)是一种协议，程序可使用这种协议向网络中的另一台计算机上的程序请求服务</span><br><span class="line">1、RPC采用客户机/服务器模式，请求程序就是一个客户机，而服务提供程序就是一个服务器</span><br><span class="line">2、客户机调用进程发送一个有进程参数的调用信息到服务进程，等待应答。在服务端，进程保持睡眠状态直至调用信息到达，当第一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，继续等待下一个调用信息</span><br><span class="line">3、客户端调用进程接收答复信息，获得进程结果，调用继续执行</span><br></pre></td></tr></tbody></table></figure><h3 id="如何实现用户的登陆认证"><a href="#如何实现用户的登陆认证" class="headerlink" title="如何实现用户的登陆认证"></a>如何实现用户的登陆认证</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、cookie session</span><br><span class="line">2、token登陆成功后生成加密字符串</span><br><span class="line">3、JWT就是一种用户在登录后生成token并把token存放于前端，后端不需要维护用户的状态信息但是可以进行验证token有效性的认证及状态管理方式</span><br><span class="line">4、最后一步签名的过程其实是对头部以及负载的内容进行签名处理，防止内容被篡改，提高安全性</span><br></pre></td></tr></tbody></table></figure><h3 id="django-rest-framework框架中都有哪些组件"><a href="#django-rest-framework框架中都有哪些组件" class="headerlink" title="django rest framework框架中都有哪些组件"></a>django rest framework框架中都有哪些组件</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、序列化组件：serializers 对queryset序列化以及对请求数据格式教研</span><br><span class="line">2、认证组件：写一个类并注册到认证类 在类的方法中编写认证逻辑</span><br><span class="line">3、权限组件：写一个类并注册到权限类 在类的方法中编写认证逻辑</span><br><span class="line">4、频率组件：写一个类并注册到频率类 在类的方法中编写认证逻辑</span><br><span class="line">5、渲染器：定义数据如何渲染至页面，在渲染器类中注册</span><br><span class="line">6、分页：对获取到的数据进行分页处理</span><br><span class="line"><span class="code">    1、基本分页：pagenumberpagination</span></span><br><span class="line"><span class="code">    2、偏移分页：limitoffsetpagination</span></span><br><span class="line"><span class="code">    3、游标分页：Cursorpagination</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用orm和原生sql的优缺点"><a href="#使用orm和原生sql的优缺点" class="headerlink" title="使用orm和原生sql的优缺点"></a>使用orm和原生sql的优缺点</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、orm的开发速度快，操作简单，但是执行速度较慢，在处理多表联查等复杂操作时orm语法会变得复杂</span><br><span class="line">2、sql开发速度慢，但是执行速度快，性能强</span><br></pre></td></tr></tbody></table></figure><h3 id="F、Q查询"><a href="#F、Q查询" class="headerlink" title="F、Q查询"></a>F、Q查询</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F作用：两个字段之间做比较，专门取对象中某列值的操作</span><br><span class="line">Q作用：对对象进行复杂查询，支持特殊操作符运算来组合生成不同的Q对象</span><br></pre></td></tr></tbody></table></figure><h3 id="你能列举几个减少数据库查询次数的方法吗"><a href="#你能列举几个减少数据库查询次数的方法吗" class="headerlink" title="你能列举几个减少数据库查询次数的方法吗"></a>你能列举几个减少数据库查询次数的方法吗</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、利用Django queryset的惰性和自带缓存的特性</span><br><span class="line"></span><br><span class="line">2、使用select<span class="emphasis">_related和prefetch_</span>related方法在数据库层面进行Join操作</span><br><span class="line"></span><br><span class="line">3、使用缓存</span><br></pre></td></tr></tbody></table></figure><h3 id="Django的模型继承有哪几种方式-它们有什么区别以及何时使用它们"><a href="#Django的模型继承有哪几种方式-它们有什么区别以及何时使用它们" class="headerlink" title="Django的模型继承有哪几种方式? 它们有什么区别以及何时使用它们?"></a>Django的模型继承有哪几种方式? 它们有什么区别以及何时使用它们?</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 抽象模型继承(abstract model)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 多表模型继承(multi-table inheritance)</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 代理模型(proxy model)</span><br><span class="line"></span><br><span class="line">它们的区别如下:</span><br><span class="line"></span><br><span class="line"><span class="code">    1、Django不会为抽象模型在数据库中生成自己的数据表。父类Meta中的abstract=True也不会传递给子类。如果你发现多模型有很多共同字段时，需使用抽象模型继承。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    2、多表模型继承与抽象模型继承最大的区别在于Django也会为父类模型建立自己的数据表，同时隐式地在父类和子类之间建立一个一对一关系。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    3、如果我们只想改变某个模型的行为方法，而不是添加额外的字段或创建额外的数据表，我们就可以使用代理模型(proxy model)。设置一个代理模型，需要在子类模型Meta选项中设置proxy=True， Django不会为代理模型生成新的数据表</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深浅拷贝</title>
      <link href="/2020/08/08/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/08/08/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><h3 id="一、深浅copy"><a href="#一、深浅copy" class="headerlink" title="一、深浅copy"></a><strong>一、深浅copy</strong></h3><p><strong>1、赋值运算</strong></p><p><img src="https://s2.loli.net/2022/06/11/mkIqjbKXiYtL4a8.png" alt="image-20220611151019511"></p><p><strong>注意</strong>：l2 = l1是一个指向，是赋值，和深浅copy无关</p><p>2、浅<strong>copy</strong></p><p>其实列表是一个个的槽位，每一个槽位存储的是该对象的内存地址</p><p><img src="https://s2.loli.net/2022/06/11/B8zqfNFJuDi3XVc.png" alt="image-20220611151229683"></p><p><img src="https://s2.loli.net/2022/06/11/XwmLQiN3YHOBUpy.png" alt="image-20220611151251385"></p><p><strong>小结</strong>：</p><p>浅copy：会在内存中新开辟一个空间，存放这个copy的列表，但是列表里面的内容还是沿用之前对象的内存地址</p><p>3、深<strong>copy</strong></p><p><img src="https://s2.loli.net/2022/06/11/JDp1vHY6wxAIURq.png" alt="image-20220611151433932"></p><p><img src="https://s2.loli.net/2022/06/11/YKXF9luhUOfDaH7.png" alt="image-20220611151450570"></p><p><strong>小结</strong>：</p><p>深copy：会在内存中开辟新空间，将原列表以及列表里面的可变数据类型重新创建一份，不可变数据类型则沿用之前的。</p><p><strong>为什么Python默认的拷贝方式是浅拷贝</strong>？</p><p>时间角度：浅拷贝花费时间更少。</p><p>空间角度：浅拷贝花费内存更少。</p><p>效率角度：浅拷贝只拷贝顶层数据，一般情况下比深拷贝效率高。</p><p><strong>总结</strong>：</p><p>不可变对象在赋值时会开辟新空间。</p><p>可变对象在赋值时，修改一个的值，另一个也会发生改变。</p><p>深、浅拷贝对不可变对象拷贝时，不开辟新空间，相当于赋值操作。</p><p>浅拷贝在拷贝时，只拷贝第一层中的引用，如果元素是可变对象，并且被修改，那么拷贝的对象也会发生变化。</p><p>深拷贝在拷贝时，会逐层进行拷贝，直到所有的引用都是不可变对象为止。</p><p>Python 有多种方式实现浅拷贝，copy模块的copy 函数 ，对象的 copy 函数 ，工厂方法，切片等。</p><p>大多数情况下，编写程序时，都是使用浅拷贝，除非有特定的需求。</p><p>浅拷贝的优点：拷贝速度快，占用空间少，拷贝效率高 </p>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django必会十三招</title>
      <link href="/2020/06/24/Django%E5%BF%85%E4%BC%9A%E5%8D%81%E4%B8%89%E6%8B%9B/"/>
      <url>/2020/06/24/Django%E5%BF%85%E4%BC%9A%E5%8D%81%E4%B8%89%E6%8B%9B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="必会十三招"><a href="#必会十三招" class="headerlink" title="必会十三招"></a>必会十三招</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.all()            所有元素</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.filter()         过滤</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   我们在利用主键字段筛选数据时，可以不考虑主键字段叫什么，直接使用pk代替</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">3.get()</span></span><br><span class="line"><span class="string">4.values()         </span></span><br><span class="line"><span class="string">   获取指定字段对应的数据，返回的结果是queryset对象(列表套字典的形式)</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">5.values_list()</span></span><br><span class="line"><span class="string">   获取指定字段对应的数据，返回的结果是queryset对象(列表套元祖的形式)</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">6.count()          统计所查询数据的个数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7.first()          所查询数据的第一个 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8.last()           所查询数据的最后一个</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">9.order_by()       默认是升序，在字段前加上负号即可改为降序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">10.reverse()       生效前提是必须已经排序过了的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">11.exclude()       排除什么在外</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">12.distinct()      去重(主键也得相同)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">13.exist()         判断数据是否有值，结果返回布尔值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CBV和FBV、from表单</title>
      <link href="/2020/06/24/Django%E7%AC%AC%E4%BA%94%E5%A4%A9/"/>
      <url>/2020/06/24/Django%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="JsonResponse类的使用"><a href="#JsonResponse类的使用" class="headerlink" title="JsonResponse类的使用"></a>JsonResponse类的使用</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">json格式的数据：进行跨语言数据传输</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="string">'''支持的数据类型：str，list, tuple, dict, set'''</span></span><br><span class="line"><span class="comment"># 序列化出来的数据是可以看得懂的，就是一个字符串</span></span><br><span class="line">dumps</span><br><span class="line">loads</span><br><span class="line"></span><br><span class="line">dump</span><br><span class="line">load</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="string">'''支持的数据类型：python中的所有数据类型'''</span></span><br><span class="line"><span class="comment"># 序列化出来的结果看不懂，因为结果是一个二进制</span></span><br><span class="line"><span class="comment"># pickle序列化出的来的数据只能在python中使用</span></span><br><span class="line">dumps</span><br><span class="line">loads</span><br><span class="line"></span><br><span class="line">dump</span><br><span class="line">load</span><br><span class="line"></span><br><span class="line"><span class="comment"># js中如何序列化？</span></span><br><span class="line">JSON.stringify()  <span class="comment"># 序列化</span></span><br><span class="line">JSON.parse()      <span class="comment"># 反序列化</span></span><br><span class="line"></span><br><span class="line">**在形参和实参中的用法不一样</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># print(123)</span></span><br><span class="line">    <span class="comment"># return HttpResponse('ok')</span></span><br><span class="line">    <span class="comment"># return redirect()</span></span><br><span class="line">    <span class="comment"># return render()</span></span><br><span class="line">    user_dict = {<span class="string">'username'</span>:<span class="string">'ly很帅'</span>, <span class="string">'password'</span>:<span class="number">123</span>}</span><br><span class="line">    l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="comment"># json_str = json.dumps(l, ensure_ascii=False)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># return HttpResponse(json_str)</span></span><br><span class="line">    <span class="comment"># return JsonResponse(user_dict, json_dumps_params={'ensure_ascii':False})</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(l,safe=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="form表单上传文件"><a href="#form表单上传文件" class="headerlink" title="form表单上传文件"></a>form表单上传文件</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">上传文件注意事项：</span><br><span class="line"><span class="number">1.</span> 必须是post请求</span><br><span class="line">    <span class="number">2.</span> enctype=<span class="string">'multipart/form-data'</span></span><br><span class="line">    </span><br><span class="line">后端：</span><br><span class="line">在request.FILES中接收文件数据，其他数据一律按照请求方式接收</span><br><span class="line">    </span><br><span class="line">form表单可以传递的数据格式：</span><br><span class="line"><span class="number">1.</span> urlencoded</span><br><span class="line">    <span class="number">2.</span> form-data</span><br><span class="line"> <span class="comment"># 不能提交json格式的数据</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''提交json格式的数据：</span></span><br><span class="line"><span class="string">1. ajax</span></span><br><span class="line"><span class="string">2. 第三方工具</span></span><br><span class="line"><span class="string">postman</span></span><br><span class="line"><span class="string">apizza</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">    </span><br><span class="line">数据格式：</span><br><span class="line"><span class="number">1.</span> urlencoded</span><br><span class="line">    <span class="number">2.</span> form-data</span><br><span class="line">    <span class="number">3.</span> json格式</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="built_in">print</span>(request.FILES)</span><br><span class="line">        file_obj = request.FILES.get(<span class="string">'myfile'</span>)</span><br><span class="line">        <span class="built_in">print</span>(file_obj.name)  <span class="comment"># 文件名</span></span><br><span class="line">        <span class="keyword">import</span> random</span><br><span class="line">        <span class="keyword">import</span> uuid</span><br><span class="line">        aa = <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">'.png'</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(aa, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj:</span><br><span class="line">                f.write(line)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'upload_file.html'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="CBV和FBV"><a href="#CBV和FBV" class="headerlink" title="CBV和FBV"></a>CBV和FBV</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FBV: function based view</span><br><span class="line">CBV: <span class="keyword">class</span> <span class="title class_">based</span> view</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'get'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'get'</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'post'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'POST'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#  url(r'^indexCbv/', views.IndexView.as_view()),</span></span><br></pre></td></tr></tbody></table></figure><h3 id="CBV的源码"><a href="#CBV的源码" class="headerlink" title="CBV的源码"></a>CBV的源码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">如何通过请求方式确定的方法？</span><br><span class="line"></span><br><span class="line"><span class="comment">#############入口################################</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">            self = cls(**initkwargs)  <span class="comment"># self = IndexView(**initkwargs)</span></span><br><span class="line">            <span class="comment"># self =&gt; IndexView</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line"><span class="comment">##############核心方法################################</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># GET POST  =&gt; get post</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            <span class="comment"># 反射：get set has del</span></span><br><span class="line">            handler = <span class="built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)  <span class="comment"># get(request, *args, **kwargs)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 传值</span><br><span class="line"><span class="comment"># 跟变量相关的都使用双括号 {{}}</span></span><br><span class="line"><span class="comment"># 跟逻辑相关的都使用 {%  %}</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''模板文件中取值一律使用点语法 . '''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在模板文件里面的函数，不用加括号，会自动加括号调用， 不能传递参数</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="模板语法之过滤器"><a href="#模板语法之过滤器" class="headerlink" title="模板语法之过滤器"></a>模板语法之过滤器</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相当于python里面的内置方法</span></span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">{{变量|过滤器:参数}}</span><br><span class="line">    </span><br><span class="line">过滤器有很多个，大概有六七十，我们需要使用<span class="number">5</span>个左右</span><br><span class="line"><span class="number">1.</span> length</span><br><span class="line"><span class="number">2.</span> defalut</span><br><span class="line"><span class="number">3.</span> date</span><br><span class="line"><span class="number">4.</span> filesizeformat</span><br><span class="line"><span class="number">5.</span> safe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤器里面最大传两个参数，至少一个参数</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CBV和FBV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django路由层</title>
      <link href="/2020/06/23/Django%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
      <url>/2020/06/23/Django%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="路由层"><a href="#路由层" class="headerlink" title="路由层"></a>路由层</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 路由匹配, urls.py中</span><br><span class="line"></span><br><span class="line"><span class="comment"># APPEND_SLASH = False 控制django是否自动加斜杠匹配</span></span><br><span class="line"></span><br><span class="line">url(<span class="string">r'^testadd/$'</span>, views.testadd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配规则：从上到下只要正则表达式匹配成功，就不会往下匹配了</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">get请求的传参方式？</span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/test/?a=1</span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/test/1</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></tbody></table></figure><h3 id="无名分组和有名分组"><a href="#无名分组和有名分组" class="headerlink" title="无名分组和有名分组"></a>无名分组和有名分组</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无名分组</span></span><br><span class="line">url(<span class="string">r'^test/(\d+)'</span>, views.test),</span><br><span class="line"><span class="comment"># 会把括号中匹配的数字当成位置参数传给视图函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组</span></span><br><span class="line">url(<span class="string">r'^test/(?P&lt;aaaa&gt;\d{2})$'</span>, views.test), <span class="comment"># # 会把括号中匹配的数字当成关键字参数传给视图函数</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反向解析其实就是通过一个路由的别名，可以得到该别名所在的这行路由的完整地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由是可以起别名的</span></span><br><span class="line"><span class="comment"># 反向解析</span></span><br><span class="line">url(<span class="string">r'^v1/v2/v3/v4/v5/test/'</span>, views.test, name=<span class="string">'test'</span>),</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"><span class="comment"># 1. 后端反向解析</span></span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="string">'test'</span>)) <span class="comment"># /test/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带参数的反向解析</span></span><br><span class="line"><span class="comment"># 1. 后端反向解析</span></span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="string">'test'</span>, args=(<span class="number">11111</span>, ))) <span class="comment"># /test/</span></span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="string">'test'</span>, kwargs={<span class="string">'aaa'</span>: <span class="number">1111</span>})) <span class="comment"># /test/</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''无名有名不能混合使用，可以单个多次使用'''</span></span><br><span class="line"><span class="comment"># url(r'^test/(\d+)/(\d+)/(\d+)/(\d+)', views.test, name='test'),</span></span><br><span class="line">    url(<span class="string">r'^test/(?P&lt;aaa&gt;\d+)/(?P&lt;bbb&gt;\d+)/(?P&lt;ccc&gt;\d+)/(\d+)'</span>, views.test, name=<span class="string">'test'</span>),</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重点</span></span><br><span class="line">以后我们的django项目会越来越大，那么就会导致总路由文件会越来越大，就会非常难维护，我们会把总路由分开到不同的应用下面</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">django的每一个应用都支持有自己的</span></span><br><span class="line"><span class="string">urls.py</span></span><br><span class="line"><span class="string">templates</span></span><br><span class="line"><span class="string">static</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 怎么样把这些应用串起来？就是使用路由分发。</span></span><br><span class="line"><span class="comment"># 使用路由分发一般都是多个应用</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 路由分发</span></span><br><span class="line">    <span class="string">'''第一种方式'''</span></span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> urls <span class="keyword">as</span> app01_urls</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> urls <span class="keyword">as</span> app02_urls</span><br><span class="line">    url(<span class="string">r'^app01/'</span>, include(app01_urls)),</span><br><span class="line">    url(<span class="string">r'^app02/'</span>, include(app02_urls)),</span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"> 强调：路由分发时，总路由第一个参数一定不能加$</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二种方式</span></span><br><span class="line">url(<span class="string">r'^app01/'</span>, include(<span class="string">'app01.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^app02/'</span>, include(<span class="string">'app02.urls'</span>)),</span><br></pre></td></tr></tbody></table></figure><h3 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当多个应用出现相同的别名时，反向解析就没办法识别了</span></span><br><span class="line">  url(<span class="string">r'^app01/'</span>, include(<span class="string">'app01.urls'</span>, namespace=<span class="string">'app01'</span>)),</span><br><span class="line">  url(<span class="string">r'^app02/'</span>, include(<span class="string">'app02.urls'</span>, namespace=<span class="string">'app02'</span>)),</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">print</span>(reverse(<span class="string">'app01:index'</span>))</span><br><span class="line"> <span class="built_in">print</span>(reverse(<span class="string">'app02:index'</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对不同的项目，创建出来一个新的python环境，类似于是一个新的python解释器</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM</title>
      <link href="/2020/06/22/Django%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
      <url>/2020/06/22/Django%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="ORM的概念"><a href="#ORM的概念" class="headerlink" title="ORM的概念"></a>ORM的概念</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 什么是ORM？</span><br><span class="line">关系映射对象</span><br><span class="line">    <span class="comment"># 不但在python中有，在其他语言中也有</span></span><br><span class="line"><span class="number">2.</span> 特点：</span><br><span class="line">在操作数据库的时候，不用在写原生SQL语句</span><br><span class="line">    <span class="string">'''相对而言，执行效率低了'''</span></span><br><span class="line"><span class="number">3.</span> ORM书写的位置：</span><br><span class="line">在models.py文件中</span><br><span class="line"><span class="number">4.</span> 如何使用？</span><br><span class="line">类名    &gt;&gt;&gt;   表名</span><br><span class="line">     对象    &gt;&gt;&gt;   记录</span><br><span class="line">     属性    &gt;&gt;&gt;    字段</span><br><span class="line"> <span class="number">5.</span> 如何来创建表？</span><br><span class="line"><span class="comment"># 创建一张表出来,必须继承models</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="comment"># 组合索引，联合索引</span></span><br><span class="line">    <span class="comment"># id int primary key auto_increment</span></span><br><span class="line">    <span class="built_in">id</span> = models.IntegerField(primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># username, max_length必须写</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)  <span class="comment"># varchar(32)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># password, orm支持自定义数据类型</span></span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>)  <span class="comment"># char()</span></span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span> 类写完之后，一定要执行数据库迁移命令，才能真正的创建出来数据表</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">python36 manage.py makemigrations</span></span><br><span class="line"><span class="string">python36 manage.py migrate</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">    <span class="comment"># 凡是跟数据相关的操作都要执行以上两句话</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充：ORM不能创建数据库，必须提前把库创建完成</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字段的增删改查"><a href="#字段的增删改查" class="headerlink" title="字段的增删改查"></a>字段的增删改查</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string">        如果你的表有主键，并且主键名也叫id，那么可以省略不写，自动创建</span></span><br><span class="line"><span class="string">        如果你的主键名不叫id，那么，就需要指定了</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 创建一张表出来,必须继承models</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="comment"># 组合索引，联合索引</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        如果你的表有主键，并且主键名也叫id，那么可以省略不写，自动创建</span></span><br><span class="line"><span class="string">        如果你的主键名不叫id，那么，就需要指定了</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># id int primary key auto_increment</span></span><br><span class="line">    <span class="built_in">id</span> = models.IntegerField(primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># username, max_length必须写</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)  <span class="comment"># varchar(32)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># password, orm支持自定义数据类型</span></span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>)  <span class="comment"># char() </span></span><br></pre></td></tr></tbody></table></figure><h3 id="ORM数据的增删改查"><a href="#ORM数据的增删改查" class="headerlink" title="ORM数据的增删改查"></a>ORM数据的增删改查</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加数据</span></span><br><span class="line">    <span class="comment"># sql: insert into t1 ()...</span></span><br><span class="line">    <span class="comment"># ORM:</span></span><br><span class="line">    <span class="comment"># 第一种方式</span></span><br><span class="line">    <span class="comment"># res=models.User.objects.create(username='ly', password=123)</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        返回值是当前插入的数据对象</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># print(res.username)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二种方式：</span></span><br><span class="line">    <span class="comment"># obj=models.User(username='ly1', password=123)</span></span><br><span class="line">    <span class="comment"># obj.save() # 这句话才是真正的操作数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改:第一种方式</span></span><br><span class="line">    <span class="comment"># sql:update db1 set username = '', password = '' where id=1 and ...</span></span><br><span class="line">    <span class="comment"># orm:</span></span><br><span class="line">    <span class="comment"># models.User.objects.filter(id=1).update(username='LY')</span></span><br><span class="line">    <span class="comment"># models.User.objects.filter(pk=1).update(username='LY')</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'''返回值是影响的行数'''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二种方式</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=1).all()[0]</span></span><br><span class="line">    <span class="comment"># filter里面的条件是and关系</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=1, username='aaaa11').first()  # [0]</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=1).first()  # [0]</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(username='aaaa').filter(password=123).all()  # [0]</span></span><br><span class="line">    <span class="string">'''只要返回值是QuerySet对象，那么，就可以一直点queryset提供的方法'''</span></span><br><span class="line">    <span class="comment"># print(res) # &lt;QuerySet [&lt;User: User object&gt;]&gt;</span></span><br><span class="line">    <span class="comment"># print(res.username)</span></span><br><span class="line">    <span class="comment"># print(res.password)</span></span><br><span class="line">    <span class="comment"># res.username = 'aaaa'</span></span><br><span class="line">    <span class="comment"># res.save()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除:delete from user where id = 1</span></span><br><span class="line">    models.User.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>).delete()</span><br></pre></td></tr></tbody></table></figure><h3 id="ORM创建表关系"><a href="#ORM创建表关系" class="headerlink" title="ORM创建表关系"></a>ORM创建表关系</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql是关系型数据库</span></span><br><span class="line"></span><br><span class="line">一对一：</span><br><span class="line"><span class="string">'''外键字段建在任何一方都可以，但是，推荐建在使用频率比较高的一张表'''</span></span><br><span class="line">一对多</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">外键字段建在多的一方</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">多对多</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">外键字段不建在任何一张表，而是，建在第三张表中</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">eg：</span><br><span class="line"></span><br><span class="line">图书表</span><br><span class="line">    出版社表</span><br><span class="line">    作者表</span><br><span class="line">    作者详情表</span><br><span class="line">    </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    图书和出版社是一对多，图书是多，出版社是一</span></span><br><span class="line"><span class="string">    图书和作者是多对多的关系</span></span><br><span class="line"><span class="string">    作者和作者详情表是一对一</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 不常用的数据我们称之为冷数据，</span></span><br><span class="line">    <span class="comment"># 常用的数据我们称之为热数据</span></span><br><span class="line">    <span class="comment"># ORM创建表关系</span></span><br><span class="line">    <span class="comment"># 1. 先创建这张表的基础字段，</span></span><br><span class="line">    <span class="comment"># 2. 在回头创建外键字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 出版社表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        float</span></span><br><span class="line"><span class="string">        double</span></span><br><span class="line"><span class="string">        decimal(5, 2) 999999.99</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># decimal(8, 2)</span></span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># publish_id = models.ForeignKey(to='Publish', to_field='id')</span></span><br><span class="line">    publish_id = models.ForeignKey(to=<span class="string">'Publish'</span>)  <span class="comment"># 如果关联的是id字段，那么可以省略不写</span></span><br><span class="line">    <span class="comment"># publish_id = models.ForeignKey(to=Publish)  # 如果关联的是id字段，那么可以省略不写</span></span><br><span class="line"></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        authors是一个虚拟字段，不会真正的在book表中创建出来这个字段</span></span><br><span class="line"><span class="string">        这个字段是关联第三张表的</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publish</span>(models.Model):</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">'AuthorDetail'</span>)</span><br><span class="line"><span class="comment"># 作者详情表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorDetail</span>(models.Model):</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">   </span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django之ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django三板斧</title>
      <link href="/2020/06/21/Django%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/2020/06/21/Django%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="django三板斧"><a href="#django三板斧" class="headerlink" title="django三板斧"></a>django三板斧</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django自动重启的现象叫‘热更新’</span></span><br><span class="line"><span class="comment"># 如果setting.py文件中DEBUG = False，则必须在ALLOWED_HOSTS = []中填写对应ip地址或者*号</span></span><br><span class="line"><span class="number">1.</span> HttpResponse</span><br><span class="line"><span class="number">2.</span> render</span><br><span class="line"><span class="number">3.</span> redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'123'</span>)</span><br><span class="line">    <span class="comment"># 暂且记忆返回值是字符串类型</span></span><br><span class="line">    <span class="comment"># return HttpResponse('hello django!')  # 返回给浏览器了</span></span><br><span class="line">    ctime = time.strftime(<span class="string">'%Y-%m-%d %X'</span>)</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">locals</span>())</span><br><span class="line">    <span class="comment"># return render(request, 'index.html', {'ctime11111':ctime, 'a':1, 'b':2})</span></span><br><span class="line">    <span class="comment"># return render(request, 'index.html', locals())</span></span><br><span class="line">    <span class="comment"># return redirect('http://www.baidu.com')</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/admin/'</span>)  <span class="comment"># ip+port/admin 括号内可跟链接地址，直接跳转</span></span><br></pre></td></tr></tbody></table></figure><h3 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">什么是静态文件</span><br><span class="line">css, js, jq, bootstrap, img...</span><br><span class="line"> eg:</span><br><span class="line">    以登录功能为例</span><br><span class="line"> <span class="comment"># 静态文件的存储路径一般是static，默认是没有这个文件夹的，所以，需要我们自己手动创建出来这个文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在static文件夹中还可以继续根据不同的功能进行划分</span></span><br><span class="line">js</span><br><span class="line">css</span><br><span class="line">lib</span><br><span class="line">img</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/static/css/bootstrap.min.css不能访问是因为后盾没有开放可访问的路径</span></span><br><span class="line"></span><br><span class="line">{<span class="comment"># 动态引入 #}</span></span><br><span class="line">    {% load static %}</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"{% static 'css/bootstrap-theme.min.css'%}"</span>&gt;</span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/aaaaa/'</span></span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>),  <span class="comment"># 这样一配置完成，静态路径的根就是static</span></span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static1'</span>),  <span class="comment"># 这样一配置完成，静态路径的根就是static</span></span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static2'</span>),  <span class="comment"># 这样一配置完成，静态路径的根就是static</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1. 什么都不写，提交到当前页面</span></span><br><span class="line"><span class="string">2. 全写：https://passport.baidu.com/v2/api/?login</span></span><br><span class="line"><span class="string">3. 只写后缀</span></span><br><span class="line"><span class="string">/login/  =&gt; 自动补全ip和端口</span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/login/</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">面试题：get和post的区别？</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/login/?a=<span class="number">1</span>&amp;b=<span class="number">2</span>&amp;c=<span class="number">3</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    get请求：</span></span><br><span class="line"><span class="string">    1. get没有请求体</span></span><br><span class="line"><span class="string">    2. 对数据大小的限制是4KB</span></span><br><span class="line"><span class="string">    3. 不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息</span></span><br><span class="line"><span class="string">    post请求：</span></span><br><span class="line"><span class="string">    1. post有请求体</span></span><br><span class="line"><span class="string">    2. 理论上对数据大小没有限制</span></span><br><span class="line"><span class="string">    3. 相对安全</span></span><br><span class="line"><span class="string">    '''</span>     </span><br><span class="line">    </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">MySQL中可能会出现的安全问题：SQL注入</span></span><br><span class="line"><span class="string">前端当中可能会出现的安全问题：xss攻击</span></span><br><span class="line"><span class="string">django中会出现的安全问题：csrf跨站请求</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 1. 如何判断请求方式？</span></span><br><span class="line">    <span class="built_in">print</span>(request)  <span class="comment"># &lt;WSGIRequest: GET '/login/'&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(request.method, <span class="built_in">type</span>(request.method))  <span class="comment"># GET &lt;WSGIRequest: GET '/login/'&gt;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment">#  2. 如何获取post请求方式的数据？</span></span><br><span class="line">        <span class="comment"># print(request.POST) # QueryDict: {'user': ['ly'], 'password': ['123']}&gt;</span></span><br><span class="line">        <span class="comment"># print(request.POST.get('username')) # ly</span></span><br><span class="line">        <span class="comment"># # get只能拿最后一个值</span></span><br><span class="line">        <span class="comment"># print(request.POST.get('hobby')) # ly</span></span><br><span class="line">        <span class="comment"># print(request.POST.getlist('hobby')) # 拿到所有的值</span></span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">'ly'</span> <span class="keyword">and</span> password ==<span class="string">'123'</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'登录成功'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'密码错误'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>,  )</span><br></pre></td></tr></tbody></table></figure><h3 id="django连接mysql"><a href="#django连接mysql" class="headerlink" title="django连接mysql"></a>django连接mysql</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接mysql的配置</span></span><br><span class="line">  <span class="string">'default'</span>: {</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'db8_3'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'123'</span>,</span><br><span class="line">        <span class="string">'CHARSET'</span>:<span class="string">'utf8'</span></span><br><span class="line">    }</span><br><span class="line">        </span><br><span class="line"><span class="comment"># django默认的操作mysql的模块是MySQLdb</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">在python3.6版本以下，需要加入下面两句话</span></span><br><span class="line"><span class="string">        需要先安装pymysql</span></span><br><span class="line"><span class="string">        pip3 install pymysql</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        import pymysql</span></span><br><span class="line"><span class="string">        pymysql.install_as_MySQLdb()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Django</title>
      <link href="/2020/06/20/%E5%88%9D%E8%AF%86Django/"/>
      <url>/2020/06/20/%E5%88%9D%E8%AF%86Django/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="web应用概念"><a href="#web应用概念" class="headerlink" title="web应用概念"></a>web应用概念</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">http的默认端口号：<span class="number">80</span></span><br><span class="line">https的默认端口号：<span class="number">443</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> web应用是什么？</span><br><span class="line">通过浏览器访问的应用都是</span><br><span class="line"><span class="number">2.</span> 软件开发模式：</span><br><span class="line">服务端需要具备的特征：<span class="number">24</span>小时对外提供服务</span><br><span class="line">C/S：client: 客户端， server: 服务端</span><br><span class="line">    B/S：browser: 浏览器，server：服务端</span><br><span class="line">    <span class="comment"># 本质上B/S架构也是C/S架构</span></span><br><span class="line"><span class="number">3.</span> Web应用程序的优点</span><br><span class="line"><span class="number">1.</span> 只需要一个浏览器</span><br><span class="line">    <span class="number">2.</span> 节省资源</span><br><span class="line">    <span class="number">3.</span> 客户端不需要主动更新，服务端更新即可</span><br><span class="line"><span class="number">4.</span> Web应用程序的缺点</span><br><span class="line"><span class="number">1.</span> 一旦服务端出现问题，客户端立马受影响</span><br><span class="line">    <span class="number">2.</span> 兼容性问题</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    web框架：就是在固定的位置书写固定的代码</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    python中的三大主流框架：</span><br><span class="line">    <span class="number">1.</span> Django框架：</span><br><span class="line">        大而全，类似于航空母舰</span><br><span class="line">        <span class="number">2.</span> flask框架：</span><br><span class="line">        小而精，依赖于第三方模块</span><br><span class="line">         <span class="number">3.</span> tornado框架：</span><br><span class="line">        异步高性能框架</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h3 id="MVC和MTV模式"><a href="#MVC和MTV模式" class="headerlink" title="MVC和MTV模式"></a>MVC和MTV模式</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> MVC:</span><br><span class="line">    M: model(跟数据打交道的)</span><br><span class="line">        V: View(视图， 页面)</span><br><span class="line">        C: controller(控制器，主要写逻辑的)</span><br><span class="line">        S:service (服务层)</span><br><span class="line"><span class="number">2.</span> MTV:</span><br><span class="line">    M: model(模型层：跟数据相关的)</span><br><span class="line">        T:template(模板：html页面)  </span><br><span class="line">        V：view(主要写逻辑的)</span><br></pre></td></tr></tbody></table></figure><h3 id="django下载与安装"><a href="#django下载与安装" class="headerlink" title="django下载与安装"></a>django下载与安装</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> django的版本问题：</span><br><span class="line">django1.x: 老项目再用</span><br><span class="line">    django2.x：新项目再用</span><br><span class="line">    django3.x：刚出来的</span><br><span class="line">    </span><br><span class="line"> <span class="comment"># 我们学习使用django1.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装django</span></span><br><span class="line">pip3 install django (最新版本)</span><br><span class="line">pip3 install django==<span class="number">1.1</span><span class="number">.29</span></span><br><span class="line"></span><br><span class="line">如何验证django是否安装成功？</span><br><span class="line"><span class="comment"># 在cmd中， 输入django-admin，如果有输出信息，就代表安装成功</span></span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h3 id="创建django项目"><a href="#创建django项目" class="headerlink" title="创建django项目"></a>创建django项目</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''你可以提前切换到项目要保存的位置'''</span></span><br><span class="line"><span class="number">1.</span> 命令行创建</span><br><span class="line">django-admin startproject 项目名</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> pycharm创建</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span> 命令行创建和pycharm创建的区别:</span><br><span class="line">     <span class="number">1.</span> pycharm创建：</span><br><span class="line">        自动生成templates文件夹</span><br><span class="line">        settings.py文件：</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        TEMPLATES = [</span></span><br><span class="line"><span class="string">                            {</span></span><br><span class="line"><span class="string">                                'BACKEND': 'django.template.backends.django.DjangoTemplates',</span></span><br><span class="line"><span class="string">                                'DIRS': [os.path.join(BASE_DIR, 'templates')]</span></span><br><span class="line"><span class="string">                                </span></span><br><span class="line"><span class="string">                                }</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">     <span class="number">2.</span> 命令行创建：</span><br><span class="line">    没有templates文件夹</span><br><span class="line">        settings.py文件：</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        TEMPLATES = [</span></span><br><span class="line"><span class="string">    {</span></span><br><span class="line"><span class="string">                            'BACKEND': 'django.template.backends.django.DjangoTemplates',</span></span><br><span class="line"><span class="string">                            'DIRS': [],</span></span><br><span class="line"><span class="string">                            }</span></span><br><span class="line"><span class="string">             ]</span></span><br><span class="line"><span class="string">        '''</span></span><br></pre></td></tr></tbody></table></figure><h3 id="启动django项目"><a href="#启动django项目" class="headerlink" title="启动django项目"></a>启动django项目</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''前提：先切换到manage.py所在的文件夹下面'''</span></span><br><span class="line"><span class="number">1.</span> 命令行启动</span><br><span class="line">python3 manage.py runserver</span><br><span class="line">    python3 manage.py runserver <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line">    python3 manage.py runserver <span class="number">8080</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">'''django的默认端口号：8000'''</span></span><br><span class="line"><span class="number">2.</span> pycharm启动</span><br><span class="line">点击pycharm绿色按钮</span><br></pre></td></tr></tbody></table></figure><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用：application  app</span></span><br><span class="line"></span><br><span class="line">我们刚刚创建的项目就类似于是一所大学，而创建的应用就类似于大学里面的二级学院</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">用户模块  user</span><br><span class="line">    订单模块  order</span><br><span class="line">    收货地址管理 :address</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">如何创建应用？</span><br><span class="line"><span class="number">1.</span> 命令行创建</span><br><span class="line">    <span class="comment"># python manage.py startapp 应用名</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        应用名：最好见名知意，就命名为：app01, app02...</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 一个django项目至少要有一个应用</span></span><br><span class="line">    <span class="number">2.</span> pycharm创建</span><br><span class="line">     Tools =&gt; run manage.py task</span><br><span class="line">    <span class="number">3.</span> 应用创建完成之后，第一件事去配置文件中注册应用</span><br><span class="line">    <span class="comment">###################################################</span></span><br><span class="line">        INSTALLED_APPS = [</span><br><span class="line">            <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">            <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">            <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">            <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">            <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">            <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">            <span class="string">'app01'</span>,</span><br><span class="line">            <span class="string">'app02'</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">###################################################</span></span><br></pre></td></tr></tbody></table></figure><h3 id="主要文件介绍"><a href="#主要文件介绍" class="headerlink" title="主要文件介绍"></a>主要文件介绍</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysite1  <span class="comment"># 项目名</span></span><br><span class="line">    app01  <span class="comment"># 应用名</span></span><br><span class="line">        migrations <span class="comment"># 迁移数据库的时候，会把迁移记录保存到这里来</span></span><br><span class="line">        __init__.py</span><br><span class="line">        admin.py   <span class="comment"># django自带的后台管理系统</span></span><br><span class="line">        apps.py    <span class="comment"># 忽略</span></span><br><span class="line">        models.py  <span class="comment"># 模型层，以后跟数据库相关的都在这个里面</span></span><br><span class="line">        tests.py   <span class="comment"># 测试脚本</span></span><br><span class="line">        views.py   <span class="comment"># view层，主要用来写逻辑的</span></span><br><span class="line">mysite1</span><br><span class="line">    __init__.py</span><br><span class="line">    settings.py   <span class="comment"># 整个django项目的全局配置文件</span></span><br><span class="line">    urls.py       <span class="comment"># 路由层，写的是路径与函数的对应关系</span></span><br><span class="line">    wsgi.py  <span class="comment"># wsgiref服务器， WSGI协议，uwsgi服务器</span></span><br><span class="line">templates         <span class="comment"># 写html页面的地方</span></span><br><span class="line">db.sqlite3        <span class="comment"># django自带的小型数据库， mysql，oracle</span></span><br><span class="line">manage.py  <span class="comment"># 启动文件，入口文件</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
