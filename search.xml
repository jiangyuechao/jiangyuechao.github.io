<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL面试</title>
      <link href="/2022/06/19/mysql%E9%87%8D%E7%82%B9/"/>
      <url>/2022/06/19/mysql%E9%87%8D%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="1-1-为什么要使⽤数据库"><a href="#1-1-为什么要使⽤数据库" class="headerlink" title="1.1 为什么要使⽤数据库"></a><strong>1.1</strong> <strong>为什么要使⽤数据库</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="strong">**数据保存在内存**</span></span><br><span class="line"></span><br><span class="line">优点： 存取速度快</span><br><span class="line"></span><br><span class="line">缺点： 数据不能永久保存</span><br><span class="line"></span><br><span class="line"><span class="strong">**数据保存在⽂件**</span></span><br><span class="line"></span><br><span class="line">优点： 数据永久保存</span><br><span class="line"></span><br><span class="line">缺点：1）速度⽐内存操作慢，频繁的IO操作。2）查询数据不⽅便</span><br><span class="line"></span><br><span class="line"><span class="strong">**数据保存在数据库**</span></span><br><span class="line"></span><br><span class="line">1）数据永久保存</span><br><span class="line"></span><br><span class="line">2）使⽤SQL语句，查询⽅便效率⾼。</span><br><span class="line"></span><br><span class="line">3）管理数据⽅便</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-什么是SQL？"><a href="#1-2-什么是SQL？" class="headerlink" title="1.2 什么是SQL？"></a><strong>1.2</strong> <strong>什么是</strong>SQL？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">结构化查询语⾔(Structured Query Language)简称SQL，是⼀种数据库查询语⾔。</span><br><span class="line"></span><br><span class="line">作⽤：⽤于存取数据、查询、更新和管理关系数据库系统。</span><br></pre></td></tr></tbody></table></figure><h3 id="1-3-什么是MySQL"><a href="#1-3-什么是MySQL" class="headerlink" title="1.3 什么是MySQL?"></a><strong>1.3</strong> <strong>什么是</strong>MySQL?</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">MySQL是⼀个关系型数据库管理系统，由瑞典MySQL AB 公司开发，属于 Oracle 旗下产品。MySQL 是最流⾏的</span><br><span class="line"></span><br><span class="line">关系型数据库管理系统之⼀，在 WEB 应⽤⽅⾯，MySQL是最好的 RDBMS (Relational Database Management</span><br><span class="line"></span><br><span class="line">System，关系数据库管理系统) 应⽤软件之⼀。在Java企业级开发中⾮常常⽤，因为 MySQL 是开源免费的，并且</span><br><span class="line"></span><br><span class="line">⽅便扩展。</span><br></pre></td></tr></tbody></table></figure><h3 id="1-4-数据库三⼤范式是什么"><a href="#1-4-数据库三⼤范式是什么" class="headerlink" title="1.4 数据库三⼤范式是什么"></a><strong>1.4</strong> <strong>数据库三⼤范式是什么</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">第⼀范式：每个列都不可以再拆分。</span><br><span class="line"></span><br><span class="line">第⼆范式：在第⼀范式的基础上，⾮主键列完全依赖于主键，⽽不能是依赖于主键的⼀部分。</span><br><span class="line"></span><br><span class="line">第三范式：在第⼆范式的基础上，⾮主键列只依赖于主键，不依赖于其他⾮主键。</span><br><span class="line"></span><br><span class="line">在设计数据库结构的时候，要尽量遵守三范式，如果不遵守，必须有⾜够的理由。⽐如性能。事实上我们经常会为</span><br><span class="line"></span><br><span class="line">了性能⽽妥协数据库的设计。</span><br></pre></td></tr></tbody></table></figure><h3 id="1-5-mysql有关权限的表都有哪⼏个"><a href="#1-5-mysql有关权限的表都有哪⼏个" class="headerlink" title="1.5 mysql有关权限的表都有哪⼏个"></a><strong>1.5 mysql</strong>有关权限的表都有哪⼏个</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">MySQL服务器通过权限表来控制⽤户对数据库的访问，权限表存放在mysql数据库⾥，由mysql<span class="emphasis">_install_</span>db脚本初</span><br><span class="line"></span><br><span class="line">始化。这些权限表分别user，db，table<span class="emphasis">_priv，columns_</span>priv和host。下⾯分别介绍⼀下这些表的结构和内容：</span><br><span class="line"></span><br><span class="line">user权限表：记录允许连接到服务器的⽤户帐号信息，⾥⾯的权限是全局级的。</span><br><span class="line"></span><br><span class="line">db权限表：记录各个帐号在各个数据库上的操作权限。</span><br><span class="line"></span><br><span class="line">table<span class="emphasis">_priv权限表：记录数据表级的操作权限。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">columns_</span>priv权限表：记录数据列级的操作权限。</span><br><span class="line"></span><br><span class="line">host权限表：配合db权限表对给定主机上数据库级操作权限作更细致的控制。这个权限表不受GRANT和</span><br><span class="line"></span><br><span class="line">REVOKE语句的影响。</span><br></pre></td></tr></tbody></table></figure><h3 id="1-6-MySQL的binlog有有⼏种录⼊格式？分别有什么区别？"><a href="#1-6-MySQL的binlog有有⼏种录⼊格式？分别有什么区别？" class="headerlink" title="1.6 MySQL的binlog有有⼏种录⼊格式？分别有什么区别？"></a><strong>1.6 MySQL</strong>的binlog有有⼏种录⼊格式？分别有什么区别？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">有三种格式，statement，row和mixed。statement模式下，每⼀条会修改数据的sql都会记录在binlog中。不需要记录每⼀⾏的变化，减少了binlog⽇志量，节约了IO，提⾼性能。由于sql的执⾏是有上下⽂的，因此在保存的时候需要保存相关的信息，同时还有⼀些使⽤了函数之类的语句⽆法被记录复制。</span><br><span class="line"></span><br><span class="line">row级别下，不记录sql语句上下⽂相关信息，仅保存哪条记录被修改。记录单元为每⼀⾏的改动，基本是可以</span><br><span class="line"></span><br><span class="line">全部记下来但是由于很多操作，会导致⼤量⾏的改动(⽐如alter table)，因此这种模式的⽂件保存的信息太多，⽇志量太⼤。</span><br><span class="line"></span><br><span class="line">mixed，⼀种折中的⽅案，普通操作使⽤statement记录，当⽆法使⽤statement的时候使⽤row。</span><br><span class="line"></span><br><span class="line">此外，新版的MySQL中对row级别也做了⼀些优化，当表结构发⽣变化的时候，会记录语句⽽不是逐⾏记录。</span><br></pre></td></tr></tbody></table></figure><h1 id="⼆-数据类型和引擎分类"><a href="#⼆-数据类型和引擎分类" class="headerlink" title="⼆ 数据类型和引擎分类"></a>⼆ 数据类型和引擎<strong>分类</strong></h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="strong">**类型名称**</span> <span class="strong">**说明**</span><span class="strong">**整数类型**</span> </span><br><span class="line"></span><br><span class="line">tinyInt 很⼩的整数(8位⼆进制)</span><br><span class="line"></span><br><span class="line">smallint ⼩的整数(16位⼆进制)</span><br><span class="line"></span><br><span class="line">mediumint 中等⼤⼩的整数(24位⼆进制)</span><br><span class="line"></span><br><span class="line">int(integer) 普通⼤⼩的整数(32位⼆进制)</span><br><span class="line"></span><br><span class="line"><span class="strong">**⼩数类型**</span> </span><br><span class="line"></span><br><span class="line">float 单精度浮点数</span><br><span class="line"></span><br><span class="line">double 双精度浮点数</span><br><span class="line"></span><br><span class="line">decimal(m,d) 压缩严格的定点数</span><br><span class="line"></span><br><span class="line"><span class="strong">**⽇期类型**</span> </span><br><span class="line"></span><br><span class="line">year </span><br><span class="line"></span><br><span class="line">YYYY 1901~2155</span><br><span class="line"></span><br><span class="line">time </span><br><span class="line"></span><br><span class="line">HH:MM:SS -838:59:59~838:59:59</span><br><span class="line"></span><br><span class="line">date </span><br><span class="line"></span><br><span class="line">YYYY-MM-DD 1000-01-01~9999-12-3</span><br><span class="line"></span><br><span class="line">datetime </span><br><span class="line"></span><br><span class="line">YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59</span><br><span class="line"></span><br><span class="line">timestamp </span><br><span class="line"></span><br><span class="line">YYYY-MM-DD HH:MM:SS 19700101 00:00:01 UTC~2038-01-19 03:14:07UTC</span><br><span class="line"></span><br><span class="line"><span class="strong">**⽂本、⼆进制类**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**型**</span></span><br><span class="line"></span><br><span class="line">CHAR(M) M为0~255之间的整数</span><br><span class="line"></span><br><span class="line">VARCHAR(M) M为0~65535之间的整数</span><br><span class="line"></span><br><span class="line">TINYBLOB 允许⻓度0~255字节</span><br><span class="line"></span><br><span class="line">BLOB 允许⻓度0~65535字节</span><br><span class="line"></span><br><span class="line">MEDIUMBLOB 允许⻓度0~167772150字节</span><br><span class="line"></span><br><span class="line">LONGBLOB 允许⻓度0~4294967295字节</span><br><span class="line"></span><br><span class="line">TINYTEXT 允许⻓度0~255字节</span><br><span class="line"></span><br><span class="line">TEXT 允许⻓度0~65535字节</span><br><span class="line"></span><br><span class="line">MEDIUMTEXT 允许⻓度0~167772150字节</span><br><span class="line"></span><br><span class="line">LONGTEXT 允许⻓度0~4294967295字节</span><br><span class="line"></span><br><span class="line">VARBINARY(M) 允许⻓度0~M个字节的变⻓字节字符串</span><br><span class="line"></span><br><span class="line">BINARY(M) 允许⻓度0~M个字节的定⻓字节字符串</span><br></pre></td></tr></tbody></table></figure><h3 id="2-1-mysql有哪些数据类型"><a href="#2-1-mysql有哪些数据类型" class="headerlink" title="2.1 mysql有哪些数据类型"></a><strong>2.1 mysql</strong>有哪些数据类型</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">1、整数类型 ，包括TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT，分别表示1字节、2字节、3字节、4</span><br><span class="line"></span><br><span class="line">字节、8字节整数。任何整数类型都可以加上UNSIGNED属性，表示数据是⽆符号的，即⾮负整数。</span><br><span class="line"></span><br><span class="line">⻓度 ：整数类型可以被指定⻓度，例如：INT(11)表示⻓度为11的INT类型。⻓度在⼤多数场景是没有意义的，</span><br><span class="line"></span><br><span class="line">它不会限制值的合法范围，只会影响显示字符的个数，⽽且需要和UNSIGNED ZEROFILL属性配合使⽤才有意</span><br><span class="line"></span><br><span class="line">义。</span><br><span class="line"></span><br><span class="line">例⼦ ，假定类型设定为INT(5)，属性为UNSIGNED ZEROFILL，如果⽤户插⼊的数据为12的话，那么数据库实</span><br><span class="line"></span><br><span class="line">际存储数据为00012。 </span><br><span class="line"></span><br><span class="line">2、实数类型 ，包括FLOAT、DOUBLE、DECIMAL。</span><br><span class="line"></span><br><span class="line">DECIMAL可以⽤于存储⽐BIGINT还⼤的整型，能存储精确的⼩数。⽽FLOAT和DOUBLE是有取值范围的，并⽀持使⽤标准的浮点进⾏近似计算。</span><br><span class="line"></span><br><span class="line">计算时FLOAT和DOUBLE相⽐DECIMAL效率更⾼⼀些，DECIMAL你可以理解成是⽤字符串进⾏处理。</span><br><span class="line"></span><br><span class="line">3、字符串类型 ，包括VARCHAR、CHAR、TEXT、BLOB</span><br><span class="line"></span><br><span class="line">VARCHAR⽤于存储可变⻓字符串，它⽐定⻓类型更节省空间。</span><br><span class="line"></span><br><span class="line">VARCHAR使⽤额外1或2个字节存储字符串⻓度。列⻓度⼩于255字节时，使⽤1字节表示，否则使⽤2字节表</span><br><span class="line"></span><br><span class="line">示。</span><br><span class="line"></span><br><span class="line">VARCHAR存储的内容超出设置的⻓度时，内容会被截断。</span><br><span class="line"></span><br><span class="line">CHAR是定⻓的，根据定义的字符串⻓度分配⾜够的空间。</span><br><span class="line"></span><br><span class="line">CHAR会根据需要使⽤空格进⾏填充⽅便⽐较。</span><br><span class="line"></span><br><span class="line">CHAR适合存储很短的字符串，或者所有值都接近同⼀个⻓度。</span><br><span class="line"></span><br><span class="line">CHAR存储的内容超出设置的⻓度时，内容同样会被截断。</span><br><span class="line"></span><br><span class="line"><span class="strong">**使⽤策略：**</span></span><br><span class="line"></span><br><span class="line">对于经常变更的数据来说，CHAR⽐VARCHAR更好，因为CHAR不容易产⽣碎⽚。</span><br><span class="line"></span><br><span class="line">对于⾮常短的列，CHAR⽐VARCHAR在存储空间上更有效率。</span><br><span class="line"></span><br><span class="line">使⽤时要注意只分配需要的空间，更⻓的列排序时会消耗更多内存。尽量避免使⽤TEXT/BLOB类型，查询时会使⽤临时表，导致严重的性能开销。</span><br><span class="line"></span><br><span class="line">4、枚举类型（ENUM） ，把不重复的数据存储为⼀个预定义的集合。</span><br><span class="line"></span><br><span class="line">有时可以使⽤ENUM代替常⽤的字符串类型。</span><br><span class="line"></span><br><span class="line">ENUM存储⾮常紧凑，会把列表值压缩到⼀个或两个字节。</span><br><span class="line"></span><br><span class="line">ENUM在内部存储时，其实存的是整数。</span><br><span class="line"></span><br><span class="line">尽量避免使⽤数字作为ENUM枚举的常量，因为容易混乱。</span><br><span class="line"></span><br><span class="line">排序是按照内部存储的整数</span><br><span class="line"></span><br><span class="line">5、⽇期和时间类型 ，尽量使⽤timestamp，空间效率⾼于datetime，</span><br><span class="line"></span><br><span class="line">⽤整数保存时间戳通常不⽅便处理。如果需要存储微妙，可以使⽤bigint存储。</span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-MySQL存储引擎MyISAM与InnoDB区别"><a href="#2-2-MySQL存储引擎MyISAM与InnoDB区别" class="headerlink" title="2.2 MySQL存储引擎MyISAM与InnoDB区别"></a><strong>2.2 MySQL</strong>存储引擎MyISAM与InnoDB区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">存储引擎Storage engine：MySQL中的数据、索引以及其他对象是如何存储的，是⼀套⽂件系统的实现。</span><br><span class="line"></span><br><span class="line">常⽤的存储引擎有以下：</span><br><span class="line"></span><br><span class="line"><span class="strong">**Innodb**</span>引擎：Innodb引擎提供了对数据库ACID事务的⽀持。并且还提供了⾏级锁和外键的约束。它的设计的</span><br><span class="line"></span><br><span class="line">⽬标就是处理⼤数据容量的数据库系统。</span><br><span class="line"></span><br><span class="line"><span class="strong">**MyIASM**</span>引擎(原本Mysql的默认引擎)：不提供事务的⽀持，也不⽀持⾏级锁和外键。</span><br><span class="line"></span><br><span class="line"><span class="strong">**MEMORY**</span>引擎：所有的数据都在内存中，数据的处理速度快，但是安全性不⾼。</span><br><span class="line"></span><br><span class="line">MyISAM与InnoDB区别MyISAM</span><br><span class="line"></span><br><span class="line"><span class="strong">**Innodb**</span></span><br><span class="line"></span><br><span class="line">存储结构 </span><br><span class="line"></span><br><span class="line">每张表被存放在三个⽂件：frm-表格定义、MYD(MYData)-数据⽂件、MYI(MYIndex)-索引⽂件</span><br><span class="line"></span><br><span class="line">所有的表都保存在同⼀个数据⽂件中（也可能是多个⽂件，或者是独⽴的表空间⽂件），InnoDB表的⼤⼩只受限于操作系统⽂件的⼤⼩，⼀般为2GB存储空间 MyISAM可被压缩，存储空间较⼩ InnoDB的表需要更多的内存和存储，它会在主内存中建⽴其专⽤的缓冲池⽤于⾼速缓冲</span><br><span class="line"></span><br><span class="line">数据和索引可移植性、备份及恢复</span><br><span class="line"></span><br><span class="line">由于MyISAM的数据是以⽂件的形式存储，所以在跨平台的数据转移中会很⽅便。在备份和恢复时可单独针对某个表进⾏操作免费的⽅案可以是拷⻉数据⽂件、备份binlog，或者⽤ mysqldump，在数据量达到⼏⼗G的时候就相对痛苦了</span><br><span class="line"></span><br><span class="line">⽂件格式 </span><br><span class="line"></span><br><span class="line">数据和索引是分别存储的，数据 .MYD ，索引 .MYI数据和索引是集中存储的， .ibd记录存储顺序 按记录插⼊顺序保存 按主键⼤⼩有序插⼊</span><br><span class="line"></span><br><span class="line">外键 不⽀持 </span><br><span class="line"></span><br><span class="line">⽀持事务 </span><br><span class="line"></span><br><span class="line">锁⽀持（锁是避免资源争⽤的⼀个机制，MySQL锁对⽤户⼏乎是透明的）</span><br><span class="line"></span><br><span class="line">表级锁定 ⾏级锁定、表级锁定，锁定⼒度⼩并发能⼒⾼</span><br><span class="line"></span><br><span class="line">SELECT  MyISAM更优</span><br><span class="line"></span><br><span class="line">INSERT、UPDATE、DELETEInnoDB更优</span><br><span class="line"></span><br><span class="line">select count(<span class="emphasis">*) </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">myisam更快，因为myisam内部维护了⼀个计数器，可以直接调取。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">索引的实现⽅式 </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">B+树索引，myisam 是堆表 </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">B+树索引，Innodb 是索引组织表</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-3-MyISAM索引与InnoDB索引的区别？"><a href="#2-3-MyISAM索引与InnoDB索引的区别？" class="headerlink" title="2.3 MyISAM索引与InnoDB索引的区别？"></a><strong>2.3 MyISAM</strong>索引与InnoDB索引的区别？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">InnoDB索引是聚簇索引，MyISAM索引是⾮聚簇索引。</span><br><span class="line"></span><br><span class="line">InnoDB的主键索引的叶⼦节点存储着⾏数据，因此主键索引⾮常⾼效。</span><br><span class="line"></span><br><span class="line">MyISAM索引的叶⼦节点存储的是⾏数据地址，需要再寻址⼀次才能得到数据。</span><br><span class="line"></span><br><span class="line">InnoDB⾮主键索引的叶⼦节点存储的是主键和其他带索引的列数据，因此查询时做到覆盖索引会⾮常⾼效。<span class="strong">**2.4 InnoDB**</span><span class="strong">**引擎的**</span><span class="strong">**4**</span><span class="strong">**⼤特性**</span></span><br><span class="line"></span><br><span class="line">插⼊缓冲（insert buffer)</span><br><span class="line"></span><br><span class="line">⼆次写(double write)</span><br><span class="line"></span><br><span class="line">⾃适应哈希索引(ahi)</span><br><span class="line"></span><br><span class="line">预读(read ahead)</span><br><span class="line"></span><br><span class="line"><span class="strong">**存储引擎选择**</span></span><br><span class="line"></span><br><span class="line">如果没有特别的需求，使⽤默认的 Innodb 即可。</span><br><span class="line"></span><br><span class="line">MyISAM：以读写插⼊为主的应⽤程序，⽐如博客系统、新闻⻔户⽹站。</span><br><span class="line"></span><br><span class="line">Innodb：更新（删除）操作频率也⾼，或者要保证数据的完整性；并发量⾼，⽀持事务和外键。⽐如OA⾃动化办</span><br><span class="line"></span><br><span class="line">公系统。</span><br></pre></td></tr></tbody></table></figure><h1 id="三-索引"><a href="#三-索引" class="headerlink" title="三 索引"></a>三 索引</h1><h3 id="3-1-什么是索引？"><a href="#3-1-什么是索引？" class="headerlink" title="3.1 什么是索引？"></a><strong>3.1</strong> <strong>什么是索引？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">索引是⼀种特殊的⽂件(InnoDB数据表上的索引是表空间的⼀个组成部分)，它们包含着对数据表⾥所有记录的引⽤</span><br><span class="line"></span><br><span class="line">指针。</span><br><span class="line"></span><br><span class="line">索引是⼀种数据结构。数据库索引，是数据库管理系统中⼀个排序的数据结构，以协助快速查询、更新数据库表中</span><br><span class="line"></span><br><span class="line">数据。索引的实现通常使⽤B树及其变种B+树。</span><br><span class="line"></span><br><span class="line">更通俗的说，索引就相当于⽬录。为了⽅便查找书中的内容，通过对内容建⽴索引形成⽬录。索引是⼀个⽂件，它</span><br><span class="line"></span><br><span class="line">是要占据物理空间的。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-索引有哪些优缺点？"><a href="#3-2-索引有哪些优缺点？" class="headerlink" title="3.2 索引有哪些优缺点？"></a><strong>3.2</strong> <strong>索引有哪些优缺点？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">索引的优点</span><br><span class="line"></span><br><span class="line">可以⼤⼤加快数据的检索速度，这也是创建索引的最主要的原因。</span><br><span class="line"></span><br><span class="line">通过使⽤索引，可以在查询的过程中，使⽤优化隐藏器，提⾼系统的性能。</span><br><span class="line"></span><br><span class="line">索引的缺点</span><br><span class="line"></span><br><span class="line">时间⽅⾯：创建索引和维护索引要耗费时间，具体地，当对表中的数据进⾏增加、删除和修改的时候，索引也</span><br><span class="line"></span><br><span class="line">要动态的维护，会降低增/改/删的执⾏效率；</span><br><span class="line"></span><br><span class="line">空间⽅⾯：索引需要占物理空间。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-索引使⽤场景（重点）"><a href="#3-3-索引使⽤场景（重点）" class="headerlink" title="3.3 索引使⽤场景（重点）"></a><strong>3.3</strong> <strong>索引使⽤场景（重点）</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">### where</span></span><br><span class="line"></span><br><span class="line">上图中，根据 id 查询记录，因为 id 字段仅建⽴了主键索引，因此此SQL执⾏可选的索引只有主键索引，如果有</span><br><span class="line"></span><br><span class="line">多个，最终会选⼀个较优的作为检索的依据。</span><br><span class="line"></span><br><span class="line">可以尝试在⼀个字段未建⽴索引时，根据该字段查询的效率，然后对该字段建⽴索引（ alter table 表 </span><br><span class="line"></span><br><span class="line">名 add index(字段名) ），同样的SQL执⾏的效率，你会发现查询效率会有明显的提升（数据量越⼤越明</span><br><span class="line"></span><br><span class="line">显）。</span><br><span class="line"></span><br><span class="line"><span class="section">### order by</span></span><br><span class="line"></span><br><span class="line">当我们使⽤ order by 将查询结果按照某个字段排序时，如果该字段没有建⽴索引，那么执⾏计划会将查询出的所</span><br><span class="line"></span><br><span class="line">有数据使⽤外部排序（将数据从硬盘分批读取到内存使⽤内部排序，最后合并排序结果），这个操作是很影响性能</span><br><span class="line"></span><br><span class="line">的，因为需要将查询涉及到的所有数据从磁盘中读到内存（如果单条数据过⼤或者数据量过多都会降低效率），更</span><br><span class="line"></span><br><span class="line">⽆论读到内存之后的排序了。</span><br><span class="line"></span><br><span class="line">但是如果我们对该字段建⽴索引 alter table 表名 add index(字段名) ，那么由于索引本身是有序的，因此直接按</span><br><span class="line"></span><br><span class="line">照索引的顺序和映射关系逐条取出数据即可。⽽且如果分⻚的，那么只⽤<span class="strong">**取出索引表某个范围内的索引对应的数**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**据**</span>，⽽不⽤像上述那<span class="strong">**取出所有数据**</span>进⾏排序再返回某个范围内的数据。（从磁盘取数据是最影响性能的）</span><br><span class="line"></span><br><span class="line">-- 增加⼀个没有建⽴索引的字段</span><br><span class="line"></span><br><span class="line">alter table innodb1 add sex char(1);</span><br><span class="line"></span><br><span class="line">-- 按sex检索时可选的索引为null</span><br><span class="line"></span><br><span class="line">EXPLAIN SELECT <span class="emphasis">* from innodb1 where sex='男';</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">### join</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">对 join 语句匹配关系（ on ）涉及的字段建⽴索引能够提⾼效率</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">索引覆盖</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">如果要查询的字段都建⽴过索引，那么引擎会直接在索引表中查询⽽不会访问原始数据（否则只要有⼀个字段没有</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">建⽴索引就会做全表扫描），这叫索引覆盖。因此我们需要尽可能的在 select 后只写必要的查询字段，以增加索</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">引覆盖的⼏率。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">这⾥值得注意的是不要想着为每个字段建⽴索引，因为优先使⽤索引的优势就在于其体积⼩。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-索引有哪种类型？"><a href="#3-4-索引有哪种类型？" class="headerlink" title="3.4 索引有哪种类型？"></a><strong>3.4</strong> <strong>索引有哪种类型？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="strong">**主键索引**</span><span class="strong">**:**</span> 数据列不允许重复，不允许为NULL，⼀个表只能有⼀个主键。</span><br><span class="line"></span><br><span class="line"><span class="strong">**唯⼀索引**</span><span class="strong">**:**</span> 数据列不允许重复，允许为NULL值，⼀个表允许多个列创建唯⼀索引。</span><br><span class="line"></span><br><span class="line">可以通过 ALTER TABLE table<span class="emphasis">_name ADD UNIQUE (column); 创建唯⼀索引</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">可以通过 ALTER TABLE table_</span>name ADD UNIQUE (column1,column2); 创建唯⼀组合索引</span><br><span class="line"></span><br><span class="line"><span class="strong">**普通索引**</span><span class="strong">**:**</span> 基本的索引类型，没有唯⼀性的限制，允许为NULL值。</span><br><span class="line"></span><br><span class="line">可以通过 ALTER TABLE table<span class="emphasis">_name ADD INDEX index_</span>name (column); 创建普通索引</span><br><span class="line"></span><br><span class="line">可以通过 ALTER TABLE table<span class="emphasis">_name ADD INDEX index_</span>name(column1, column2, column3); 创建组合索引</span><br><span class="line"></span><br><span class="line"><span class="strong">**全⽂索引：**</span> 是⽬前搜索引擎使⽤的⼀种关键技术。</span><br><span class="line"></span><br><span class="line">可以通过 ALTER TABLE table<span class="emphasis">_name ADD FULLTEXT (column); 创建全⽂索引</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-5-索引的数据结构（b树，hash）"><a href="#3-5-索引的数据结构（b树，hash）" class="headerlink" title="3.5 索引的数据结构（b树，hash）"></a><strong>3.5</strong> <strong>索引的数据结构（</strong>b树，hash）</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">索引的数据结构和具体存储引擎的实现有关，在MySQL中使⽤较多的索引有<span class="strong">**Hash**</span><span class="strong">**索引**</span>，<span class="strong">**B+**</span><span class="strong">**树索引**</span>等，⽽我们经常</span><br><span class="line"></span><br><span class="line">使⽤的InnoDB存储引擎的默认索引实现为：B+树索引。对于哈希索引来说，底层的数据结构就是哈希表，因此在</span><br><span class="line"></span><br><span class="line">绝⼤多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余⼤部分场景，建议选择BTree索</span><br><span class="line"></span><br><span class="line">引。</span><br><span class="line"></span><br><span class="line">1）B树索引</span><br><span class="line"></span><br><span class="line">mysql通过存储引擎取数据，基本上90%的⼈⽤的就是InnoDB了，按照实现⽅式分，InnoDB的索引类型⽬前只有</span><br><span class="line"></span><br><span class="line">两种：BTREE（</span><br><span class="line"></span><br><span class="line">B树）索引和HASH索引。B树索引是Mysql数据库中使⽤最频繁的索引类型，基本所有存储引擎都</span><br><span class="line"></span><br><span class="line">⽀持BTree索引。通常我们说的索引不出意外指的就是（</span><br><span class="line"></span><br><span class="line">B树）索引（实际是⽤B+树实现的，因为在查看表索引</span><br><span class="line"></span><br><span class="line">时，mysql⼀律打印BTREE，所以简称为B树索引）查询⽅式：</span><br><span class="line"></span><br><span class="line">主键索引区:PI(关联保存的时数据的地址)按主键查询,</span><br><span class="line"></span><br><span class="line">普通索引区:si(关联的id的地址,然后再到达上⾯的地址)。所以按主键查询,速度最快</span><br><span class="line"></span><br><span class="line">B+tree性质：</span><br><span class="line"></span><br><span class="line">1.）n棵⼦tree的节点包含n个关键字，不⽤来保存数据⽽是保存数据的索引。</span><br><span class="line"></span><br><span class="line">2.）所有的叶⼦结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶⼦结点本身依关键字的⼤</span><br><span class="line"></span><br><span class="line">⼩⾃⼩⽽⼤顺序链接。</span><br><span class="line"></span><br><span class="line">3.）所有的⾮终端结点可以看成是索引部分，结点中仅含其⼦树中的最⼤（或最⼩）关键字。</span><br><span class="line"></span><br><span class="line">4.）B+ 树中，数据对象的插⼊和删除仅在叶节点上进⾏。</span><br><span class="line"></span><br><span class="line">5.）B+树有2个头指针，⼀个是树的根节点，⼀个是最⼩关键码的叶节点。</span><br><span class="line"></span><br><span class="line">2）哈希索引</span><br><span class="line"></span><br><span class="line">简要说下，类似于数据结构中简单实现的HASH表（散列表）⼀样，当我们在mysql中⽤哈希索引时，主要就是通</span><br><span class="line"></span><br><span class="line">过Hash算法（常⻅的Hash算法有直接定址法、平⽅取中法、折叠法、除数取余法、随机数法），将数据库字段数</span><br><span class="line"></span><br><span class="line">据转换成定⻓的Hash值，与这条数据的⾏指针⼀并存⼊Hash表的对应位置；如果发⽣Hash碰撞（两个不同关键字</span><br><span class="line"></span><br><span class="line">的Hash值相同），则在对应Hash键下以链表形式存储。当然这只是简略模拟图。<span class="strong">**3.6**</span> <span class="strong">**索引的基本原理**</span></span><br><span class="line"></span><br><span class="line">索引⽤来快速地寻找那些具有特定值的记录。如果没有索引，⼀般来说执⾏查询时遍历整张表。</span><br><span class="line"></span><br><span class="line">索引的原理很简单，就是把⽆序的数据变成有序的查询</span><br><span class="line"></span><br><span class="line">\1. 把创建了索引的列的内容进⾏排序</span><br><span class="line"></span><br><span class="line">\2. 对排序结果⽣成倒排表</span><br><span class="line"></span><br><span class="line">\3. 在倒排表内容上拼上数据地址链</span><br><span class="line"></span><br><span class="line">\4. 在查询的时候，先拿到倒排表内容，再取出数据地址链，从⽽拿到具体数据</span><br></pre></td></tr></tbody></table></figure><h3 id="3-7-索引算法有哪些？"><a href="#3-7-索引算法有哪些？" class="headerlink" title="3.7 索引算法有哪些？"></a><strong>3.7</strong> <strong>索引算法有哪些？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">索引算法有 BTree算法和Hash算法</span><br><span class="line"></span><br><span class="line"><span class="strong">**BTree**</span><span class="strong">**算法**</span></span><br><span class="line"></span><br><span class="line">BTree是最常⽤的mysql数据库索引算法，也是mysql默认的算法。因为它不仅可以被⽤在=,&gt;,&gt;=,&lt;,&lt;=和between这</span><br><span class="line"></span><br><span class="line">些⽐较操作符上，⽽且还可以⽤于like操作符，只要它的查询条件是⼀个不以通配符开头的常量， 例如：</span><br><span class="line"></span><br><span class="line"><span class="strong">**Hash**</span><span class="strong">**算法**</span></span><br><span class="line"></span><br><span class="line">-- 只要它的查询条件是⼀个不以通配符开头的常量</span><br><span class="line"></span><br><span class="line">select <span class="emphasis">* from user where name like 'jack%';</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">-- 如果⼀通配符开头，或者没有使⽤常量，则不会使⽤索引，例如：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select *</span> from user where name like '%jack';</span><br><span class="line"></span><br><span class="line">1234Hash Hash索引只能⽤于对等⽐较，例如=,&lt;=&gt;（相当于=）操作符。由于是⼀次定位数据，不像BTree索引需要从</span><br><span class="line"></span><br><span class="line">根节点到枝节点，最后才能访问到⻚节点这样多次IO访问，所以检索效率远⾼于BTree索引。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-8-索引设计的原则？"><a href="#3-8-索引设计的原则？" class="headerlink" title="3.8 索引设计的原则？"></a><strong>3.8</strong> <strong>索引设计的原则？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">\1. 适合索引的列是出现在where⼦句中的列，或者连接⼦句中指定的列</span><br><span class="line"></span><br><span class="line">\2. 基数较⼩的类，索引效果较差，没有必要在此列建⽴索引</span><br><span class="line"></span><br><span class="line">\3. 使⽤短索引，如果对⻓字符串列进⾏索引，应该指定⼀个前缀⻓度，这样能够节省⼤量索引空间</span><br><span class="line"></span><br><span class="line">\4. 不要过度索引。索引需要额外的磁盘空间，并降低写操作的性能。在修改表内容的时候，索引会进⾏更新甚⾄</span><br><span class="line"></span><br><span class="line">重构，索引列越多，这个时间就会越⻓。所以只保持需要的索引有利于查询即可。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-9-创建索引的原则（重中之重）"><a href="#3-9-创建索引的原则（重中之重）" class="headerlink" title="3.9 创建索引的原则（重中之重）"></a><strong>3.9</strong> <strong>创建索引的原则（重中之重）</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">索引虽好，但也不是⽆限制的使⽤，最好符合⼀下⼏个原则</span><br><span class="line"></span><br><span class="line">1） 最左前缀匹配原则，组合索引⾮常重要的原则，mysql会⼀直向右匹配直到遇到范围查询(&gt;、&lt;、between、</span><br><span class="line"></span><br><span class="line">like)就停⽌匹配，⽐如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建⽴(a,b,c,d)顺序的索引，d是⽤不到索引的，如果</span><br><span class="line"></span><br><span class="line">建⽴(a,b,d,c)的索引则都可以⽤到，a,b,d的顺序可以任意调整。</span><br><span class="line"></span><br><span class="line">2）较频繁作为查询条件的字段才去创建索引</span><br><span class="line"></span><br><span class="line">3）更新频繁字段不适合创建索引</span><br><span class="line"></span><br><span class="line">4）若是不能有效区分数据的列不适合做索引列(如性别，男⼥未知，最多也就三种，区分度实在太低) </span><br><span class="line"></span><br><span class="line">5）尽量的扩展索引，不要新建索引。⽐如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引</span><br><span class="line"></span><br><span class="line">即可。</span><br><span class="line"></span><br><span class="line">6）定义有外键的数据列⼀定要建⽴索引。</span><br><span class="line"></span><br><span class="line">7）对于那些查询中很少涉及的列，重复值⽐较多的列不要建⽴索引。</span><br><span class="line"></span><br><span class="line">8）对于定义为text、image和bit的数据类型的列不要建⽴索引。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-10-创建索引的三种⽅式，删除索引"><a href="#3-10-创建索引的三种⽅式，删除索引" class="headerlink" title="3.10 创建索引的三种⽅式，删除索引"></a><strong>3.10</strong> <strong>创建索引的三种⽅式，删除索引</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">第⼀种⽅式：在执⾏CREATE TABLE时创建索引CREATE TABLE user<span class="emphasis">_index2 (</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> id INT auto_</span>increment PRIMARY KEY,</span><br><span class="line"></span><br><span class="line"> first<span class="emphasis">_name VARCHAR (16),</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> last_</span>name VARCHAR (16),</span><br><span class="line"></span><br><span class="line"> id<span class="emphasis">_card VARCHAR (18),</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> information text,</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> KEY name (first_</span>name, last<span class="emphasis">_name),</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> FULLTEXT KEY (information),</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> UNIQUE KEY (id_</span>card)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">12345678910</span><br><span class="line"></span><br><span class="line">第⼆种⽅式：使⽤ALTER TABLE命令去增加索引</span><br><span class="line"></span><br><span class="line">ALTER TABLE table<span class="emphasis">_name ADD INDEX index_</span>name (column<span class="emphasis">_list);</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">1</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">ALTER TABLE⽤来创建普通索引、UNIQUE索引或PRIMARY KEY索引。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">其中table_</span>name是要增加索引的表名，column<span class="emphasis">_list指出对哪些列进⾏索引，多列时各列之间⽤逗号分隔。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">索引名index_</span>name可⾃⼰命名，缺省时，MySQL将根据第⼀个索引列赋⼀个名称。另外，ALTER TABLE允许在单</span><br><span class="line"></span><br><span class="line">个语句中更改多个表，因此可以在同时创建多个索引。</span><br><span class="line"></span><br><span class="line">第三种⽅式：使⽤CREATE INDEX命令创建</span><br><span class="line"></span><br><span class="line">CREATE INDEX index<span class="emphasis">_name ON table_</span>name (column<span class="emphasis">_list);</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">1</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">CREATE INDEX可对表增加普通索引或UNIQUE索引。（但是，不能创建PRIMARY KEY索引）</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">删除索引</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">根据索引名删除普通索引、唯⼀索引、全⽂索引： alter table 表名 drop KEY 索引名</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">alter table user_</span>index drop KEY name;</span><br><span class="line"></span><br><span class="line">alter table user<span class="emphasis">_index drop KEY id_</span>card;</span><br><span class="line"></span><br><span class="line">alter table user<span class="emphasis">_index drop KEY information;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">123删除主键索引： alter table 表名 drop primary key （因为主键只有⼀个）。这⾥值得注意的是，如果主键⾃增</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">⻓，那么不能直接执⾏此操作（⾃增⻓依赖于主键索引）：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">需要取消⾃增⻓再⾏删除：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">但通常不会删除主键，因为设计主键⼀定与业务逻辑⽆关。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-11-创建索引时需要注意什么？"><a href="#3-11-创建索引时需要注意什么？" class="headerlink" title="3.11 创建索引时需要注意什么？"></a><strong>3.11</strong> <strong>创建索引时需要注意什么？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">⾮空字段：应该指定列为NOT NULL，除⾮你想存储NULL。在mysql中，含有空值的列很难进⾏查询优化，因</span><br><span class="line"></span><br><span class="line">为它们使得索引、索引的统计信息以及⽐较运算更加复杂。你应该⽤0、⼀个特殊的值或者⼀个空串代替空</span><br><span class="line"></span><br><span class="line">值；</span><br><span class="line"></span><br><span class="line">取值离散⼤的字段：（变量各个取值之间的差异程度）的列放到联合索引的前⾯，可以通过count()函数查看字</span><br><span class="line"></span><br><span class="line">段的差异值，返回值越⼤说明字段的唯⼀值越多字段的离散程度⾼；</span><br><span class="line"></span><br><span class="line">索引字段越⼩越好：数据库的数据存储以⻚为单位⼀⻚存储的数据越多⼀次IO操作获取的数据越⼤效率越⾼。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-12-使⽤索引查询⼀定能提⾼查询的性能吗？为什么"><a href="#3-12-使⽤索引查询⼀定能提⾼查询的性能吗？为什么" class="headerlink" title="3.12 使⽤索引查询⼀定能提⾼查询的性能吗？为什么"></a><strong>3.12</strong> <strong>使⽤索引查询⼀定能提⾼查询的性能吗？为什么</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">通常，通过索引查询数据⽐全表扫描要快。但是我们也必须注意到它的代价。</span><br><span class="line"></span><br><span class="line">索引需要空间来存储，也需要定期维护， 每当有记录在表中增减或索引列被修改时，索引本身也会被修改。</span><br><span class="line"></span><br><span class="line">这意味着每条记录的INSERT，DELETE，UPDATE将为此多付出4，5 次的磁盘I/O。 因为索引需要额外的存储</span><br><span class="line"></span><br><span class="line">空间和处理，那些不必要的索引反⽽会使查询反应时间变慢。使⽤索引查询不⼀定能提⾼查询性能，索引范围</span><br><span class="line"></span><br><span class="line">查询(INDEX RANGE SCAN)适⽤于两种情况:</span><br><span class="line"></span><br><span class="line">基于⼀个范围的检索，⼀般查询返回结果集⼩于表中记录数的30%</span><br><span class="line"></span><br><span class="line">基于⾮唯⼀性索引的检索alter table user<span class="emphasis">_index</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">-- 重新定义字段</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">MODIFY id int,</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">drop PRIMARY KEY</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-13-百万级别或以上的数据如何删除"><a href="#3-13-百万级别或以上的数据如何删除" class="headerlink" title="3.13 百万级别或以上的数据如何删除"></a><strong>3.13</strong> <strong>百万级别或以上的数据如何删除</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">关于索引：由于索引需要额外的维护成本，因为索引⽂件是单独存在的⽂件,所以当我们对数据的增加,修改,删除,都</span><br><span class="line"></span><br><span class="line">会产⽣额外的对索引⽂件的操作,这些操作需要消耗额外的IO,会降低增/改/删的执⾏效率。所以，在我们删除数据库</span><br><span class="line"></span><br><span class="line">百万级别数据的时候，查询MySQL官⽅⼿册得知删除数据的速度和创建的索引数量是成正⽐的。</span><br><span class="line"></span><br><span class="line">\1. 所以我们想要删除百万数据的时候可以先删除索引（此时⼤概耗时三分多钟）</span><br><span class="line"></span><br><span class="line">\2. 然后删除其中⽆⽤数据（此过程需要不到两分钟）</span><br><span class="line"></span><br><span class="line">\3. 删除完成后重新创建索引(此时数据较少了)创建索引也⾮常快，约⼗分钟左右。</span><br><span class="line"></span><br><span class="line">\4. 与之前的直接删除绝对是要快速很多，更别说万⼀删除中断,⼀切删除会回滚。那更是坑了。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-14-前缀索引"><a href="#3-14-前缀索引" class="headerlink" title="3.14 前缀索引"></a><strong>3.14</strong> <strong>前缀索引</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">语法： index(field(10)) ，使⽤字段值的前10个字符建⽴索引，默认是使⽤字段的全部内容建⽴索引。</span><br><span class="line"></span><br><span class="line">前提：前缀的标识度⾼。⽐如密码就适合建⽴前缀索引，因为密码⼏乎各不相同。</span><br><span class="line"></span><br><span class="line">实操的难度：在于前缀截取的⻓度。</span><br><span class="line"></span><br><span class="line">我们可以利⽤ select count(<span class="emphasis">*)/count(distinct left(password,prefixLen)); ，通过从调整 prefixLen 的值</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">（从1⾃增）查看不同前缀⻓度的⼀个平均匹配度，接近1时就可以了（表示⼀个密码的前 prefixLen 个字符⼏乎</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">能确定唯⼀⼀条记录）</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-15-什么是最左前缀原则？什么是最左匹配原则"><a href="#3-15-什么是最左前缀原则？什么是最左匹配原则" class="headerlink" title="3.15 什么是最左前缀原则？什么是最左匹配原则"></a><strong>3.15</strong> <strong>什么是最左前缀原则？什么是最左匹配原则</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">顾名思义，就是最左优先，在创建多列索引时，要根据业务需求，where⼦句中使⽤最频繁的⼀列放在最左</span><br><span class="line"></span><br><span class="line">边。</span><br><span class="line"></span><br><span class="line">最左前缀匹配原则，⾮常重要的原则，mysql会⼀直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停⽌</span><br><span class="line"></span><br><span class="line">匹配，⽐如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建⽴(a,b,c,d)顺序的索引，d是⽤不到索引的，如果建⽴</span><br><span class="line"></span><br><span class="line">(a,b,d,c)的索引则都可以⽤到，a,b,d的顺序可以任意调整。</span><br><span class="line"></span><br><span class="line">=和in可以乱序，⽐如a = 1 and b = 2 and c = 3 建⽴(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化</span><br><span class="line"></span><br><span class="line">成索引可以识别的形式</span><br></pre></td></tr></tbody></table></figure><h3 id="3-16-B树和B-树的区别"><a href="#3-16-B树和B-树的区别" class="headerlink" title="3.16 B树和B+树的区别"></a><strong>3.16 B</strong>树和B+树的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">在B树中，你可以将键和值存放在内部节点和叶⼦节点；但在B+树中，内部节点都是键，没有值，叶⼦节点同</span><br><span class="line"></span><br><span class="line">时存放键和值。</span><br><span class="line"></span><br><span class="line">B+树的叶⼦节点有⼀条链相连，⽽B树的叶⼦节点各⾃独⽴。<span class="strong">**3.17**</span> <span class="strong">**使⽤**</span><span class="strong">**B**</span><span class="strong">**树的好处**</span></span><br><span class="line"></span><br><span class="line">B树可以在内部节点同时存储键和值，因此，把频繁访问的数据放在靠近根节点的地⽅将会⼤⼤提⾼热点数据的查</span><br><span class="line"></span><br><span class="line">询效率。这种特性使得B树在特定数据重复多次查询的场景中更加⾼效。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-18-使⽤B-树的好处"><a href="#3-18-使⽤B-树的好处" class="headerlink" title="3.18 使⽤B+树的好处"></a><strong>3.18</strong> <strong>使⽤</strong>B+树的好处</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">由于B+树的内部节点只存放键，不存放值，因此，⼀次读取，可以在内存⻚中获取更多的键，有利于更快地缩⼩查</span><br><span class="line"></span><br><span class="line">找范围。 B+树的叶节点由⼀条链相连，因此，当需要进⾏⼀次全数据遍历的时候，B+树只需要使⽤O(logN)时间找</span><br><span class="line"></span><br><span class="line">到最⼩的⼀个节点，然后通过链进⾏O(N)的顺序遍历即可。⽽B树则需要对树的每⼀层进⾏遍历，这会需要更多的</span><br><span class="line"></span><br><span class="line">内存置换次数，因此也就需要花费更多的时间</span><br></pre></td></tr></tbody></table></figure><h3 id="3-19-Hash索引和B-树所有有什么区别或者说优劣呢"><a href="#3-19-Hash索引和B-树所有有什么区别或者说优劣呢" class="headerlink" title="3.19 Hash索引和B+树所有有什么区别或者说优劣呢?"></a><strong>3.19 Hash</strong>索引和B+树所有有什么区别或者说优劣呢?</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">⾸先要知道Hash索引和B+树索引的底层实现原理：</span><br><span class="line"></span><br><span class="line">hash索引底层就是hash表，进⾏查找时，调⽤⼀次hash函数就可以获取到相应的键值，之后进⾏回表查询获得实</span><br><span class="line"></span><br><span class="line">际数据。B+树底层实现是多路平衡查找树。对于每⼀次的查询都是从根节点出发，查找到叶⼦节点⽅可以获得所查</span><br><span class="line"></span><br><span class="line">键值，然后根据查询判断是否需要回表查询数据。</span><br><span class="line"></span><br><span class="line">那么可以看出他们有以下的不同：</span><br><span class="line"></span><br><span class="line">hash索引进⾏等值查询更快(⼀般情况下)，但是却⽆法进⾏范围查询。</span><br><span class="line"></span><br><span class="line">因为在hash索引中经过hash函数建⽴索引之后，索引的顺序与原顺序⽆法保持⼀致，不能⽀持范围查询。⽽B+树</span><br><span class="line"></span><br><span class="line">的的所有节点皆遵循(左节点⼩于⽗节点，右节点⼤于⽗节点，多叉树也类似)，天然⽀持范围。</span><br><span class="line"></span><br><span class="line">hash索引不⽀持使⽤索引进⾏排序，原理同上。</span><br><span class="line"></span><br><span class="line">hash索引不⽀持模糊查询以及多列索引的最左前缀匹配。原理也是因为hash函数的不可预测。AAAA和AAAAB</span><br><span class="line"></span><br><span class="line">的索引没有相关性。</span><br><span class="line"></span><br><span class="line">hash索引任何时候都避免不了回表查询数据，⽽B+树在符合某些条件(聚簇索引，覆盖索引等)的时候可以只通</span><br><span class="line"></span><br><span class="line">过索引完成查询。</span><br><span class="line"></span><br><span class="line">hash索引虽然在等值查询上较快，但是不稳定。性能不可预测，当某个键值存在⼤量重复的时候，发⽣hash碰撞，此时效率可能极差。⽽B+树的查询效率⽐较稳定，对于所有的查询都是从根节点到叶⼦节点，且树的⾼度</span><br><span class="line"></span><br><span class="line">较低。</span><br><span class="line"></span><br><span class="line">因此，在⼤多数情况下，直接选择B+树索引可以获得稳定且较好的查询速度。⽽不需要使⽤hash索引。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-20-数据库为什么使⽤B-树⽽不是B树"><a href="#3-20-数据库为什么使⽤B-树⽽不是B树" class="headerlink" title="3.20 数据库为什么使⽤B+树⽽不是B树"></a><strong>3.20</strong> <strong>数据库为什么使⽤</strong>B+树⽽不是B树</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">B树只适合随机检索，⽽B+树同时⽀持随机检索和顺序检索；</span><br><span class="line"></span><br><span class="line">B+树空间利⽤率更⾼，可减少I/O次数，磁盘读写代价更低。⼀般来说，索引本身也很⼤，不可能全部存储在</span><br><span class="line"></span><br><span class="line">内存中，因此索引往往以索引⽂件的形式存储的磁盘上。这样的话，索引查找过程中就要产⽣磁盘I/O消耗。</span><br><span class="line"></span><br><span class="line">B+树的内部结点并没有指向关键字具体信息的指针，只是作为索引使⽤，其内部结点⽐B树⼩，盘块能容纳的</span><br><span class="line"></span><br><span class="line">结点中关键字数量更多，⼀次性读⼊内存中可以查找的关键字也就越多，相对的，IO读写次数也就降低了。⽽</span><br><span class="line"></span><br><span class="line">IO读写次数是影响索引检索效率的最⼤因素；</span><br><span class="line"></span><br><span class="line">B+树的查询效率更加稳定。B树搜索有可能会在⾮叶⼦结点结束，越靠近根节点的记录查找时间越短，只要找</span><br><span class="line"></span><br><span class="line">到关键字即可确定记录的存在，其性能等价于在关键字全集内做⼀次⼆分查找。⽽在B+树中，顺序检索⽐较明</span><br><span class="line"></span><br><span class="line">显，随机检索时，任何关键字的查找都必须⾛⼀条从根节点到叶节点的路，所有关键字的查找路径⻓度相同，</span><br><span class="line"></span><br><span class="line">导致每⼀个关键字的查询效率相当。</span><br><span class="line"></span><br><span class="line">B-树在提⾼了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。B+树的叶⼦节点使⽤指针顺序连接在</span><br><span class="line"></span><br><span class="line">⼀起，只要遍历叶⼦节点就可以实现整棵树的遍历。⽽且在数据库中基于范围的查询是⾮常频繁的，⽽B树不</span><br><span class="line"></span><br><span class="line">⽀持这样的操作。</span><br><span class="line"></span><br><span class="line">增删⽂件（节点）时，效率更⾼。因为B+树的叶⼦节点包含所有关键字，并以有序的链表结构存储，这样可很</span><br><span class="line"></span><br><span class="line">好提⾼增删效率。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-21-B-树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据"><a href="#3-21-B-树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据" class="headerlink" title="**3.21 B+**树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据"></a>**3.21 B+**树在满⾜聚簇索引和覆盖索引的时候不需要回表查询数据</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">在B+树的索引中，叶⼦节点可能存储了当前的key值，也可能存储了当前的key值以及整⾏的数据，这就是聚簇索</span><br><span class="line"></span><br><span class="line">引和⾮聚簇索引。 在InnoDB中，只有主键索引是聚簇索引，如果没有主键，则挑选⼀个唯⼀键建⽴聚簇索引。如</span><br><span class="line"></span><br><span class="line">果没有唯⼀键，则隐式的⽣成⼀个键来建⽴聚簇索引。</span><br><span class="line"></span><br><span class="line">当查询使⽤聚簇索引时，在对应的叶⼦节点，可以获取到整⾏数据，因此不⽤再次进⾏回表查询。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-22-什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引"><a href="#3-22-什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引" class="headerlink" title="3.22 什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引"></a><strong>3.22</strong> <strong>什么是聚簇索引？何时使⽤聚簇索引与⾮聚簇索引</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">聚簇索引：将数据存储与索引放到了⼀块，找到索引也就找到了数据</span><br><span class="line"></span><br><span class="line">⾮聚簇索引：将数据存储于索引分开结构，索引结构的叶⼦节点指向了数据的对应⾏，myisam通过key<span class="emphasis">_buffer</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">澄清⼀个概念：innodb中，在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要⼆次查找，⾮</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">聚簇索引都是辅助索引，像复合索引、前缀索引、唯⼀索引，辅助索引叶⼦节点存储的不再是⾏的物理位置，⽽是</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">主键值</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-23-⾮聚簇索引⼀定会回表查询吗？"><a href="#3-23-⾮聚簇索引⼀定会回表查询吗？" class="headerlink" title="3.23 ⾮聚簇索引⼀定会回表查询吗？"></a><strong>3.23</strong> <strong>⾮聚簇索引⼀定会回表查询吗？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">不⼀定，这涉及到查询语句所要求的字段是否全部命中了索引，如果全部命中了索引，那么就不必再进⾏回表查</span><br><span class="line"></span><br><span class="line">询。</span><br><span class="line"></span><br><span class="line">举个简单的例⼦，假设我们在员⼯表的年龄上建⽴了索引，那么当进⾏ select age from employee where age &lt;</span><br><span class="line"></span><br><span class="line">20 的查询时，在索引的叶⼦节点上，已经包含了age信息，不会再次进⾏回表查询。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-24-联合索引是什么？为什么需要注意联合索引中的顺序？"><a href="#3-24-联合索引是什么？为什么需要注意联合索引中的顺序？" class="headerlink" title="3.24 联合索引是什么？为什么需要注意联合索引中的顺序？"></a><strong>3.24</strong> <strong>联合索引是什么？为什么需要注意联合索引中的顺序？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">MySQL可以使⽤多个字段同时建⽴⼀个索引，叫做联合索引。在联合索引中，如果想要命中索引，需要按照建⽴索</span><br><span class="line"></span><br><span class="line">引时的字段顺序挨个使⽤，否则⽆法命中索引。</span><br><span class="line"></span><br><span class="line">具体原因为:</span><br><span class="line"></span><br><span class="line">MySQL使⽤索引时需要索引有序，假设现在建⽴了"name，age，school"的联合索引，那么索引的排序为: 先按照</span><br><span class="line"></span><br><span class="line">name排序，如果name相同，则按照age排序，如果age的值也相等，则按照school进⾏排序。</span><br><span class="line"></span><br><span class="line">当进⾏查询时，此时索引仅仅按照name严格有序，因此必须⾸先使⽤name字段进⾏等值查询，之后对于匹配到的</span><br><span class="line"></span><br><span class="line">列⽽⾔，其按照age字段严格有序，此时可以使⽤age字段⽤做索引查找，以此类推。因此在建⽴联合索引的时候应</span><br><span class="line"></span><br><span class="line">该注意索引列的顺序，⼀般情况下，将查询需求频繁或者字段选择性⾼的列放在前⾯。此外可以根据特例的查询或</span><br><span class="line"></span><br><span class="line">者表结构进⾏单独的调整。</span><br></pre></td></tr></tbody></table></figure><h1 id="四-事务四-事务"><a href="#四-事务四-事务" class="headerlink" title="四 事务四 事务"></a>四 事务四 事务</h1><h3 id="4-1-什么是数据库事务？"><a href="#4-1-什么是数据库事务？" class="headerlink" title="4.1 什么是数据库事务？"></a><strong>4.1</strong> <strong>什么是数据库事务？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">事务是⼀个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执⾏的结果必须使数据库从⼀种⼀致</span><br><span class="line"></span><br><span class="line">性状态变到另⼀种⼀致性状态。事务是逻辑上的⼀组操作，要么都执⾏，要么都不执⾏。</span><br><span class="line"></span><br><span class="line">事务最经典也经常被拿出来说例⼦就是转账了。</span><br><span class="line"></span><br><span class="line">假如⼩明要给⼩红转账1000元，这个转账会涉及到两个关键操作就是：将⼩明的余额减少1000元，将⼩红的余额</span><br><span class="line"></span><br><span class="line">增加1000元。万⼀在这两个操作之间突然出现错误⽐如银⾏系统崩溃，导致⼩明余额减少⽽⼩红的余额没有增加，</span><br><span class="line"></span><br><span class="line">这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-事物的四⼤特性-ACID-介绍⼀下"><a href="#4-2-事物的四⼤特性-ACID-介绍⼀下" class="headerlink" title="4.2 事物的四⼤特性(ACID)介绍⼀下?"></a><strong>4.2</strong> <strong>事物的四⼤特性</strong>(ACID)介绍⼀下?</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">关系性数据库需要遵循ACID规则，具体内容如下：</span><br><span class="line"></span><br><span class="line">\1. <span class="strong">**原⼦性：**</span> 事务是最⼩的执⾏单位，不允许分割。事务的原⼦性确保动作要么全部完成，要么完全不起作⽤；</span><br><span class="line"></span><br><span class="line">\2. <span class="strong">**⼀致性：**</span> 执⾏事务前后，数据保持⼀致，多个事务对同⼀个数据读取的结果是相同的；</span><br><span class="line"></span><br><span class="line">\3. <span class="strong">**隔离性：**</span> 并发访问数据库时，⼀个⽤户的事务不被其他事务所⼲扰，各并发事务之间数据库是独⽴的；</span><br><span class="line"></span><br><span class="line">\4. <span class="strong">**持久性：**</span> ⼀个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发⽣故障也不应该对其有任何</span><br><span class="line"></span><br><span class="line">影响。</span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-什么是脏读？幻读？不可重复读？"><a href="#4-3-什么是脏读？幻读？不可重复读？" class="headerlink" title="4.3 什么是脏读？幻读？不可重复读？"></a><strong>4.3</strong> <strong>什么是脏读？幻读？不可重复读？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">脏读(Drity Read)：某个事务已更新⼀份数据，另⼀个事务在此时读取了同⼀份数据，由于某些原因，前⼀个</span><br><span class="line"></span><br><span class="line">RollBack了操作，则后⼀个事务所读取的数据就会是不正确的。</span><br><span class="line"></span><br><span class="line">不可重复读(Non-repeatable read):在⼀个事务的两次查询之中数据不⼀致，这可能是两次查询过程中间插⼊了</span><br><span class="line"></span><br><span class="line">⼀个事务更新的原有的数据。</span><br><span class="line"></span><br><span class="line">幻读(Phantom Read):在⼀个事务的两次查询中数据笔数不⼀致，例如有⼀个事务查询了⼏列(Row)数据，⽽另</span><br><span class="line"></span><br><span class="line">⼀个事务却在此时插⼊了新的⼏列数据，先前的事务在接下来的查询中，就会发现有⼏列数据是它先前所没有</span><br><span class="line"></span><br><span class="line">的。</span><br></pre></td></tr></tbody></table></figure><h3 id="4-4-什么是事务的隔离级别？MySQL的默认隔离级别是什么？"><a href="#4-4-什么是事务的隔离级别？MySQL的默认隔离级别是什么？" class="headerlink" title="4.4 什么是事务的隔离级别？MySQL的默认隔离级别是什么？"></a><strong>4.4</strong> 什么是事务的隔离级别？MySQL的默认隔离级别是什么？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">为了达到事务的四⼤特性，数据库定义了4种不同的事务隔离级别，由低到⾼依次为Read uncommitted、Read</span><br><span class="line"></span><br><span class="line">committed、Repeatable read、Serializable，这四个级别可以逐个解决脏读、不可重复读、幻读这⼏类问题。<span class="strong">**隔离级别**</span> </span><br><span class="line"></span><br><span class="line"><span class="strong">**脏读**</span> </span><br><span class="line"></span><br><span class="line"><span class="strong">**不可重复读**</span> </span><br><span class="line"></span><br><span class="line"><span class="strong">**幻影读**</span></span><br><span class="line"></span><br><span class="line">READ-UNCOMMITTED </span><br><span class="line"></span><br><span class="line">READ-COMMITTED </span><br><span class="line"></span><br><span class="line">REPEATABLE-READ </span><br><span class="line"></span><br><span class="line">SERIALIZABLE </span><br><span class="line"></span><br><span class="line"><span class="strong">**SQL**</span> <span class="strong">**标准定义了四个隔离级别：**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**READ-UNCOMMITTED(**</span><span class="strong">**读取未提交**</span><span class="strong">**)**</span><span class="strong">**：**</span> 最低的隔离级别，允许读取尚未提交的数据变更，<span class="strong">**可能会导致脏读、**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**幻读或不可重复读**</span>。</span><br><span class="line"></span><br><span class="line"><span class="strong">**READ-COMMITTED(**</span><span class="strong">**读取已提交**</span><span class="strong">**)**</span><span class="strong">**：**</span> 允许读取并发事务已经提交的数据，<span class="strong">**可以阻⽌脏读，但是幻读或不可重复**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**读仍有可能发⽣**</span>。</span><br><span class="line"></span><br><span class="line"><span class="strong">**REPEATABLE-READ(**</span><span class="strong">**可重复读**</span><span class="strong">**)**</span><span class="strong">**：**</span> 对同⼀字段的多次读取结果都是⼀致的，除⾮数据是被本身事务⾃⼰所修</span><br><span class="line"></span><br><span class="line">改，<span class="strong">**可以阻⽌脏读和不可重复读，但幻读仍有可能发⽣**</span>。</span><br><span class="line"></span><br><span class="line"><span class="strong">**SERIALIZABLE(**</span><span class="strong">**可串⾏化**</span><span class="strong">**)**</span><span class="strong">**：**</span> 最⾼的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执⾏，这样事</span><br><span class="line"></span><br><span class="line">务之间就完全不可能产⽣⼲扰，也就是说，<span class="strong">**该级别可以防⽌脏读、不可重复读以及幻读**</span>。</span><br><span class="line"></span><br><span class="line">这⾥需要注意的是：Mysql 默认采⽤的 REPEATABLE<span class="emphasis">_READ隔离级别 Oracle 默认采⽤的 READ_</span>COMMITTED隔离</span><br><span class="line"></span><br><span class="line">级别</span><br><span class="line"></span><br><span class="line">事务隔离机制的实现基于锁机制和并发调度。其中并发调度使⽤的是MVVC（多版本并发控制），通过保存修改的</span><br><span class="line"></span><br><span class="line">旧版本信息来⽀持并发⼀致性读和回滚等特性。</span><br><span class="line"></span><br><span class="line">因为隔离级别越低，事务请求的锁越少，所以⼤部分数据库系统的隔离级别都是<span class="strong">**READ-COMMITTED(**</span><span class="strong">**读取提交内**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**容**</span><span class="strong">**):**</span>，但是你要知道的是InnoDB 存储引擎默认使⽤ <span class="strong">**REPEATABLE-READ**</span><span class="strong">**（可重读）**</span>并不会有任何性能损失。</span><br><span class="line"></span><br><span class="line">InnoDB 存储引擎在 <span class="strong">**分布式事务**</span> 的情况下⼀般会⽤到<span class="strong">**SERIALIZABLE(**</span><span class="strong">**可串⾏化**</span><span class="strong">**)**</span>隔离级别。</span><br></pre></td></tr></tbody></table></figure><h1 id="五-锁"><a href="#五-锁" class="headerlink" title="五 锁"></a>五 锁</h1><h3 id="5-1-对MySQL的锁了解吗"><a href="#5-1-对MySQL的锁了解吗" class="headerlink" title="5.1 对MySQL的锁了解吗"></a><strong>5.1</strong> <strong>对</strong>MySQL的锁了解吗</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">当数据库有并发事务的时候，可能会产⽣数据的不⼀致，这时候需要⼀些机制来保证访问的次序，锁机制就是这样</span><br><span class="line"></span><br><span class="line">的⼀个机制。</span><br><span class="line"></span><br><span class="line">就像酒店的房间，如果⼤家随意进出，就会出现多⼈抢夺同⼀个房间的情况，⽽在房间上装上锁，申请到钥匙的⼈</span><br><span class="line"></span><br><span class="line">才可以⼊住并且将房间锁起来，其他⼈只有等他使⽤完毕才可以再次使⽤。</span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-隔离级别与锁的关系"><a href="#5-2-隔离级别与锁的关系" class="headerlink" title="5.2 隔离级别与锁的关系"></a><strong>5.2</strong> <strong>隔离级别与锁的关系</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">在Read Uncommitted级别下，读取数据不需要加共享锁，这样就不会跟被修改的数据上的排他锁冲突</span><br><span class="line"></span><br><span class="line">在Read Committed级别下，读操作需要加共享锁，但是在语句执⾏完以后释放共享锁；</span><br><span class="line"></span><br><span class="line">在Repeatable Read级别下，读操作需要加共享锁，但是在事务提交之前并不释放共享锁，也就是必须等待事务执</span><br><span class="line"></span><br><span class="line">⾏完毕以后才释放共享锁。</span><br><span class="line"></span><br><span class="line">SERIALIZABLE 是限制性最强的隔离级别，因为该级别<span class="strong">**锁定整个范围的键**</span>，并⼀直持有锁，直到事务完成。</span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法"><a href="#5-3-按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法" class="headerlink" title="5.3 按照锁的粒度分数据库锁有哪些？锁机制与InnoDB锁算法"></a><strong>5.3</strong> <strong>按照锁的粒度分数据库锁有哪些？锁机制与</strong>InnoDB锁算法</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">在关系型数据库中，可以<span class="strong">**按照锁的粒度把数据库锁分**</span>为⾏级锁(INNODB引擎)、表级锁(MYISAM引擎)和⻚级锁(BDB</span><br><span class="line"></span><br><span class="line">引擎 )。</span><br><span class="line"></span><br><span class="line"><span class="strong">**MyISAM**</span><span class="strong">**和**</span><span class="strong">**InnoDB**</span><span class="strong">**存储引擎使⽤的锁：**</span></span><br><span class="line"></span><br><span class="line">MyISAM采⽤表级锁(table-level locking)。</span><br><span class="line"></span><br><span class="line">InnoDB⽀持⾏级锁(row-level locking)和表级锁，默认为⾏级锁</span><br><span class="line"></span><br><span class="line">⾏级锁，表级锁和⻚级锁对⽐</span><br><span class="line"></span><br><span class="line"><span class="strong">**⾏级锁**</span> ⾏级锁是Mysql中锁定粒度最细的⼀种锁，表示只针对当前操作的⾏进⾏加锁。⾏级锁能⼤⼤减少数据库操</span><br><span class="line"></span><br><span class="line">作的冲突。其加锁粒度最⼩，但加锁的开销也最⼤。⾏级锁分为共享锁 和 排他锁。</span><br><span class="line"></span><br><span class="line">特点：开销⼤，加锁慢；会出现死锁；锁定粒度最⼩，发⽣锁冲突的概率最低，并发度也最⾼。</span><br><span class="line"></span><br><span class="line"><span class="strong">**表级锁**</span> 表级锁是MySQL中锁定粒度最⼤的⼀种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，</span><br><span class="line"></span><br><span class="line">被⼤部分MySQL引擎⽀持。最常使⽤的MYISAM与INNODB都⽀持表级锁定。表级锁定分为表共享读锁（共享锁）</span><br><span class="line"></span><br><span class="line">与表独占写锁（排他锁）。</span><br><span class="line"></span><br><span class="line">特点：开销⼩，加锁快；不会出现死锁；锁定粒度⼤，发出锁冲突的概率最⾼，并发度最低。</span><br><span class="line"></span><br><span class="line"><span class="strong">**⻚级锁**</span> ⻚级锁是MySQL中锁定粒度介于⾏级锁和表级锁中间的⼀种锁。表级锁速度快，但冲突多，⾏级冲突少，</span><br><span class="line"></span><br><span class="line">但速度慢。所以取了折衷的⻚级，⼀次锁定相邻的⼀组记录。</span><br><span class="line"></span><br><span class="line">特点：开销和加锁时间界于表锁和⾏锁之间；会出现死锁；锁定粒度界于表锁和⾏锁之间，并发度⼀般</span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了"><a href="#5-4-从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了" class="headerlink" title="5.4 从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了"></a>5.4 从锁的类别上分MySQL都有哪些锁呢？像上⾯那样⼦进⾏锁定岂不是有点阻碍并发效率了</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="strong">**从锁的类别上来讲**</span>，有共享锁和排他锁。</span><br><span class="line"></span><br><span class="line">共享锁: ⼜叫做读锁。 当⽤户要进⾏数据的读取时，对数据加上共享锁。共享锁可以同时加上多个。排他锁: ⼜叫做写锁。 当⽤户要进⾏数据的写⼊时，对数据加上排他锁。排他锁只可以加⼀个，他和其他的排他</span><br><span class="line"></span><br><span class="line">锁，共享锁都相斥。</span><br><span class="line"></span><br><span class="line">⽤上⾯的例⼦来说就是⽤户的⾏为有两种，⼀种是来看房，多个⽤户⼀起看房是可以接受的。 ⼀种是真正的⼊住⼀</span><br><span class="line"></span><br><span class="line">晚，在这期间，⽆论是想⼊住的还是想看房的都不可以。</span><br><span class="line"></span><br><span class="line">锁的粒度取决于具体的存储引擎，InnoDB实现了⾏级锁，⻚级锁，表级锁。</span><br><span class="line"></span><br><span class="line">他们的加锁开销从⼤到⼩，并发能⼒也是从⼤到⼩。</span><br></pre></td></tr></tbody></table></figure><h3 id="5-5-MySQL中InnoDB引擎的⾏锁是怎么实现的"><a href="#5-5-MySQL中InnoDB引擎的⾏锁是怎么实现的" class="headerlink" title="5.5 MySQL中InnoDB引擎的⾏锁是怎么实现的"></a>5.5 MySQL中InnoDB引擎的⾏锁是怎么实现的</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">答：InnoDB是基于索引来完成⾏锁</span><br><span class="line"></span><br><span class="line">例: select <span class="emphasis">* from tab_with_index where id = 1 for update;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">for update 可以根据条件来完成⾏锁锁定，并且 id 是有索引键的列，如果 id 不是索引键那么InnoDB将完成表锁，</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">并发将⽆从谈起</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-6-InnoDB存储引擎的锁的算法有三种"><a href="#5-6-InnoDB存储引擎的锁的算法有三种" class="headerlink" title="5.6 InnoDB存储引擎的锁的算法有三种"></a>5.6 InnoDB存储引擎的锁的算法有三种</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">Record lock：单个⾏记录上的锁</span><br><span class="line"></span><br><span class="line">Gap lock：间隙锁，锁定⼀个范围，不包括记录本身</span><br><span class="line"></span><br><span class="line">Next-key lock：record+gap 锁定⼀个范围，包含记录本身</span><br><span class="line"></span><br><span class="line"><span class="strong">**相关知识点：**</span></span><br><span class="line"></span><br><span class="line">\1. innodb对于⾏的查询使⽤next-key lock</span><br><span class="line"></span><br><span class="line">\2. Next-locking keying为了解决Phantom Problem幻读问题</span><br><span class="line"></span><br><span class="line">\3. 当查询的索引含有唯⼀属性时，将next-key lock降级为record key</span><br><span class="line"></span><br><span class="line">\4. Gap锁设计的⽬的是为了阻⽌多个事务将记录插⼊到同⼀范围内，⽽这会导致幻读问题的产⽣</span><br><span class="line"></span><br><span class="line">\5. 有两种⽅式显式关闭gap锁：（除了外键约束和唯⼀性检查外，其余情况仅使⽤record lock） A. 将事务隔离级</span><br><span class="line"></span><br><span class="line">别设置为RC B. 将参数innodb<span class="emphasis">_locks_</span>unsafe<span class="emphasis">_for_</span>binlog设置为1</span><br></pre></td></tr></tbody></table></figure><h3 id="5-7-什么是死锁？怎么解决？"><a href="#5-7-什么是死锁？怎么解决？" class="headerlink" title="5.7 什么是死锁？怎么解决？"></a><strong>5.7</strong> <strong>什么是死锁？怎么解决？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">死锁是指两个或多个事务在同⼀资源上相互占⽤，并请求锁定对⽅的资源，从⽽导致恶性循环的现象。</span><br><span class="line"></span><br><span class="line">常⻅的解决死锁的⽅法</span><br><span class="line"></span><br><span class="line">1、如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以⼤⼤降低死锁机会。</span><br><span class="line"></span><br><span class="line">2、在同⼀个事务中，尽可能做到⼀次锁定所需要的所有资源，减少死锁产⽣概率；</span><br><span class="line"></span><br><span class="line">3、对于⾮常容易产⽣死锁的业务部分，可以尝试使⽤升级锁定颗粒度，通过表级锁定来减少死锁产⽣的概率；如果业务处理不好可以⽤分布式事务锁或者使⽤乐观锁</span><br></pre></td></tr></tbody></table></figure><h3 id="5-8-数据库的乐观锁和悲观锁是什么？怎么实现的？"><a href="#5-8-数据库的乐观锁和悲观锁是什么？怎么实现的？" class="headerlink" title="5.8 数据库的乐观锁和悲观锁是什么？怎么实现的？"></a><strong>5.8</strong> <strong>数据库的乐观锁和悲观锁是什么？怎么实现的？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同⼀数据时不破坏事务的隔离</span><br><span class="line"></span><br><span class="line">性和统⼀性以及数据库的统⼀性。乐观并发控制（乐观锁）和悲观并发控制（悲观锁）是并发控制主要采⽤的技术</span><br><span class="line"></span><br><span class="line">⼿段。</span><br><span class="line"></span><br><span class="line"><span class="strong">**悲观锁**</span>：假定会发⽣并发冲突，屏蔽⼀切可能违反数据完整性的操作。在查询完数据的时候就把事务锁起来，直到</span><br><span class="line"></span><br><span class="line">提交事务。实现⽅式：使⽤数据库中的锁机制</span><br><span class="line"></span><br><span class="line"><span class="strong">**乐观锁**</span>：假设不会发⽣并发冲突，只在提交操作时检查是否违反数据完整性。在修改数据的时候把事务锁起来，通</span><br><span class="line"></span><br><span class="line">过version的⽅式来进⾏锁定。实现⽅式：乐⼀般会使⽤版本号机制或CAS算法实现。</span><br><span class="line"></span><br><span class="line"><span class="strong">**两种锁的使⽤场景**</span></span><br><span class="line"></span><br><span class="line">从上⾯对两种锁的介绍，我们知道两种锁各有优缺点，不可认为⼀种好于另⼀种，像<span class="strong">**乐观锁适⽤于写⽐较少的情况**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**下（多读场景）**</span>，即冲突真的很少发⽣的时候，这样可以省去了锁的开销，加⼤了系统的整个吞吐量。</span><br><span class="line"></span><br><span class="line">但如果是多写的情况，⼀般会经常产⽣冲突，这就会导致上层应⽤会不断的进⾏retry，这样反倒是降低了性能，所</span><br><span class="line"></span><br><span class="line">以<span class="strong">**⼀般多写的场景下⽤悲观锁就⽐较合适。**</span></span><br></pre></td></tr></tbody></table></figure><h1 id="六-视图"><a href="#六-视图" class="headerlink" title="六 视图"></a>六 视图</h1><h3 id="6-1-为什么要使⽤视图？什么是视图？"><a href="#6-1-为什么要使⽤视图？什么是视图？" class="headerlink" title="6.1 为什么要使⽤视图？什么是视图？"></a><strong>6.1</strong> <strong>为什么要使⽤视图？什么是视图？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">为了提⾼复杂SQL语句的复⽤性和表操作的安全性，MySQL数据库管理系统提供了视图特性。所谓视图，本质上是</span><br><span class="line"></span><br><span class="line">⼀种虚拟表，在物理上是不存在的，其内容与真实的表相似，包含⼀系列带有名称的列和⾏数据。但是，视图并不</span><br><span class="line"></span><br><span class="line">在数据库中以储存的数据值形式存在。⾏和列数据来⾃定义视图的查询所引⽤基本表，并且在具体引⽤视图时动态</span><br><span class="line"></span><br><span class="line">⽣成。</span><br><span class="line"></span><br><span class="line">视图使开发者只关⼼感兴趣的某些特定数据和所负责的特定任务，只能看到视图中所定义的数据，⽽不是视图所引</span><br><span class="line"></span><br><span class="line">⽤表中的数据，从⽽提⾼了数据库中数据的安全性。</span><br></pre></td></tr></tbody></table></figure><h3 id="6-2-视图有哪些特点？"><a href="#6-2-视图有哪些特点？" class="headerlink" title="6.2 视图有哪些特点？"></a><strong>6.2</strong> <strong>视图有哪些特点？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">视图的特点如下:</span><br><span class="line"></span><br><span class="line">视图的列可以来⾃不同的表，是表的抽象和在逻辑意义上建⽴的新关系。</span><br><span class="line"></span><br><span class="line">视图是由基本表(实表)产⽣的表(虚表)。</span><br><span class="line"></span><br><span class="line">视图的建⽴和删除不影响基本表。</span><br><span class="line"></span><br><span class="line">对视图内容的更新(添加，删除和修改)直接影响基本表。</span><br><span class="line"></span><br><span class="line">当视图来⾃多个基本表时，不允许添加和删除数据。视图的操作包括创建视图，查看视图，删除视图和修改视图。</span><br></pre></td></tr></tbody></table></figure><h3 id="6-3-视图的使⽤场景有哪些？"><a href="#6-3-视图的使⽤场景有哪些？" class="headerlink" title="6.3 视图的使⽤场景有哪些？"></a><strong>6.3</strong> <strong>视图的使⽤场景有哪些？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">视图根本⽤途：简化sql查询，提⾼开发效率。如果说还有另外⼀个⽤途那就是兼容⽼的表结构。</span><br><span class="line"></span><br><span class="line">下⾯是视图的常⻅使⽤场景：</span><br><span class="line"></span><br><span class="line">重⽤SQL语句；</span><br><span class="line"></span><br><span class="line">简化复杂的SQL操作。在编写查询后，可以⽅便的重⽤它⽽不必知道它的基本查询细节；</span><br><span class="line"></span><br><span class="line">使⽤表的组成部分⽽不是整个表；</span><br><span class="line"></span><br><span class="line">保护数据。可以给⽤户授予表的特定部分的访问权限⽽不是整个表的访问权限；</span><br><span class="line"></span><br><span class="line">更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</span><br></pre></td></tr></tbody></table></figure><h3 id="6-4-视图的优点"><a href="#6-4-视图的优点" class="headerlink" title="6.4 视图的优点"></a><strong>6.4</strong> <strong>视图的优点</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">\1. 查询简单化。视图能简化⽤户的操作</span><br><span class="line"></span><br><span class="line">\2. 数据安全性。视图使⽤户能以多种⻆度看待同⼀数据，能够对机密数据提供安全保护</span><br><span class="line"></span><br><span class="line">\3. 逻辑数据独⽴性。视图对重构数据库提供了⼀定程度的逻辑独⽴性</span><br></pre></td></tr></tbody></table></figure><h3 id="6-5-视图的缺点"><a href="#6-5-视图的缺点" class="headerlink" title="6.5 视图的缺点"></a><strong>6.5</strong> <strong>视图的缺点</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">\1. 性能。数据库必须把视图的查询转化成对基本表的查询，如果这个视图是由⼀个复杂的多表查询所定义，那</span><br><span class="line"></span><br><span class="line">么，即使是视图的⼀个简单查询，数据库也把它变成⼀个复杂的结合体，需要花费⼀定的时间。</span><br><span class="line"></span><br><span class="line">\2. 修改限制。当⽤户试图修改视图的某些⾏时，数据库必须把它转化为对基本表的某些⾏的修改。事实上，当从</span><br><span class="line"></span><br><span class="line">视图中插⼊或者删除时，情况也是这样。对于简单视图来说，这是很⽅便的，但是，对于⽐较复杂的视图，可</span><br><span class="line"></span><br><span class="line">能是不可修改的</span><br><span class="line"></span><br><span class="line">这些视图有如下特征：1.有UNIQUE等集合操作符的视图。2.有GROUP BY⼦句的视图。3.有诸如</span><br><span class="line"></span><br><span class="line">AVG\SUM\MAX等聚合函数的视图。 4.使⽤DISTINCT关键字的视图。5.连接表的视图（其中有些例外）</span><br></pre></td></tr></tbody></table></figure><h3 id="6-6-什么是游标？"><a href="#6-6-什么是游标？" class="headerlink" title="6.6 什么是游标？"></a><strong>6.6</strong> <strong>什么是游标？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">游标是系统为⽤户开设的⼀个数据缓冲区，存放SQL语句的执⾏结果，每个游标区都有⼀个名字。⽤户可以通过游</span><br><span class="line"></span><br><span class="line">标逐⼀获取记录并赋给主变量，交由主语⾔进⼀步处理。</span><br></pre></td></tr></tbody></table></figure><h1 id="七-存储过程与函数"><a href="#七-存储过程与函数" class="headerlink" title="七 存储过程与函数"></a>七 存储过程与函数</h1><h3 id="7-1-什么是存储过程？有哪些优缺点？"><a href="#7-1-什么是存储过程？有哪些优缺点？" class="headerlink" title="7.1 什么是存储过程？有哪些优缺点？"></a><strong>7.1</strong> <strong>什么是存储过程？有哪些优缺点？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">存储过程是⼀个预编译的SQL语句，优点是允许模块化的设计，就是说只需要创建⼀次，以后在该程序中就可以调</span><br><span class="line"></span><br><span class="line">⽤多次。如果某次操作需要执⾏多次SQL，使⽤存储过程⽐单纯SQL语句执⾏要快。</span><br><span class="line"></span><br><span class="line"><span class="strong">**优点**</span></span><br><span class="line"></span><br><span class="line">1）存储过程是预编译过的，执⾏效率⾼。</span><br><span class="line"></span><br><span class="line">2）存储过程的代码直接存放于数据库中，通过存储过程名直接调⽤，减少⽹络通讯。</span><br><span class="line"></span><br><span class="line">3）安全性⾼，执⾏存储过程需要有⼀定权限的⽤户。</span><br><span class="line"></span><br><span class="line">4）存储过程可以重复使⽤，减少数据库开发⼈员的⼯作量。</span><br><span class="line"></span><br><span class="line"><span class="strong">**缺点**</span></span><br><span class="line"></span><br><span class="line">1）调试麻烦，但是⽤ PL/SQL Developer 调试很⽅便！弥补这个缺点。</span><br><span class="line"></span><br><span class="line">2）移植问题，数据库端代码当然是与数据库相关的。但是如果是做⼯程型项⽬，基本不存在移植问题。</span><br><span class="line"></span><br><span class="line">3）重新编译问题，因为后端代码是运⾏前编译的，如果带有引⽤关系的对象发⽣改变时，受影响的存储过程、包</span><br><span class="line"></span><br><span class="line">将需要重新编译（不过也可以设置成运⾏时刻⾃动编译）。</span><br><span class="line"></span><br><span class="line">4）如果在⼀个程序系统中⼤量的使⽤存储过程，到程序交付使⽤的时候随着⽤户需求的增加会导致数据结构的变</span><br><span class="line"></span><br><span class="line">化，接着就是系统的相关问题了，最后如果⽤户想维护该系统可以说是很难很难、⽽且代价是空前的，维护起来更</span><br><span class="line"></span><br><span class="line">麻烦。</span><br></pre></td></tr></tbody></table></figure><h3 id="7-2-什么是触发器？触发器的使⽤场景有哪些？"><a href="#7-2-什么是触发器？触发器的使⽤场景有哪些？" class="headerlink" title="7.2 什么是触发器？触发器的使⽤场景有哪些？"></a><strong>7.2</strong> <strong>什么是触发器？触发器的使⽤场景有哪些？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">触发器是⽤户定义在关系表上的⼀类由事件驱动的特殊的存储过程。触发器是指⼀段代码，当触发某个事件时，⾃</span><br><span class="line"></span><br><span class="line">动执⾏这些代码。</span><br><span class="line"></span><br><span class="line">使⽤场景</span><br><span class="line"></span><br><span class="line">可以通过数据库中的相关表实现级联更改。</span><br><span class="line"></span><br><span class="line">实时监控某张表中的某个字段的更改⽽需要做出相应的处理。</span><br><span class="line"></span><br><span class="line">例如可以⽣成某些业务的编号。</span><br><span class="line"></span><br><span class="line">注意不要滥⽤，否则会造成数据库及应⽤程序的维护困难。</span><br><span class="line"></span><br><span class="line">⼤家需要牢记以上基础知识点，重点是理解数据类型CHAR和VARCHAR的差异，表存储引擎InnoDB和</span><br><span class="line"></span><br><span class="line">MyISAM的区别。</span><br></pre></td></tr></tbody></table></figure><h3 id="7-3-MySQL中都有哪些触发器？"><a href="#7-3-MySQL中都有哪些触发器？" class="headerlink" title="7.3 MySQL中都有哪些触发器？"></a>7.3 MySQL中都有哪些触发器？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">在MySQL数据库中有如下六种触发器：</span><br><span class="line"></span><br><span class="line">Before Insert</span><br><span class="line"></span><br><span class="line">After Insert</span><br><span class="line"></span><br><span class="line">Before Update</span><br><span class="line"></span><br><span class="line">After Update</span><br><span class="line"></span><br><span class="line">Before Delete</span><br><span class="line"></span><br><span class="line">After Delete</span><br></pre></td></tr></tbody></table></figure><h1 id="⼋-常⽤SQL语句"><a href="#⼋-常⽤SQL语句" class="headerlink" title="⼋ 常⽤SQL语句"></a>⼋ 常⽤SQL语句</h1><h3 id="8-1-SQL语句主要分为哪⼏类"><a href="#8-1-SQL语句主要分为哪⼏类" class="headerlink" title="8.1 SQL语句主要分为哪⼏类"></a>8.1 SQL语句主要分为哪⼏类</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">数据定义语⾔DDL（Data Ddefinition Language）CREATE，DROP，ALTER</span><br><span class="line"></span><br><span class="line">主要为以上操作 即对逻辑结构等有操作的，其中包括表结构，视图和索引。</span><br><span class="line"></span><br><span class="line">数据查询语⾔DQL（Data Query Language）SELECT</span><br><span class="line"></span><br><span class="line">这个较为好理解 即查询操作，以select关键字。各种简单查询，连接查询等 都属于DQL。</span><br><span class="line"></span><br><span class="line">数据操纵语⾔DML（Data Manipulation Language）INSERT，UPDATE，DELETE</span><br><span class="line"></span><br><span class="line">主要为以上操作 即对数据进⾏操作的，对应上⾯所说的查询操作 DQL与DML共同构建了多数初级程序员常⽤的增</span><br><span class="line"></span><br><span class="line">删改查操作。⽽查询是较为特殊的⼀种 被划分到DQL中。</span><br><span class="line"></span><br><span class="line">数据控制功能DCL（Data Control Language）GRANT，REVOKE，COMMIT，ROLLBACK</span><br><span class="line"></span><br><span class="line">主要为以上操作 即对数据库安全性完整性等有操作的，可以简单的理解为权限控制等。</span><br></pre></td></tr></tbody></table></figure><h3 id="8-2-超键、候选键、主键、外键分别是什么？"><a href="#8-2-超键、候选键、主键、外键分别是什么？" class="headerlink" title="8.2 超键、候选键、主键、外键分别是什么？"></a><strong>8.2</strong> <strong>超键、候选键、主键、外键分别是什么？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">超键：在关系中能唯⼀标识元组的属性集称为关系模式的超键。⼀个属性可以为作为⼀个超键，多个属性组合</span><br><span class="line"></span><br><span class="line">在⼀起也可以作为⼀个超键。超键包含候选键和主键。</span><br><span class="line"></span><br><span class="line">候选键：是最⼩超键，即没有冗余元素的超键。</span><br><span class="line"></span><br><span class="line">主键：数据库表中对储存数据对象予以唯⼀和完整标识的数据列或属性的组合。⼀个数据列只能有⼀个主键，</span><br><span class="line"></span><br><span class="line">且主键的取值不能缺失，即不能为空值（Null）。</span><br><span class="line"></span><br><span class="line">外键：在⼀个表中存在的另⼀个表的主键称此表的外键。</span><br></pre></td></tr></tbody></table></figure><h3 id="8-3-SQL-约束有哪⼏种？"><a href="#8-3-SQL-约束有哪⼏种？" class="headerlink" title="8.3 SQL 约束有哪⼏种？"></a><strong>8.3 SQL</strong> <strong>约束有哪⼏种？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">NOT NULL: ⽤于控制字段的内容⼀定不能为空（NULL）。</span><br><span class="line"></span><br><span class="line">UNIQUE: 控件字段内容不能重复，⼀个表允许有多个 Unique 约束。</span><br><span class="line"></span><br><span class="line">PRIMARY KEY: 也是⽤于控件字段内容不能重复，但它在⼀个表只允许出现⼀个。</span><br><span class="line"></span><br><span class="line">FOREIGN KEY: ⽤于预防破坏表之间连接的动作，也能防⽌⾮法数据插⼊外键列，因为它必须是它指向的那个</span><br><span class="line"></span><br><span class="line">表中的值之⼀。</span><br><span class="line"></span><br><span class="line">CHECK: ⽤于控制字段的值范围。</span><br></pre></td></tr></tbody></table></figure><h3 id="8-4-六种关联查询"><a href="#8-4-六种关联查询" class="headerlink" title="8.4 六种关联查询"></a><strong>8.4</strong> <strong>六种关联查询</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">交叉连接（CROSS JOIN）</span><br><span class="line"></span><br><span class="line">内连接（INNER JOIN）</span><br><span class="line"></span><br><span class="line">外连接（LEFT JOIN/RIGHT JOIN）</span><br><span class="line"></span><br><span class="line">联合查询（UNION与UNION ALL）</span><br><span class="line"></span><br><span class="line">全连接（FULL JOIN）</span><br><span class="line"></span><br><span class="line">交叉连接（CROSS JOIN）</span><br><span class="line"></span><br><span class="line">内连接分为三类</span><br><span class="line"></span><br><span class="line">等值连接：ON A.id=B.id</span><br><span class="line"></span><br><span class="line">不等值连接：ON A.id &gt; B.id</span><br><span class="line"></span><br><span class="line">⾃连接：SELECT <span class="emphasis">* FROM A T1 INNER JOIN A T2 ON T1.id=T2.pid</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">外连接（LEFT JOIN/RIGHT JOIN）</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">左外连接：LEFT OUTER JOIN, 以左表为主，先查询出左表，按照ON后的关联条件匹配右表，没有匹配到的</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">⽤NULL填充，可以简写成LEFT JOIN</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">右外连接：RIGHT OUTER JOIN, 以右表为主，先查询出右表，按照ON后的关联条件匹配左表，没有匹配到的</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">⽤NULL填充，可以简写成RIGHT JOIN</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">联合查询（UNION与UNION ALL）</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">就是把多个结果集集中在⼀起，UNION前的结果为基准，需要注意的是联合查询的列数要相等，相同的记录⾏</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">SELECT *</span> FROM A,B(,C)或者SELECT <span class="emphasis">* FROM A CROSS JOIN B (CROSS JOIN C)#没有任何关联条件，</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">结果是笛卡尔积，结果集会很⼤，没有意义，很少使⽤内连接（INNER JOIN）SELECT *</span> FROM A,B WHERE</span><br><span class="line"></span><br><span class="line">A.id=B.id或者SELECT <span class="emphasis">* FROM A INNER JOIN B ON A.id=B.id多表中同时符合某种条件的数据记录的集</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">合，INNER JOIN可以缩写为JOIN</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">如果使⽤UNION ALL，不会合并重复的记录⾏</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">效率 UNION ⾼于 UNION ALL</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">全连接（FULL JOIN）</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">MySQL不⽀持全连接</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">可以使⽤LEFT JOIN 和UNION和RIGHT JOIN联合使⽤</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">\1. 内连接结果：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select r. *</span> ,s. <span class="emphasis">* from r inner join s on r.c=s.c</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">\1. 左连接结果：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select r. *</span> ,s. <span class="emphasis">* from r left join s on r.c=s.c</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">\1. 右连接结果：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select r. *</span> ,s. <span class="emphasis">* from r right join s on r.c=s.cA </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">\1. 全表连接的结果（MySql不⽀持，Oracle⽀持）：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select r. *</span> ,s. <span class="emphasis">* from r full join s on r.c=s.c</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-5-什么是⼦查询"><a href="#8-5-什么是⼦查询" class="headerlink" title="8.5 什么是⼦查询"></a><strong>8.5</strong> <strong>什么是⼦查询</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">\1. 条件：⼀条SQL语句的查询结果做为另⼀条查询语句的条件或查询结果</span><br><span class="line"></span><br><span class="line">\2. 嵌套：多条SQL语句嵌套使⽤，内部的SQL查询语句称为⼦查询。</span><br></pre></td></tr></tbody></table></figure><h3 id="8-6-⼦查询的三种情况"><a href="#8-6-⼦查询的三种情况" class="headerlink" title="8.6 ⼦查询的三种情况"></a><strong>8.6</strong> <strong>⼦查询的三种情况</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">\1. ⼦查询是单⾏单列的情况：结果集是⼀个值，⽗查询使⽤：=、 &lt;、 &gt; 等运算符</span><br><span class="line"></span><br><span class="line">\1. ⼦查询是多⾏单列的情况：结果集类似于⼀个数组，⽗查询使⽤：in 运算符</span><br><span class="line"></span><br><span class="line">\1. ⼦查询是多⾏多列的情况：结果集类似于⼀张虚拟表，不能⽤于where条件，⽤于select⼦句中做为⼦表</span><br><span class="line"></span><br><span class="line">-- 查询⼯资最⾼的员⼯是谁？</span><br><span class="line"></span><br><span class="line">select <span class="emphasis">* from employee where salary=(select max(salary) from employee); </span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">12</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">-- 查询⼯资最⾼的员⼯是谁？</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select *</span> from employee where salary=(select max(salary) from employee); </span><br></pre></td></tr></tbody></table></figure><h3 id="8-7-mysql中in-和-exists区别"><a href="#8-7-mysql中in-和-exists区别" class="headerlink" title="8.7 mysql中in 和 exists区别"></a>8.7 mysql中in 和 exists区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">mysql中的in语句是把外表和内表作hash 连接，⽽exists语句是对外表作loop循环，每次loop循环再对内表进⾏查</span><br><span class="line"></span><br><span class="line">询。⼀直⼤家都认为exists⽐in语句的效率要⾼，这种说法其实是不准确的。这个是要区分环境的。</span><br><span class="line"></span><br><span class="line">\1. 如果查询的两个表⼤⼩相当，那么⽤in和exists差别不⼤。</span><br><span class="line"></span><br><span class="line">\2. 如果两个表中⼀个较⼩，⼀个是⼤表，则⼦查询表⼤的⽤exists，⼦查询表⼩的⽤in。</span><br><span class="line"></span><br><span class="line">\3. not in 和not exists：如果查询语句使⽤了not in，那么内外表都进⾏全表扫描，没有⽤到索引；⽽not extsts的</span><br><span class="line"></span><br><span class="line">⼦查询依然能⽤到表上的索引。所以⽆论那个表⼤，⽤not exists都⽐not in要快。</span><br></pre></td></tr></tbody></table></figure><h3 id="8-8-varchar与char的区别"><a href="#8-8-varchar与char的区别" class="headerlink" title="8.8 varchar与char的区别"></a>8.8 varchar与char的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="strong">**char**</span><span class="strong">**的特点**</span></span><br><span class="line"></span><br><span class="line">char表示定⻓字符串，⻓度是固定的；</span><br><span class="line"></span><br><span class="line">如果插⼊数据的⻓度⼩于char的固定⻓度时，则⽤空格填充；</span><br><span class="line"></span><br><span class="line">因为⻓度固定，所以存取速度要⽐varchar快很多，甚⾄能快50%，但正因为其⻓度固定，所以会占据多余的空</span><br><span class="line"></span><br><span class="line">间，是空间换时间的做法；</span><br><span class="line"></span><br><span class="line">对于char来说，最多能存放的字符个数为255，和编码⽆关</span><br><span class="line"></span><br><span class="line"><span class="strong">**varchar**</span><span class="strong">**的特点**</span></span><br><span class="line"></span><br><span class="line">varchar表示可变⻓字符串，⻓度是可变的；</span><br><span class="line"></span><br><span class="line">插⼊的数据是多⻓，就按照多⻓来存储；</span><br><span class="line"></span><br><span class="line">varchar在存取⽅⾯与char相反，它存取慢，因为⻓度不固定，但正因如此，不占据多余的空间，是时间换空间</span><br><span class="line"></span><br><span class="line">的做法；</span><br><span class="line"></span><br><span class="line">对于varchar来说，最多能存放的字符个数为65532</span><br><span class="line"></span><br><span class="line">总之，结合性能⻆度（char更快）和节省磁盘空间⻆度（varchar更⼩），具体情况还需具体来设计数据库才是妥当</span><br><span class="line"></span><br><span class="line">的做法。</span><br><span class="line"></span><br><span class="line">-- 1) 查询出2011年以后⼊职的员⼯信息</span><br><span class="line"></span><br><span class="line">-- 2) 查询所有的部⻔信息，与上⾯的虚拟表中的信息⽐对，找出所有部⻔ID相等的员⼯。</span><br><span class="line"></span><br><span class="line">select <span class="emphasis">* from dept d, (select *</span> from employee where join<span class="emphasis">_date &gt; '2011-1-1') e where</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">e.dept_</span>id = d.id; </span><br><span class="line"></span><br><span class="line">-- 使⽤表连接：</span><br><span class="line"></span><br><span class="line">select d.<span class="emphasis">*, e.*</span> from dept d inner join employee e on d.id = e.dept<span class="emphasis">_id where</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">e.join_</span>date &gt; '2011-1-1' </span><br></pre></td></tr></tbody></table></figure><h3 id="8-9-varchar-50-中50的涵义"><a href="#8-9-varchar-50-中50的涵义" class="headerlink" title="8.9 varchar(50)中50的涵义"></a>8.9 varchar(50)中50的涵义</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">最多存放50个字符，varchar(50)和(200)存储hello所占空间⼀样，但后者在排序时会消耗更多内存，因为order by</span><br><span class="line"></span><br><span class="line">col采⽤fixed<span class="emphasis">_length计算col⻓度(memory引擎也⼀样)。在早期 MySQL 版本中， 50 代表字节数，现在代表字符</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">数。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-10-int-20-中20的涵义"><a href="#8-10-int-20-中20的涵义" class="headerlink" title="8.10 int(20)中20的涵义"></a>8.10 int(20)中20的涵义</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">是指显示字符的⻓度。20表示最⼤显示宽度为20，但仍占4字节存储，存储范围不变；</span><br><span class="line"></span><br><span class="line">不影响内部存储，只是影响带 zerofill 定义的 int 时，前⾯补多少个 0，易于报表展示</span><br></pre></td></tr></tbody></table></figure><h3 id="8-11-mysql为什么这么设计"><a href="#8-11-mysql为什么这么设计" class="headerlink" title="8.11 mysql为什么这么设计"></a>8.11 mysql为什么这么设计</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">对⼤多数应⽤没有意义，只是规定⼀些⼯具⽤来显示字符的个数；int(1)和int(20)存储和计算均⼀样；</span><br></pre></td></tr></tbody></table></figure><h3 id="8-12-mysql中int-10-和char-10-以及varchar-10-的区别"><a href="#8-12-mysql中int-10-和char-10-以及varchar-10-的区别" class="headerlink" title="8.12 mysql中int(10)和char(10)以及varchar(10)的区别"></a>8.12 mysql中int(10)和char(10)以及varchar(10)的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">int(10)的10表示显示的数据的⻓度，不是存储数据的⼤⼩；chart(10)和varchar(10)的10表示存储数据的⼤⼩，</span><br><span class="line"></span><br><span class="line">即表示存储多少个字符。</span><br><span class="line"></span><br><span class="line">int(10) 10位的数据⻓度 9999999999，占32个字节，int型4位</span><br><span class="line"></span><br><span class="line">char(10) 10位固定字符串，不⾜补空格 最多10个字符</span><br><span class="line"></span><br><span class="line">varchar(10) 10位可变字符串，不⾜补空格 最多10个字符</span><br><span class="line"></span><br><span class="line">char(10)表示存储定⻓的10个字符，不⾜10个就⽤空格补⻬，占⽤更多的存储空间</span><br><span class="line"></span><br><span class="line">varchar(10)表示存储10个变⻓的字符，存储多少个就是多少个，空格也按⼀个字符存储，这⼀点是和char(10)</span><br><span class="line"></span><br><span class="line">的空格不同的，char(10)的空格表示占位不算⼀个字符</span><br></pre></td></tr></tbody></table></figure><h3 id="8-13-FLOAT和DOUBLE的区别是什么"><a href="#8-13-FLOAT和DOUBLE的区别是什么" class="headerlink" title="8.13 FLOAT和DOUBLE的区别是什么"></a>8.13 FLOAT和DOUBLE的区别是什么</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">FLOAT类型数据可以存储⾄多8位⼗进制数，并在内存中占4字节。</span><br><span class="line"></span><br><span class="line">DOUBLE类型数据可以存储⾄多18位⼗进制数，并在内存中占8字节。</span><br></pre></td></tr></tbody></table></figure><h3 id="8-15-UNION与UNION-ALL的区别？"><a href="#8-15-UNION与UNION-ALL的区别？" class="headerlink" title="8.15 UNION与UNION ALL的区别？"></a>8.15 UNION与UNION ALL的区别？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">如果使⽤UNION ALL，不会合并重复的记录⾏</span><br><span class="line"></span><br><span class="line">效率 UNION ⾼于 UNION ALL</span><br></pre></td></tr></tbody></table></figure><h1 id="九-SQL优化"><a href="#九-SQL优化" class="headerlink" title="九 SQL优化"></a>九 SQL优化</h1><h3 id="9-1-如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到-或者说怎么才可以知道这条语句运⾏很慢的原因"><a href="#9-1-如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到-或者说怎么才可以知道这条语句运⾏很慢的原因" class="headerlink" title="9.1 如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到?或者说怎么才可以知道这条语句运⾏很慢的原因"></a><strong>9.1</strong> 如何定位及优化SQL语句的性能问题？创建的索引有没有被使⽤到?或者说怎么才可以知道这条语句运⾏很慢的原因</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">对于低性能的SQL语句的定位，最重要也是最有效的⽅法就是使⽤执⾏计划，MySQL提供了explain命令来查看语</span><br><span class="line"></span><br><span class="line">句的执⾏计划。 我们知道，不管是哪种数据库，或者是哪种数据库引擎，在对⼀条SQL语句进⾏执⾏的过程中都会</span><br><span class="line"></span><br><span class="line">做很多相关的优化，<span class="strong">**对于查询语句，最重要的优化⽅式就是使⽤索引**</span>。 ⽽<span class="strong">**执⾏计划，就是显示数据库引擎对于**</span><span class="strong">**SQL**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**语句的执⾏的详细情况，其中包含了是否使⽤索引，使⽤什么索引，使⽤的索引的相关信息等**</span>。</span><br><span class="line"></span><br><span class="line">执⾏计划包含的信息 <span class="strong">**id**</span> 有⼀组数字组成。表示⼀个查询中各个⼦查询的执⾏顺序;<span class="strong">**id**</span> </span><br><span class="line"></span><br><span class="line"><span class="strong">**select<span class="emphasis">_type** </span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">**description**</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">1 SIMPLE </span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">不包含任何⼦查询或union等查询</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">2 PRIMARY </span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">包含⼦查询最外层查询就显示为 PRIMARY</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">3 SUBQUERY </span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">在select或 where字句中包含的查询</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">4 DERIVED </span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">from字句中包含的查询</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">5 UNION </span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">出现在union后的查询语句中</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">6 UNION RESULT </span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">从UNION中获取结果集，例如上⽂的第三个例⼦</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">id相同执⾏顺序由上⾄下。</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">id不同，id值越⼤优先级越⾼，越先被执⾏。</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">id为null时表示⼀个结果集，不需要使⽤它查询，常出现在包含union等查询语句中。</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">**select_</span>type**</span> 每个⼦查询的查询类型，⼀些常⻅的查询类型。</span><br><span class="line"></span><br><span class="line"><span class="strong">**table**</span> 查询的数据表，当从衍⽣表中查数据时会显示 x 表示对应的执⾏计划id <span class="strong">**partitions**</span> 表分区、表创建的时候可</span><br><span class="line"></span><br><span class="line">以指定通过那个列进⾏表分区。 举个例⼦：</span><br><span class="line"></span><br><span class="line"><span class="strong">**type**</span>(⾮常重要，可以看到有没有⾛索引) 访问类型</span><br><span class="line"></span><br><span class="line">ALL 扫描全表数据</span><br><span class="line"></span><br><span class="line">index 遍历索引</span><br><span class="line"></span><br><span class="line">range 索引范围查找</span><br><span class="line"></span><br><span class="line">index<span class="emphasis">_subquery 在⼦查询中使⽤ ref</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">unique_</span>subquery 在⼦查询中使⽤ eq<span class="emphasis">_ref</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">ref_</span>or<span class="emphasis">_null 对Null进⾏索引的优化的 ref</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">fulltext 使⽤全⽂索引</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">ref 使⽤⾮唯⼀索引查找数据</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">eq_</span>ref 在join查询中使⽤PRIMARY KEYorUNIQUE NOT NULL索引关联。</span><br><span class="line"></span><br><span class="line"><span class="strong">**possible<span class="emphasis">_keys** 可能使⽤的索引，注意不⼀定会使⽤。查询涉及到的字段上若存在索引，则该索引将被列出来。当</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">该列为 NULL时就要考虑当前的SQL是否需要优化了。</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">create table tmp (</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"> id int unsigned not null AUTO_</span>INCREMENT,</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"> name varchar(255),</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"> PRIMARY KEY (id)</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">) engine = innodb</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">partition by key (id) partitions 5;</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span>key<span class="strong">** 显示MySQL在查询中实际使⽤的索引，若没有使⽤索引，显示为NULL。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span>TIPS<span class="strong">**:查询中若使⽤了覆盖索引(覆盖索引：索引的数据覆盖了需要查询的所有数据)，则该索引仅出现在key列表中</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span>key<span class="emphasis">_length<span class="strong">** 索引⻓度</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">**</span>ref<span class="strong">** 表示上述表的连接匹配条件，即哪些列或常量被⽤于查找索引列上的值</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">**</span>rows<span class="strong">** 返回估算的结果集数⽬，并不是⼀个准确的值。</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">**</span>extra<span class="strong">** 的信息⾮常丰富，常⻅的有：</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">\1. Using index 使⽤覆盖索引</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">\2. Using where 使⽤了⽤where⼦句来过滤结果集</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">\3. Using filesort 使⽤⽂件排序，使⽤⾮索引列进⾏排序时出现，⾮常消耗性能，尽量优化。</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">\4. Using temporary 使⽤了临时表 sql优化的⽬标可以参考阿⾥开发⼿册</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-2-SQL的⽣命周期？"><a href="#9-2-SQL的⽣命周期？" class="headerlink" title="9.2 SQL的⽣命周期？"></a>9.2 SQL的⽣命周期？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">\1. 应⽤服务器与数据库服务器建⽴⼀个连接</span><br><span class="line"></span><br><span class="line">\2. 数据库进程拿到请求sql</span><br><span class="line"></span><br><span class="line">\3. 解析并⽣成执⾏计划，执⾏</span><br><span class="line"></span><br><span class="line">\4. 读取数据到内存并进⾏逻辑处理</span><br><span class="line"></span><br><span class="line">\5. 通过步骤⼀的连接，发送结果到客户端</span><br><span class="line"></span><br><span class="line">\6. 关掉连接，释放资源</span><br><span class="line">【推荐】SQL性能优化的⽬标：⾄少要达到 range 级别，要求是ref级别，如果可以是consts最好。</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">1） consts 单表中最多只有⼀个匹配⾏（主键或者唯⼀索引），在优化阶段即可读取到数据。</span><br><span class="line"></span><br><span class="line">2） ref 指的是使⽤普通的索引（normal index）。</span><br><span class="line"></span><br><span class="line">3） range 对索引进⾏范围检索。</span><br><span class="line"></span><br><span class="line">反例：explain表的结果，type=index，索引物理⽂件全扫描，速度⾮常慢，这个index级别⽐较range还低，</span><br><span class="line"></span><br><span class="line">与全表扫描是⼩巫⻅⼤巫。</span><br></pre></td></tr></tbody></table></figure><h3 id="9-3-⼤表数据查询，怎么优化"><a href="#9-3-⼤表数据查询，怎么优化" class="headerlink" title="9.3 ⼤表数据查询，怎么优化"></a><strong>9.3</strong> <strong>⼤表数据查询，怎么优化</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 优化shema、sql语句+索引；</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 第⼆加缓存，memcached, redis；</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 主从复制，读写分离；</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 垂直拆分，根据你模块的耦合度，将⼀个⼤的系统分为多个⼩的系统，也就是分布式系统；</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> ⽔平切分，针对数据量⼤的表，这⼀步最麻烦，最能考验技术⽔平，要选择⼀个合理的sharding key, 为了有好</span><br><span class="line"></span><br><span class="line">的查询效率，表结构也要改动，做⼀定的冗余，应⽤也要改，sql中尽量带sharding key，将数据定位到限定的</span><br><span class="line"></span><br><span class="line">表上去查，⽽不是扫描全部的表；</span><br></pre></td></tr></tbody></table></figure><h3 id="9-4-超⼤分⻚怎么处理？"><a href="#9-4-超⼤分⻚怎么处理？" class="headerlink" title="9.4 超⼤分⻚怎么处理？"></a><strong>9.4</strong> <strong>超⼤分⻚怎么处理？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">超⼤的分⻚⼀般从两个⽅向上来解决.</span><br><span class="line"></span><br><span class="line">数据库层⾯,这也是我们主要集中关注的(虽然收效没那么⼤),类似于 select <span class="emphasis">* from table where age &gt; 20</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">limit 1000000,10 这种查询其实也是有可以优化的余地的. 这条语句需要load1000000数据然后基本上全部丢</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">弃,只取10条当然⽐较慢. 当时我们可以修改为 select *</span> from table where id in (select id from table</span><br><span class="line"></span><br><span class="line">where age &gt; 20 limit 1000000,10) .这样虽然也load了⼀百万的数据,但是由于索引覆盖,要查询的所有字段都</span><br><span class="line"></span><br><span class="line">在索引中,所以速度会很快. 同时如果ID连续的好,我们还可以 select <span class="emphasis">* from table where id &gt; 1000000</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">limit 10 ,效率也是不错的,优化的可能性有许多种,但是核⼼思想都⼀样,就是减少load的数据.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">从需求的⻆度减少这种请求…主要是不做类似的需求(直接跳转到⼏百万⻚之后的具体某⼀⻚.只允许逐⻚查看</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">或者按照给定的路线⾛,这样可预测,可缓存)以及防⽌ID泄漏且连续被⼈恶意攻击.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">解决超⼤分⻚,其实主要是靠缓存,可预测性的提前查到内容,缓存⾄redis等k-V数据库中,直接返回即可.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">在阿⾥巴巴《Java开发⼿册》中,对超⼤分⻚的解决办法是类似于上⾯提到的第⼀种.</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-5-mysql-分⻚"><a href="#9-5-mysql-分⻚" class="headerlink" title="9.5 mysql 分⻚"></a><strong>9.5 mysql</strong> <strong>分⻚</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">LIMIT ⼦句可以被⽤于强制 SELECT 语句返回指定的记录数。LIMIT 接受⼀个或两个数字参数。参数必须是⼀个整</span><br><span class="line"></span><br><span class="line">数常量。如果给定两个参数，第⼀个参数指定第⼀个返回记录⾏的偏移量，第⼆个参数指定返回记录⾏的最⼤数</span><br><span class="line"></span><br><span class="line">⽬。初始记录⾏的偏移量是 0(⽽不是 1)</span><br><span class="line"></span><br><span class="line">为了检索从某⼀个偏移量到记录集的结束所有的记录⾏，可以指定第⼆个参数为 -1：</span><br><span class="line"></span><br><span class="line">【推荐】利⽤延迟关联或者⼦查询优化超多分⻚场景。</span><br><span class="line"></span><br><span class="line">说明：MySQL并不是跳过offset⾏，⽽是取offset+N⾏，然后返回放弃前offset⾏，返回N⾏，那当offset特</span><br><span class="line"></span><br><span class="line">别⼤的时候，效率就⾮常的低下，要么控制返回的总⻚数，要么对超过特定阈值的⻚数进⾏SQL改写。</span><br><span class="line"></span><br><span class="line">正例：先快速定位需要获取的id段，然后再关联：</span><br><span class="line"></span><br><span class="line">SELECT a.<span class="emphasis">* FROM 表1 a, (select id from 表1 where 条件 LIMIT 100000,20 ) b where</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">a.id=b.id</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">1234567</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">mysql&gt; SELECT *</span> FROM table LIMIT 5,10; // 检索记录⾏ 6-15</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT <span class="emphasis">* FROM table LIMIT 95,-1; // 检索记录⾏ 96-last.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">1如果只给定⼀个参数，它表示返回最⼤的记录⾏数⽬：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">换句话说，LIMIT n 等价于 LIMIT 0,n。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-6-慢查询⽇志"><a href="#9-6-慢查询⽇志" class="headerlink" title="9.6 慢查询⽇志"></a><strong>9.6</strong> <strong>慢查询⽇志</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">⽤于记录执⾏时间超过某个临界值的SQL⽇志，⽤于快速定位慢查询，为我们的优化做参考。</span><br><span class="line"></span><br><span class="line">开启慢查询⽇志</span><br><span class="line"></span><br><span class="line">配置项： slow<span class="emphasis">_query_</span>log</span><br><span class="line"></span><br><span class="line">可以使⽤ show variables like ‘slov<span class="emphasis">_query_</span>log’ 查看是否开启，如果状态值为 OFF ，可以使⽤ set GLOBAL</span><br><span class="line"></span><br><span class="line">slow<span class="emphasis">_query_</span>log = on 来开启，它会在 datadir 下产⽣⼀个 xxx-slow.log 的⽂件。</span><br><span class="line"></span><br><span class="line">设置临界时间</span><br><span class="line"></span><br><span class="line">配置项： long<span class="emphasis">_query_</span>time</span><br><span class="line"></span><br><span class="line">查看： show VARIABLES like 'long<span class="emphasis">_query_</span>time' ，单位秒</span><br><span class="line"></span><br><span class="line">设置： set long<span class="emphasis">_query_</span>time=0.5</span><br><span class="line"></span><br><span class="line">实操时应该从⻓时间设置到短的时间，即将最慢的SQL优化掉</span><br><span class="line"></span><br><span class="line">查看⽇志，⼀旦SQL超过了我们设置的临界时间就会被记录到 xxx-slow.log 中</span><br></pre></td></tr></tbody></table></figure><h3 id="9-7-关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？"><a href="#9-7-关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？" class="headerlink" title="9.7 关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？"></a><strong>9.7</strong> 关⼼过业务系统⾥⾯的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">在业务系统中，除了使⽤主键进⾏的查询，其他的我都会在测试库上测试其耗时，慢查询的统计主要由运维在做，</span><br><span class="line"></span><br><span class="line">会定期将业务中的慢查询反馈给我们。</span><br><span class="line"></span><br><span class="line">慢查询的优化⾸先要搞明⽩慢的原因是什么？ 是查询条件没有命中索引？是load了不需要的数据列？还是数据量太</span><br><span class="line"></span><br><span class="line">⼤？</span><br><span class="line"></span><br><span class="line">所以优化也是针对这三个⽅向来的，</span><br><span class="line"></span><br><span class="line">⾸先分析语句，看看是否load了额外的数据，可能是查询了多余的⾏并且抛弃掉了，可能是加载了许多结果中</span><br><span class="line"></span><br><span class="line">并不需要的列，对语句进⾏分析以及重写。</span><br><span class="line"></span><br><span class="line">分析语句的执⾏计划，然后获得其使⽤索引的情况，之后修改语句或者修改索引，使得语句可以尽可能的命中</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT <span class="emphasis">* FROM table LIMIT 5; //检索前 5 个记录⾏索引。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">如果对语句的优化已经⽆法进⾏，可以考虑表中的数据量是否太⼤，如果是的话可以进⾏横向或者纵向的分表。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-8-为什么要尽量设定⼀个主键？"><a href="#9-8-为什么要尽量设定⼀个主键？" class="headerlink" title="9.8 为什么要尽量设定⼀个主键？"></a><strong>9.8</strong> <strong>为什么要尽量设定⼀个主键？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">主键是数据库确保数据⾏在整张表唯⼀性的保障，即使业务上本张表没有主键，也建议添加⼀个⾃增⻓的ID列作为</span><br><span class="line"></span><br><span class="line">主键。设定了主键之后，在后续的删改查的时候可能更加快速以及确保操作数据范围安全。</span><br></pre></td></tr></tbody></table></figure><h3 id="9-9-主键使⽤⾃增ID还是UUID"><a href="#9-9-主键使⽤⾃增ID还是UUID" class="headerlink" title="9.9 主键使⽤⾃增ID还是UUID"></a><strong>9.9</strong> 主键使⽤⾃增ID还是UUID</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">推荐使⽤⾃增ID，不要使⽤UUID。</span><br><span class="line"></span><br><span class="line">因为在InnoDB存储引擎中，主键索引是作为聚簇索引存在的，也就是说，主键索引的B+树叶⼦节点上存储了主键</span><br><span class="line"></span><br><span class="line">索引以及全部的数据(按照顺序)，如果主键索引是⾃增ID，那么只需要不断向后排列即可，如果是UUID，由于到来</span><br><span class="line"></span><br><span class="line">的ID与原来的⼤⼩不确定，会造成⾮常多的数据插⼊，数据移动，然后导致产⽣很多的内存碎⽚，进⽽造成插⼊性</span><br><span class="line"></span><br><span class="line">能的下降。</span><br><span class="line"></span><br><span class="line">总之，在数据量⼤⼀些的情况下，⽤⾃增主键性能会好⼀些。</span><br><span class="line"></span><br><span class="line">关于主键是聚簇索引，如果没有主键，InnoDB会选择⼀个唯⼀键来作为聚簇索引，如果没有唯⼀键，会⽣成⼀个隐</span><br><span class="line"></span><br><span class="line">式的主键。</span><br></pre></td></tr></tbody></table></figure><h3 id="9-10-字段为什么要求定义为not-null"><a href="#9-10-字段为什么要求定义为not-null" class="headerlink" title="9.10 字段为什么要求定义为not null"></a><strong>9.10</strong> 字段为什么要求定义为not null</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">null值会占⽤更多的字节，且会在程序中造成很多与预期不符的情况</span><br></pre></td></tr></tbody></table></figure><h3 id="9-11-如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？"><a href="#9-11-如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？" class="headerlink" title="9.11 如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？"></a><strong>9.11</strong> <strong>如果要存储⽤户的密码散列，应该使⽤什么字段进⾏存储？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">密码散列，盐，⽤户身份证号等固定⻓度的字符串应该使⽤char⽽不是varchar来存储，这样可以节省空间且提⾼检</span><br><span class="line"></span><br><span class="line">索效率。</span><br></pre></td></tr></tbody></table></figure><h3 id="9-12-优化查询过程中的数据访问"><a href="#9-12-优化查询过程中的数据访问" class="headerlink" title="9.12 优化查询过程中的数据访问"></a><strong>9.12</strong> <strong>优化查询过程中的数据访问</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">访问数据太多导致查询性能下降</span><br><span class="line"></span><br><span class="line">确定应⽤程序是否在检索⼤量超过需要的数据，可能是太多⾏或列</span><br><span class="line"></span><br><span class="line">确认MySQL服务器是否在分析⼤量不必要的数据⾏</span><br><span class="line"></span><br><span class="line">避免犯如下SQL语句错误</span><br><span class="line"></span><br><span class="line">查询不需要的数据。解决办法：使⽤limit解决</span><br><span class="line"></span><br><span class="line">多表关联返回全部列。解决办法：指定列名</span><br><span class="line"></span><br><span class="line">总是返回全部列。解决办法：避免使⽤SELECT <span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">重复查询相同的数据。解决办法：可以缓存数据，下次直接读取缓存</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">是否在扫描额外的记录。解决办法：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">使⽤explain进⾏分析，如果发现查询需要扫描⼤量的数据，但只返回少数的⾏，可以通过如下技巧去优化：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">使⽤索引覆盖扫描，把所有的列都放到索引中，这样存储引擎不需要回表获取对应⾏就可以返回结果。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">改变数据库和表的结构，修改数据表范式重写SQL语句，让优化器可以以更优的⽅式执⾏查询。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-13-优化⻓难的查询语句"><a href="#9-13-优化⻓难的查询语句" class="headerlink" title="9.13 优化⻓难的查询语句"></a><strong>9.13</strong> <strong>优化⻓难的查询语句</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">⼀个复杂查询还是多个简单查询</span><br><span class="line"></span><br><span class="line">MySQL内部每秒能扫描内存中上百万⾏数据，相⽐之下，响应数据给客户端就要慢得多</span><br><span class="line"></span><br><span class="line">使⽤尽可能⼩的查询是好的，但是有时将⼀个⼤的查询分解为多个⼩的查询是很有必要的。</span><br><span class="line"></span><br><span class="line">切分查询</span><br><span class="line"></span><br><span class="line">将⼀个⼤的查询分为多个⼩的相同的查询</span><br><span class="line"></span><br><span class="line">⼀次性删除1000万的数据要⽐⼀次删除1万，暂停⼀会的⽅案更加损耗服务器开销。</span><br><span class="line"></span><br><span class="line">分解关联查询，让缓存的效率更⾼。执⾏单个查询可以减少锁的竞争。在应⽤层做关联更容易对数据库进⾏拆分。</span><br><span class="line">查询效率会有⼤幅提升。较少冗余记录的查询。</span><br></pre></td></tr></tbody></table></figure><h3 id="9-14-优化特定类型的查询语句"><a href="#9-14-优化特定类型的查询语句" class="headerlink" title="9.14 优化特定类型的查询语句"></a><strong>9.14</strong> <strong>优化特定类型的查询语句</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">count(<span class="emphasis">*)会忽略所有的列，直接统计所有列数，不要使⽤count(列名)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">MyISAM中，没有任何where条件的count(*</span>)⾮常快。</span><br><span class="line"></span><br><span class="line">当有where条件时，MyISAM的count统计不⼀定⽐其它引擎快。</span><br><span class="line"></span><br><span class="line">可以使⽤explain查询近似值，⽤近似值替代count(<span class="emphasis">*)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">增加汇总表使⽤缓存</span></span><br></pre></td></tr></tbody></table></figure><h3 id="9-15-优化关联查询"><a href="#9-15-优化关联查询" class="headerlink" title="9.15 优化关联查询"></a><strong>9.15</strong> <strong>优化关联查询</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">确定ON或者USING⼦句中是否有索引。</span><br><span class="line"></span><br><span class="line">确保GROUP BY和ORDER BY只有⼀个表中的列，这样MySQL才有可能使⽤索引</span><br></pre></td></tr></tbody></table></figure><h3 id="9-16-优化⼦查询"><a href="#9-16-优化⼦查询" class="headerlink" title="9.16 优化⼦查询"></a><strong>9.16</strong> 优化⼦查询</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">⽤关联查询替代</span><br><span class="line"></span><br><span class="line">优化GROUP BY和DISTINCT</span><br><span class="line"></span><br><span class="line">这两种查询据可以使⽤索引来优化，是最有效的优化⽅法</span><br><span class="line"></span><br><span class="line">关联查询中，使⽤标识列分组的效率更⾼</span><br><span class="line"></span><br><span class="line">如果不需要ORDER BY，进⾏GROUP BY时加ORDER BY NULL，MySQL不会再进⾏⽂件排序。</span><br><span class="line"></span><br><span class="line">WITH ROLLUP超级聚合，可以挪到应⽤程序处理</span><br></pre></td></tr></tbody></table></figure><h3 id="9-17-优化LIMIT分⻚"><a href="#9-17-优化LIMIT分⻚" class="headerlink" title="9.17 优化LIMIT分⻚"></a><strong>9.17</strong> 优化LIMIT分⻚</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">LIMIT偏移量⼤的时候，查询效率较低</span><br><span class="line"></span><br><span class="line">可以记录上次查询的最⼤ID，下次查询时直接根据该ID来查询<span class="strong">**9.18**</span> <span class="strong">**优化**</span><span class="strong">**UNION**</span><span class="strong">**查询**</span></span><br><span class="line"></span><br><span class="line">UNION ALL的效率⾼于UNION</span><br></pre></td></tr></tbody></table></figure><h3 id="9-19-优化WHERE⼦句"><a href="#9-19-优化WHERE⼦句" class="headerlink" title="9.19 优化WHERE⼦句"></a><strong>9.19</strong> 优化WHERE⼦句</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">解题⽅法</span><br><span class="line"></span><br><span class="line">对于此类考题，先说明如何定位低效SQL语句，然后根据SQL语句可能低效的原因做排查，先从索引着⼿，如果索</span><br><span class="line"></span><br><span class="line">引没有问题，考虑以上⼏个⽅⾯，数据访问的问题，⻓难查询句的问题还是⼀些特定类型优化的问题，逐⼀回答。</span><br><span class="line"></span><br><span class="line">SQL语句优化的⼀些⽅法？</span><br><span class="line"></span><br><span class="line">1.对查询进⾏优化，应尽量避免全表扫描，⾸先应考虑在 where 及 order by 涉及的列上建⽴索引。</span><br><span class="line"></span><br><span class="line">2.应尽量避免在 where ⼦句中对字段进⾏ null 值判断，否则将导致引擎放弃使⽤索引⽽进⾏全表扫描，如：</span><br><span class="line"></span><br><span class="line">3.应尽量避免在 where ⼦句中使⽤!=或&lt;&gt;操作符，否则引擎将放弃使⽤索引⽽进⾏全表扫描。</span><br><span class="line"></span><br><span class="line">4.应尽量避免在 where ⼦句中使⽤or 来连接条件，否则将导致引擎放弃使⽤索引⽽进⾏全表扫描，如：</span><br><span class="line"></span><br><span class="line">5.in 和 not in 也要慎⽤，否则会导致全表扫描，如：</span><br><span class="line"></span><br><span class="line">6.下⾯的查询也将导致全表扫描：select id from t where name like ‘%李%’若要提⾼效率，可以考虑全⽂检</span><br><span class="line"></span><br><span class="line">索。</span><br><span class="line"></span><br><span class="line">7.如果在 where ⼦句中使⽤参数，也会导致全表扫描。因为SQL只有在运⾏时才会解析局部变量，但优化程序</span><br><span class="line"></span><br><span class="line">不能将访问计划的选择推迟到运⾏时；它必须在编译时进⾏选择。然 ⽽，如果在编译时建⽴访问计划，变量的</span><br><span class="line"></span><br><span class="line">值还是未知的，因⽽⽆法作为索引选择的输⼊项。如下⾯语句将进⾏全表扫描：</span><br><span class="line"></span><br><span class="line">select id from t where num is null</span><br><span class="line"></span><br><span class="line">-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</span><br><span class="line"></span><br><span class="line">select id from t where num=</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line"></span><br><span class="line">select id from t where num=10 or num=20</span><br><span class="line"></span><br><span class="line">-- 可以这样查询：</span><br><span class="line"></span><br><span class="line">select id from t where num=10 union all select id from t where num=20</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line"></span><br><span class="line">select id from t where num in(1,2,3)</span><br><span class="line"></span><br><span class="line">-- 对于连续的数值，能⽤ between 就不要⽤ in 了：</span><br><span class="line"></span><br><span class="line">select id from t where num between 1 and 3</span><br><span class="line"></span><br><span class="line">1238.应尽量避免在 where ⼦句中对字段进⾏表达式操作，这将导致引擎放弃使⽤索引⽽进⾏全表扫描。如：</span><br><span class="line"></span><br><span class="line">9.应尽量避免在where⼦句中对字段进⾏函数操作，这将导致引擎放弃使⽤索引⽽进⾏全表扫描。如：</span><br><span class="line"></span><br><span class="line">10.不要在 where ⼦句中的“=”左边进⾏函数、算术运算或其他表达式运算，否则系统将可能⽆法正确使⽤索</span><br><span class="line"></span><br><span class="line">引。</span><br></pre></td></tr></tbody></table></figure><h1 id="⼗-数据库优化"><a href="#⼗-数据库优化" class="headerlink" title="⼗ 数据库优化"></a>⼗ 数据库优化</h1><h3 id="10-1-为什么要优化"><a href="#10-1-为什么要优化" class="headerlink" title="10.1 为什么要优化"></a><strong>10.1</strong> <strong>为什么要优化</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">系统的吞吐量瓶颈往往出现在数据库的访问速度上</span><br><span class="line"></span><br><span class="line">随着应⽤程序的运⾏，数据库的中的数据会越来越多，处理时间会相应变慢</span><br><span class="line"></span><br><span class="line">数据是存放在磁盘上的，读写速度⽆法和内存相⽐</span><br><span class="line"></span><br><span class="line">优化原则：减少系统瓶颈，减少资源占⽤，增加系统的反应速度。</span><br></pre></td></tr></tbody></table></figure><h3 id="10-2-数据库结构优化"><a href="#10-2-数据库结构优化" class="headerlink" title="10.2 数据库结构优化"></a><strong>10.2</strong> <strong>数据库结构优化</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">⼀个好的数据库设计⽅案对于数据库的性能往往会起到事半功倍的效果。</span><br><span class="line"></span><br><span class="line">需要考虑数据冗余、查询和更新的速度、字段的数据类型是否合理等多⽅⾯的内容。</span><br><span class="line"></span><br><span class="line"><span class="strong">**将字段很多的表分解成多个表**</span></span><br><span class="line"></span><br><span class="line">select id from t where num=@num</span><br><span class="line"></span><br><span class="line">-- 可以改为强制查询使⽤索引：</span><br><span class="line"></span><br><span class="line">select id from t with(index(索引名)) where num=@num</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line"></span><br><span class="line">select id from t where num/2=100</span><br><span class="line"></span><br><span class="line">-- 应改为:</span><br><span class="line"></span><br><span class="line">select id from t where num=100<span class="emphasis">*2</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">123</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select id from t where substring(name,1,3)=’abc’</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">-- name以abc开头的id应改为:</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select id from t where name like ‘abc%’</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">123对于字段较多的表，如果有些字段的使⽤频率很低，可以将这些字段分离出来形成新表。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">因为当⼀个表的数据量很⼤时，会由于使⽤频率低的字段的存在⽽变慢。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"><span class="strong">**增加中间表**</span></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">对于需要经常联合查询的表，可以建⽴中间表以提⾼查询效率。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">通过建⽴中间表，将需要通过联合查询的数据插⼊到中间表中，然后将原来的联合查询改为对中间表的查询。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"><span class="strong">**增加冗余字段**</span></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">设计数据表时应尽量遵循范式理论的规约，尽可能的减少冗余字段，让数据库设计看起来精致、优雅。但是，合理</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">的加⼊冗余字段可以提⾼查询速度。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">表的规范化程度越⾼，表和表之间的关系越多，需要连接查询的情况也就越多，性能也就越差。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"><span class="strong">**注意：**</span></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"><span class="strong">**冗余字段的值在⼀个表中修改了，就要想办法在其他表中更新，否则就会导致数据不⼀致的问题。**</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="10-3-MySQL数据库cpu飙升到500-的话他怎么处理？"><a href="#10-3-MySQL数据库cpu飙升到500-的话他怎么处理？" class="headerlink" title="10.3 MySQL数据库cpu飙升到500%的话他怎么处理？"></a>10.3 MySQL数据库cpu飙升到500%的话他怎么处理？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">当 cpu 飙升到 500%时，先⽤操作系统命令 top 命令观察是不是 mysqld 占⽤导致的，如果不是，找出占⽤⾼的进</span><br><span class="line"></span><br><span class="line">程，并进⾏相关处理。</span><br><span class="line"></span><br><span class="line">如果是 mysqld 造成的， show processlist，看看⾥⾯跑的 session 情况，是不是有消耗资源的 sql 在运⾏。找出</span><br><span class="line"></span><br><span class="line">消耗⾼的 sql，看看执⾏计划是否准确， index 是否缺失，或者实在是数据量太⼤造成。</span><br><span class="line"></span><br><span class="line">⼀般来说，肯定要 kill 掉这些线程(同时观察 cpu 使⽤率是否下降)，等进⾏相应的调整(⽐如说加索引、改 sql、改内</span><br><span class="line"></span><br><span class="line">存参数)之后，再重新跑这些 SQL。</span><br><span class="line"></span><br><span class="line">也有可能是每个 sql 消耗资源并不多，但是突然之间，有⼤量的 session 连进来导致 cpu 飙升，这种情况就需要跟</span><br><span class="line"></span><br><span class="line">应⽤⼀起来分析为何连接数会激增，再做出相应的调整，⽐如说限制连接数等</span><br></pre></td></tr></tbody></table></figure><h3 id="10-4-⼤表怎么优化？"><a href="#10-4-⼤表怎么优化？" class="headerlink" title="10.4 ⼤表怎么优化？"></a><strong>10.4</strong> <strong>⼤表怎么优化？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">某个表有近千万数据，CRUD⽐较慢，如何优化？分库分表了是怎么做的？分表分库了有什么问题？有⽤到中间件么？他们的原理知道么？</span><br><span class="line"></span><br><span class="line">当MySQL单表记录数过⼤时，数据库的CRUD性能会明显下降，⼀些常⻅的优化措施如下：</span><br><span class="line"></span><br><span class="line">\1. <span class="strong">**限定数据的范围：**</span> 务必禁⽌不带任何限制数据范围条件的查询语句。⽐如：我们当⽤户在查询订单历史的时</span><br><span class="line"></span><br><span class="line">候，我们可以控制在⼀个⽉的范围内。；</span><br><span class="line"></span><br><span class="line">\2. <span class="strong">**读**</span><span class="strong">**/**</span><span class="strong">**写分离：**</span> 经典的数据库拆分⽅案，主库负责写，从库负责读；</span><br><span class="line"></span><br><span class="line">\3. <span class="strong">**缓存：**</span> 使⽤MySQL的缓存，另外对重量级、更新少的数据可以考虑使⽤应⽤级别的缓存；</span><br><span class="line"></span><br><span class="line">还有就是通过分库分表的⽅式进⾏优化，主要有垂直分表和⽔平分表1. <span class="strong">**垂直分区：**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**根据数据库⾥⾯数据表的相关性进⾏拆分。**</span> 例如，⽤户表中既有⽤户的登录信息⼜有⽤户的基本信息，可以将</span><br><span class="line"></span><br><span class="line">⽤户表拆分成两个单独的表，甚⾄放到单独的库做分库。</span><br><span class="line"></span><br><span class="line"><span class="strong">**简单来说垂直拆分是指数据表列的拆分，把⼀张列⽐较多的表拆分为多张表。**</span> 如下图所示，这样来说⼤家应该</span><br><span class="line"></span><br><span class="line">就更容易理解了。</span><br><span class="line"></span><br><span class="line"><span class="strong">**垂直拆分的优点：**</span> 可以使得⾏数据变⼩，在查询时减少读取的Block数，减少I/O次数。此外，垂直分区可以简</span><br><span class="line"></span><br><span class="line">化表的结构，易于维护。</span><br><span class="line"></span><br><span class="line"><span class="strong">**垂直拆分的缺点：**</span> 主键会出现冗余，需要管理冗余列，并会引起Join操作，可以通过在应⽤层进⾏Join来解</span><br><span class="line"></span><br><span class="line">决。此外，垂直分区会让事务变得更加复杂；</span><br><span class="line"></span><br><span class="line">垂直分表</span><br><span class="line"></span><br><span class="line">把主键和⼀些列放在⼀个表，然后把主键和另外的列放在另⼀个表中<span class="strong">**适⽤场景**</span></span><br><span class="line"></span><br><span class="line">1、如果⼀个表中某些列常⽤，另外⼀些列不常⽤</span><br><span class="line"></span><br><span class="line">2、可以使数据⾏变⼩，⼀个数据⻚能存储更多数据，查询时减少I/O次数</span><br><span class="line"></span><br><span class="line"><span class="strong">**缺点**</span></span><br><span class="line"></span><br><span class="line">有些分表的策略基于应⽤层的逻辑算法，⼀旦逻辑算法改变，整个分表逻辑都会改变，扩展性较差</span><br><span class="line"></span><br><span class="line">对于应⽤层来说，逻辑算法增加开发成本</span><br><span class="line"></span><br><span class="line">管理冗余列，查询所有数据需要join操作</span><br><span class="line"></span><br><span class="line">\2. <span class="strong">**⽔平分区：**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**保持数据表结构不变，通过某种策略存储数据分⽚。这样每⼀⽚数据分散到不同的表或者库中，达到了分布式**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**的⽬的。 ⽔平拆分可以⽀撑⾮常⼤的数据量。**</span></span><br><span class="line"></span><br><span class="line">⽔平拆分是指数据表⾏的拆分，表的⾏数超过200万⾏时，就会变慢，这时可以把⼀张的表的数据拆成多张表</span><br><span class="line"></span><br><span class="line">来存放。举个例⼦：我们可以将⽤户信息表拆分成多个⽤户信息表，这样就可以避免单⼀表数据量过⼤对性能</span><br><span class="line"></span><br><span class="line">造成影响。</span><br><span class="line"></span><br><span class="line">⽔品拆分可以⽀持⾮常⼤的数据量。需要注意的⼀点是:分表仅仅是解决了单⼀表数据过⼤的问题，但由于表的</span><br><span class="line"></span><br><span class="line">数据还是在同⼀台机器上，其实对于提升MySQL并发能⼒没有什么意义，所以 <span class="strong">**⽔平拆分最好分库**</span> 。</span><br><span class="line"></span><br><span class="line">⽔平拆分能够 <span class="strong">**⽀持⾮常⼤的数据量存储，应⽤端改造也少**</span>，但 <span class="strong">**分⽚事务难以解决**</span> ，跨界点Join性能较差，逻</span><br><span class="line"></span><br><span class="line">辑复杂。</span><br><span class="line"></span><br><span class="line">《Java⼯程师修炼之道》的作者推荐 <span class="strong">**尽量不要对数据进⾏分⽚，因为拆分会带来逻辑、部署、运维的各种复杂**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**度**</span> ，⼀般的数据表在优化得当的情况下⽀撑千万以下的数据量是没有太⼤问题的。如果实在要分⽚，尽量选择</span><br><span class="line"></span><br><span class="line">客户端分⽚架构，这样可以减少⼀次和中间件的⽹络I/O。</span><br><span class="line"></span><br><span class="line">⽔平分表：</span><br><span class="line"></span><br><span class="line">表很⼤，分割后可以降低在查询时需要读的数据和索引的⻚数，同时也降低了索引的层数，提⾼查询次数<span class="strong">**适⽤场景**</span></span><br><span class="line"></span><br><span class="line">1、表中的数据本身就有独⽴性，例如表中分表记录各个地区的数据或者不同时期的数据，特别是有些数据</span><br><span class="line"></span><br><span class="line">常⽤，有些不常⽤。</span><br><span class="line"></span><br><span class="line">2、需要把数据存放在多个介质上。</span><br><span class="line"></span><br><span class="line"><span class="strong">**⽔平切分的缺点**</span></span><br><span class="line"></span><br><span class="line">1、给应⽤增加复杂度，通常查询时需要多个表名，查询所有数据都需UNION操作</span><br><span class="line"></span><br><span class="line">2、在许多数据库应⽤中，这种复杂度会超过它带来的优点，查询时会增加读⼀个索引层的磁盘次数</span><br><span class="line"></span><br><span class="line"><span class="strong">**下⾯补充⼀下数据库分⽚的两种常⻅⽅案：**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**客户端代理： 分⽚逻辑在应⽤端，封装在**</span><span class="strong">**jar**</span><span class="strong">**包中，通过修改或者封装**</span><span class="strong">**JDBC**</span><span class="strong">**层来实现。**</span> 当当⽹的</span><br><span class="line"></span><br><span class="line"><span class="strong">**Sharding-JDBC**</span> 、阿⾥的TDDL是两种⽐较常⽤的实现。</span><br><span class="line"></span><br><span class="line"><span class="strong">**中间件代理： 在应⽤和数据中间加了⼀个代理层。分⽚逻辑统⼀维护在中间件服务中。**</span> 我们现在谈的</span><br><span class="line"></span><br><span class="line"><span class="strong">**Mycat**</span> 、360的Atlas、⽹易的DDB等等都是这种架构的实现。</span><br><span class="line"></span><br><span class="line"><span class="strong">**分库分表后⾯临的问题**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**事务⽀持**</span> 分库分表后，就成了分布式事务了。如果依赖数据库本身的分布式事务管理功能去执⾏事务，将付出</span><br><span class="line"></span><br><span class="line">⾼昂的性能代价； 如果由应⽤程序去协助控制，形成程序逻辑上的事务，⼜会造成编程⽅⾯的负担。</span><br><span class="line"></span><br><span class="line"><span class="strong">**跨库**</span><span class="strong">**join**</span></span><br><span class="line"></span><br><span class="line">只要是进⾏切分，跨节点Join的问题是不可避免的。但是良好的设计和切分却可以减少此类情况的发⽣。解决</span><br><span class="line"></span><br><span class="line">这⼀问题的普遍做法是分两次查询实现。在第⼀次查询的结果集中找出关联数据的id,根据这些id发起第⼆次请</span><br><span class="line"></span><br><span class="line">求得到关联数据。 分库分表⽅案产品</span><br><span class="line"></span><br><span class="line"><span class="strong">**跨节点的**</span><span class="strong">**count,order by,group by**</span><span class="strong">**以及聚合函数问题**</span> 这些是⼀类问题，因为它们都需要基于全部数据集合进</span><br><span class="line"></span><br><span class="line">⾏计算。多数的代理都不会⾃动处理合并⼯作。解决⽅案：与解决跨节点join问题的类似，分别在各个节点上</span><br><span class="line"></span><br><span class="line">得到结果后在应⽤程序端进⾏合并。和join不同的是每个结点的查询可以并⾏执⾏，因此很多时候它的速度要</span><br><span class="line"></span><br><span class="line">⽐单⼀⼤表快很多。但如果结果集很⼤，对应⽤程序内存的消耗是⼀个问题。<span class="strong">**数据迁移，容量规划，扩容等问题**</span> 来⾃淘宝综合业务平台团队，它利⽤对2的倍数取余具有向前兼容的特性</span><br><span class="line"></span><br><span class="line">（如对4取余得1的数对2取余也是1）来分配数据，避免了⾏级别的数据迁移，但是依然需要进⾏表级别的迁</span><br><span class="line"></span><br><span class="line">移，同时对扩容规模和分表数量都有限制。总得来说，这些⽅案都不是⼗分的理想，多多少少都存在⼀些缺</span><br><span class="line"></span><br><span class="line">点，这也从⼀个侧⾯反映出了Sharding扩容的难度。</span><br><span class="line"></span><br><span class="line"><span class="strong">**ID**</span><span class="strong">**问题**</span></span><br><span class="line"></span><br><span class="line">⼀旦数据库被切分到多个物理结点上，我们将不能再依赖数据库⾃身的主键⽣成机制。⼀⽅⾯，某个分区数据</span><br><span class="line"></span><br><span class="line">库⾃⽣成的ID⽆法保证在全局上是唯⼀的；另⼀⽅⾯，应⽤程序在插⼊数据之前需要先获得ID,以便进⾏SQL路 </span><br><span class="line"></span><br><span class="line">由. ⼀些常⻅的主键⽣成策略</span><br><span class="line"></span><br><span class="line"><span class="strong">**UUID**</span> 使⽤UUID作主键是最简单的⽅案，但是缺点也是⾮常明显的。由于UUID⾮常的⻓，除占⽤⼤量存储空间</span><br><span class="line"></span><br><span class="line">外，最主要的问题是在索引上，在建⽴索引和基于索引进⾏查询时都存在性能问题。 <span class="strong">**Twitter**</span><span class="strong">**的分布式⾃增**</span><span class="strong">**ID**</span><span class="strong">**算法**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**Snowflake**</span> 在分布式系统中，需要⽣成全局UID的场合还是⽐较多的，twitter的snowflake解决了这种需求，实现也</span><br><span class="line"></span><br><span class="line">还是很简单的，除去配置信息，核⼼代码就是毫秒级时间41位 机器ID 10位 毫秒内序列12位。</span><br><span class="line"></span><br><span class="line">跨分⽚的排序分⻚</span><br><span class="line"></span><br><span class="line">般来讲，分⻚时需要按照指定字段进⾏排序。当排序字段就是分⽚字段的时候，我们通过分⽚规则可以⽐较容</span><br><span class="line"></span><br><span class="line">易定位到指定的分⽚，⽽当排序字段⾮分⽚字段的时候，情况就会变得⽐较复杂了。为了最终结果的准确性，</span><br><span class="line"></span><br><span class="line">我们需要在不同的分⽚节点中将数据进⾏排序并返回，并将不同分⽚返回的结果集进⾏汇总和再次排序</span><br></pre></td></tr></tbody></table></figure><h3 id="10-5-MySQL的复制原理以及流程"><a href="#10-5-MySQL的复制原理以及流程" class="headerlink" title="10.5 MySQL的复制原理以及流程"></a>10.5 MySQL的复制原理以及流程</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">主从复制：将主数据库中的DDL和DML操作通过⼆进制⽇志（BINLOG）传输到从数据库上，然后将这些⽇志重新</span><br><span class="line"></span><br><span class="line">执⾏（重做）；从⽽使得从数据库的数据与主数据库保持⼀致。</span><br><span class="line"></span><br><span class="line"><span class="strong">**主从复制的作⽤**</span></span><br><span class="line"></span><br><span class="line">\1. 主数据库出现问题，可以切换到从数据库。</span><br><span class="line"></span><br><span class="line">\2. 可以进⾏数据库层⾯的读写分离。</span><br><span class="line"></span><br><span class="line">\3. 可以在从数据库上进⾏⽇常备份。</span><br><span class="line"></span><br><span class="line"><span class="strong">**MySQL**</span><span class="strong">**主从复制解决的问题**</span></span><br><span class="line"></span><br><span class="line">数据分布：随意开始或停⽌复制，并在不同地理位置分布数据备份</span><br><span class="line"></span><br><span class="line">负载均衡：降低单个服务器的压⼒</span><br><span class="line"></span><br><span class="line">⾼可⽤和故障切换：帮助应⽤程序避免单点失败</span><br><span class="line"></span><br><span class="line">升级测试：可以⽤更⾼版本的MySQL作为从库</span><br><span class="line"></span><br><span class="line"><span class="strong">**MySQL**</span><span class="strong">**主从复制⼯作原理**</span></span><br><span class="line"></span><br><span class="line">在主库上把数据更⾼记录到⼆进制⽇志</span><br><span class="line"></span><br><span class="line">从库将主库的⽇志复制到⾃⼰的中继⽇志</span><br><span class="line"></span><br><span class="line">从库读取中继⽇志的事件，将其重放到从库数据中</span><br><span class="line"></span><br><span class="line"><span class="strong">**基本原理流程，**</span><span class="strong">**3**</span><span class="strong">**个线程以及之间的关联**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**主**</span>：binlog线程——记录下所有改变了数据库数据的语句，放进master上的binlog中；</span><br><span class="line"></span><br><span class="line"><span class="strong">**从**</span>：io线程——在使⽤start slave 之后，负责从master上拉取 binlog 内容，放进⾃⼰的relay log中；</span><br><span class="line"></span><br><span class="line"><span class="strong">**从**</span>：sql执⾏线程——执⾏relay log中的语句；</span><br><span class="line"></span><br><span class="line"><span class="strong">**复制过程**</span>Binary log：主数据库的⼆进制⽇志</span><br><span class="line"></span><br><span class="line">Relay log：从服务器的中继⽇志</span><br><span class="line"></span><br><span class="line">第⼀步：master在每个事务更新数据完成之前，将该操作记录串⾏地写⼊到binlog⽂件中。</span><br><span class="line"></span><br><span class="line">第⼆步：salve开启⼀个I/O Thread，该线程在master打开⼀个普通连接，主要⼯作是binlog dump process。如果</span><br><span class="line"></span><br><span class="line">读取的进度已经跟上了master，就进⼊睡眠状态并等待master产⽣新的事件。I/O线程最终的⽬的是将这些事件写</span><br><span class="line"></span><br><span class="line">⼊到中继⽇志中。</span><br><span class="line"></span><br><span class="line">第三步：SQL Thread会读取中继⽇志，并顺序执⾏该⽇志中的SQL事件，从⽽与主数据库中的数据保持⼀致。</span><br></pre></td></tr></tbody></table></figure><h3 id="10-6-读写分离有哪些解决⽅案？"><a href="#10-6-读写分离有哪些解决⽅案？" class="headerlink" title="10.6 读写分离有哪些解决⽅案？"></a><strong>10.6</strong> <strong>读写分离有哪些解决⽅案？</strong></h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">读写分离是依赖于主从复制，⽽主从复制⼜是为读写分离服务的。因为主从复制要求 slave 不能写只能读（如果</span><br><span class="line"></span><br><span class="line">对 slave 执⾏写操作，那么 show slave status 将会呈现 Slave<span class="emphasis">_SQL_</span>Running=NO ，此时你需要按照前⾯提到的</span><br><span class="line"></span><br><span class="line">⼿动同步⼀下 slave ）。</span><br><span class="line"></span><br><span class="line"><span class="strong">**⽅案⼀**</span></span><br><span class="line"></span><br><span class="line">使⽤mysql-proxy代理优点：直接实现读写分离和负载均衡，不⽤修改代码，master和slave⽤⼀样的帐号，mysql官⽅不建议实际⽣产中</span><br><span class="line"></span><br><span class="line">使⽤</span><br><span class="line"></span><br><span class="line">缺点：降低性能， 不⽀持事务</span><br><span class="line"></span><br><span class="line"><span class="strong">**⽅案⼆**</span></span><br><span class="line"></span><br><span class="line">使⽤AbstractRoutingDataSource+aop+annotation在dao层决定数据源。</span><br><span class="line"></span><br><span class="line">如果采⽤了mybatis， 可以将读写分离放在ORM层，⽐如mybatis可以通过mybatis plugin拦截sql语句，所有的</span><br><span class="line"></span><br><span class="line">insert/update/delete都访问master库，所有的select 都访问salve库，这样对于dao层都是透明。 plugin实现时可以</span><br><span class="line"></span><br><span class="line">通过注解或者分析语句是读写⽅法来选定主从库。不过这样依然有⼀个问题， 也就是不⽀持事务， 所以我们还需</span><br><span class="line"></span><br><span class="line">要重写⼀下DataSourceTransactionManager， 将read-only的事务扔进读库， 其余的有读有写的扔进写库。</span><br><span class="line"></span><br><span class="line"><span class="strong">**⽅案三**</span></span><br><span class="line"></span><br><span class="line">使⽤AbstractRoutingDataSource+aop+annotation在service层决定数据源，可以⽀持事务.</span><br><span class="line"></span><br><span class="line">缺点：类内部⽅法通过this.xx()⽅式相互调⽤时，aop不会进⾏拦截，需进⾏特殊处理。</span><br></pre></td></tr></tbody></table></figure><h3 id="10-7-备份计划mysqldump以及xtranbackup的实现原理"><a href="#10-7-备份计划mysqldump以及xtranbackup的实现原理" class="headerlink" title="10.7 备份计划mysqldump以及xtranbackup的实现原理"></a>10.7 备份计划mysqldump以及xtranbackup的实现原理</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="strong">**(1)**</span><span class="strong">**备份计划**</span></span><br><span class="line"></span><br><span class="line">视库的⼤⼩来定，⼀般来说 100G 内的库，可以考虑使⽤ mysqldump 来做，因为 mysqldump更加轻巧灵活，备份</span><br><span class="line"></span><br><span class="line">时间选在业务低峰期，可以每天进⾏都进⾏全量备份(mysqldump 备份出来的⽂件⽐较⼩，压缩之后更⼩)。</span><br><span class="line"></span><br><span class="line">100G 以上的库，可以考虑⽤ xtranbackup 来做，备份速度明显要⽐ mysqldump 要快。⼀般是选择⼀周⼀个全</span><br><span class="line"></span><br><span class="line">备，其余每天进⾏增量备份，备份时间为业务低峰期。</span><br><span class="line"></span><br><span class="line"><span class="strong">**(2)**</span><span class="strong">**备份恢复时间**</span></span><br><span class="line"></span><br><span class="line">物理备份恢复快，逻辑备份恢复慢</span><br><span class="line"></span><br><span class="line">这⾥跟机器，尤其是硬盘的速率有关系，以下列举⼏个仅供参考</span><br><span class="line"></span><br><span class="line">20G的2分钟（mysqldump）</span><br><span class="line"></span><br><span class="line">80G的30分钟(mysqldump)</span><br><span class="line"></span><br><span class="line">111G的30分钟（mysqldump)</span><br><span class="line"></span><br><span class="line">288G的3⼩时（xtra)</span><br><span class="line"></span><br><span class="line">3T的4⼩时（xtra)</span><br><span class="line"></span><br><span class="line">逻辑导⼊时间⼀般是备份时间的5倍以上<span class="strong">**(3)**</span><span class="strong">**备份恢复失败如何处理**</span></span><br><span class="line"></span><br><span class="line">⾸先在恢复之前就应该做⾜准备⼯作，避免恢复的时候出错。⽐如说备份之后的有效性检查、权限检查、空间检查</span><br><span class="line"></span><br><span class="line">等。如果万⼀报错，再根据报错的提示来进⾏相应的调整。</span><br><span class="line"></span><br><span class="line"><span class="strong">**(4)mysqldump**</span><span class="strong">**和**</span><span class="strong">**xtrabackup**</span><span class="strong">**实现原理**</span></span><br><span class="line"></span><br><span class="line">mysqldump</span><br><span class="line"></span><br><span class="line">mysqldump 属于逻辑备份。加⼊–single-transaction 选项可以进⾏⼀致性备份。后台进程会先设置 session 的事务</span><br><span class="line"></span><br><span class="line">隔离级别为 RR(SET SESSION TRANSACTION ISOLATION LEVELREPEATABLE READ)，之后显式开启⼀个事务</span><br><span class="line"></span><br><span class="line">(START TRANSACTION /<span class="emphasis">*!40100 WITH CONSISTENTSNAPSHOT *</span>/)，这样就保证了该事务⾥读到的数据都是事</span><br><span class="line"></span><br><span class="line">务事务时候的快照。之后再把表的数据读取出来。如果加上–master-data=1 的话，在刚开始的时候还会加⼀个数据</span><br><span class="line"></span><br><span class="line">库的读锁(FLUSH TABLES WITH READ LOCK),等开启事务后，再记录下数据库此时 binlog 的位置(showmaster</span><br><span class="line"></span><br><span class="line">status)，⻢上解锁，再读取表的数据。等所有的数据都已经导完，就可以结束事务</span><br><span class="line"></span><br><span class="line">Xtrabackup:</span><br><span class="line"></span><br><span class="line">xtrabackup 属于物理备份，直接拷⻉表空间⽂件，同时不断扫描产⽣的 redo ⽇志并保存下来。最后完成 innodb</span><br><span class="line"></span><br><span class="line">的备份后，会做⼀个 flush engine logs 的操作(⽼版本在有 bug，在5.6 上不做此操作会丢数据)，确保所有的 redo</span><br><span class="line"></span><br><span class="line">log 都已经落盘(涉及到事务的两阶段提交</span><br><span class="line"></span><br><span class="line">概念，因为 xtrabackup 并不拷⻉ binlog，所以必须保证所有的 redo log 都落盘，否则可能会丢最后⼀组提交事务</span><br><span class="line"></span><br><span class="line">的数据)。这个时间点就是 innodb 完成备份的时间点，数据⽂件虽然不是⼀致性的，但是有这段时间的 redo 就可</span><br><span class="line"></span><br><span class="line">以让数据⽂件达到⼀致性(恢复的时候做的事</span><br><span class="line"></span><br><span class="line">情)。然后还需要 flush tables with read lock，把 myisam 等其他引擎的表给备份出来，备份完后解锁。这样就做到</span><br><span class="line"></span><br><span class="line">了完美的热备。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="10-8-数据表损坏的修复⽅式有哪些？"><a href="#10-8-数据表损坏的修复⽅式有哪些？" class="headerlink" title="10.8  数据表损坏的修复⽅式有哪些？"></a>10.8  数据表损坏的修复⽅式有哪些？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">使⽤ myisamchk 来修复，具体步骤：</span><br><span class="line"></span><br><span class="line">1）修复前将mysql服务停⽌。</span><br><span class="line"></span><br><span class="line">2）打开命令⾏⽅式，然后进⼊到mysql的/bin⽬录。</span><br><span class="line"></span><br><span class="line">3）执⾏myisamchk –recover 数据库所在路径/<span class="emphasis">*.MYI</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">使⽤repair table 或者 OPTIMIZE table命令来修复，REPAIR TABLE table_name 修复表 OPTIMIZE TABLE</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">table_name 优化表 REPAIR TABLE ⽤于修复被破坏的表。 OPTIMIZE TABLE ⽤于回收闲置的数据库空间，当表上</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">的数据⾏被删除时，所占据的磁盘空间并没有⽴即被回收，使⽤了OPTIMIZE TABLE命令后这些空间将被回收，并</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">且对磁盘上的数据⾏进⾏重排（注意：是磁盘上，⽽⾮数据库）</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL面试重点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文搞懂各种锁</title>
      <link href="/2022/06/16/%E9%94%81/"/>
      <url>/2022/06/16/%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h2 id="一-为什么会有锁机制"><a href="#一-为什么会有锁机制" class="headerlink" title="一 为什么会有锁机制"></a>一 为什么会有锁机制</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  在多线程情况下共享操作同一个变量时，会导致数据不一致，出现并发安全问题，所以通过锁机制来保证数据的准确和唯一</span><br><span class="line"><span class="number">2</span>  通过锁将可能出现问题的代码用锁对象锁起来,被锁起来的代码就叫同步代码块,同一时间只能有一个线程来访问这个同步代码块</span><br></pre></td></tr></tbody></table></figure><h2 id="二-什么是临界区"><a href="#二-什么是临界区" class="headerlink" title="二 什么是临界区"></a>二 什么是临界区</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 每个进程中访问临界资源的那段代码称为临界区（criticalsection）</span><br><span class="line"><span class="number">2</span> 通过锁机制，保证每次只允许一个进程进入临界区，进入后，不允许其他进程进入</span><br></pre></td></tr></tbody></table></figure><h2 id="三-操作系统的各种锁"><a href="#三-操作系统的各种锁" class="headerlink" title="三 操作系统的各种锁"></a>三 操作系统的各种锁</h2><h3 id="3-1-互斥锁"><a href="#3-1-互斥锁" class="headerlink" title="3.1 互斥锁"></a>3.1 互斥锁</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 互斥锁</span></span><br><span class="line">互斥锁是一种简单的加锁的方法来控制对共享资源的访问，互斥锁只有两种状态,即上锁( lock )和解锁(unlock)，如果互斥量已经上锁，调用线程会阻塞，直到互斥量被解锁。在完成了对共享资源的访问后，要对互斥量进行解锁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 互斥锁特点</span></span><br><span class="line"><span class="number">1.</span> 原子性：把一个互斥量锁定为一个原子操作，操作系统保证了如果一个线程锁定了一个互斥量，没有其他线程在同一时间可以成功锁定这个互斥量；</span><br><span class="line"><span class="number">2.</span> 唯一性：如果一个线程锁定了一个互斥量，在它解除锁定之前，没有其他线程可以锁定这个互斥量；</span><br><span class="line"><span class="number">3.</span> 非繁忙等待：如果一个线程已经锁定了一个互斥量，第二个线程又试图去锁定这个互斥量，则第二个线程将被挂起（不占用任何cpu资源），直到第一个线程解除对这个互斥量的锁定为止，第二个线程则被唤醒并继续执行，同时锁定这个互斥量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">Python,Go,Java都支持互斥锁</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-自旋锁"><a href="#3-2-自旋锁" class="headerlink" title="3.2 自旋锁"></a>3.2 自旋锁</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自旋锁</span></span><br><span class="line">自旋锁与互斥量功能一样，唯一一点不同的就是互斥量阻塞后休眠让出cpu，而自旋锁阻塞后不会让出cpu，会一直忙等待，直到得到锁，原地打转</span><br><span class="line">自旋锁在用户态使用的比较少，在内核使用的比较多！自旋锁的使用场景：锁的持有时间比较短，或者说小于<span class="number">2</span>次上下文切换的时间。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自旋锁特点</span></span><br><span class="line"><span class="number">1</span> 某个协程持有锁时间长，等待的协程一直在循环等待，消耗CPU资源。</span><br><span class="line"><span class="number">2</span> 不公平，有可能存在有的协程等待时间过程，出现线程饥饿（这里就是协程饥饿）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">Python,Go不支持自旋锁</span><br><span class="line">Java支持自旋锁</span><br></pre></td></tr></tbody></table></figure><p><strong>Go实现自旋锁</strong></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 锁也是1个变量，初值设为0；</span></span><br><span class="line"><span class="comment">2 1个协程将锁原子性的置为1；</span></span><br><span class="line"><span class="comment">3 操作变量n；</span></span><br><span class="line"><span class="comment">4 操作完成后，将锁原子性的置为0，释放锁。</span></span><br><span class="line"><span class="comment">在1个协程获取锁时，另一个协程一直尝试，直到能够获取锁（不断循环），这就是自旋锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"sync/atomic"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// Spin是一个锁变量，实现了Lock和Unlock方法</span></span><br><span class="line"><span class="keyword">type</span> Spin <span class="type">int32</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Spin)</span></span> Lock() {</span><br><span class="line">    <span class="comment">// 原子交换，0换成1</span></span><br><span class="line">    <span class="keyword">for</span> !atomic.CompareAndSwapInt32((*<span class="type">int32</span>)(l), <span class="number">0</span>, <span class="number">1</span>) {}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Spin)</span></span> Unlock() {</span><br><span class="line">    <span class="comment">// 原子置零</span></span><br><span class="line">    atomic.StoreInt32((*<span class="type">int32</span>)(l), <span class="number">0</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">type</span> Locker <span class="keyword">interface</span> {</span><br><span class="line">    Lock()</span><br><span class="line">    Unlock()</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> l Locker</span><br><span class="line">    l = <span class="built_in">new</span>(Spin)</span><br><span class="line">    <span class="keyword">var</span> n <span class="type">int</span></span><br><span class="line">    <span class="comment">// 两个协程</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ {</span><br><span class="line">        <span class="keyword">go</span> routine(i, &amp;n, l, <span class="number">200</span>*time.Millisecond)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">select</span> {}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">routine</span><span class="params">(i <span class="type">int</span>, v *<span class="type">int</span>, l Locker, d time.Duration)</span></span> {</span><br><span class="line">    <span class="comment">// 实现自旋加锁</span></span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">            l.Lock()</span><br><span class="line">            <span class="keyword">defer</span> l.Unlock()</span><br><span class="line">            *v++</span><br><span class="line">            <span class="built_in">println</span>(*v, i)</span><br><span class="line">            time.Sleep(d)</span><br><span class="line">        }()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-可重入锁-递归锁"><a href="#3-3-可重入锁-递归锁" class="headerlink" title="3.3 可重入锁(递归锁)"></a>3.3 可重入锁(递归锁)</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可重入锁</span></span><br><span class="line">为了解决互斥锁导致的死锁问题(哲学家吃面问题)，引入可重入锁又叫递归锁</span><br><span class="line">可重入内部维护着一个锁和一个计数器，计数器记录了获取锁的次数，从而使得资源可以被同一个线程多次获取，直到一个线程所有的获取都被释放，其他的线程才能获得资源</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">Go不支持可重入锁 <span class="comment">//https://blog.csdn.net/qq_39397165/article/details/117433641</span></span><br><span class="line">Python,Java支持可重入锁</span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-读写锁"><a href="#3-4-读写锁" class="headerlink" title="3.4 读写锁"></a>3.4 读写锁</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读写锁</span></span><br><span class="line">读写锁允许更改的并行性，写的串行性，也叫共享互斥锁。</span><br><span class="line">互斥量要么是锁住状态，要么就是不加锁状态，而且一次只有一个线程可以对其加锁。</span><br><span class="line">读写锁可以有<span class="number">3</span>种状态：读模式下加锁状态、写模式加锁状态、不加锁状态。</span><br><span class="line">一次只有一个线程可以占有写模式的读写锁，但是多个线程可以同时占有读模式的读写锁（允许多个线程读但只允许一个线程写）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读写锁特点</span></span><br><span class="line"><span class="number">1</span> 如果有其它线程读数据，则允许其它线程执行读操作，但不允许写操作；</span><br><span class="line"><span class="number">2</span> 如果有其它线程写数据，则其它线程都不允许读、写操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">Python不支持读写，自行实现：https:<span class="comment">//www.cnblogs.com/LuoboLiam/p/15338632.html</span></span><br><span class="line">Java,Go支持读写锁</span><br></pre></td></tr></tbody></table></figure><h3 id="3-5-信号量-Semaphore"><a href="#3-5-信号量-Semaphore" class="headerlink" title="3.5 信号量(Semaphore)"></a>3.5 信号量(Semaphore)</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 信号量</span></span><br><span class="line">信号量可以理解为多把锁，同时允许多个线程来更改数据</span><br><span class="line">信号量是一个计数器，可以用来控制多个进程对共享资源的访问</span><br><span class="line">信号量广泛用于进程或线程间的同步和互斥，信号量本质上是一个非负的整数计数器，它被用来控制对公共资源的访问</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">Go不支持信号量，可以自行实现：https:<span class="comment">//studygolang.com/articles/25382?fr=sidebar</span></span><br><span class="line">Python,Java支持信号量</span><br></pre></td></tr></tbody></table></figure><h3 id="3-6-条件变量-Condition"><a href="#3-6-条件变量-Condition" class="headerlink" title="3.6 条件变量(Condition)"></a>3.6 条件变量(Condition)</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件变量</span></span><br><span class="line">线程等待，只有满足某条件时，n个线程才执行</span><br><span class="line">条件变量用来自动阻塞线程，直到某特殊情况发生为止。</span><br><span class="line">条件变量使我们可以睡眠等待某种条件出现。条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：</span><br><span class="line">一个线程等待<span class="string">"条件变量的条件成立"</span>而挂起；</span><br><span class="line">另一个线程使 “条件成立”（给出条件成立信号）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">Go,Python,Java都支持条件变量</span><br></pre></td></tr></tbody></table></figure><h3 id="3-7-其他"><a href="#3-7-其他" class="headerlink" title="3.7 其他"></a>3.7 其他</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 公平锁 / 非公平锁</span></span><br><span class="line"><span class="number">1</span> 公平锁：是指多个线程按照申请锁的顺序来获取锁。</span><br><span class="line"><span class="number">2</span> 非公平锁:是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁。有可能，会造成优先级反转或者饥饿现象</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可重入锁 / 不可重入锁</span></span><br><span class="line"><span class="number">1</span> 可重入锁：指的是可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生死锁，这样的锁就叫做可重入锁</span><br><span class="line"><span class="number">2</span> 不可重入锁：与可重入锁相反，不可递归调用，递归调用就发生死锁。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独享锁 / 共享锁</span></span><br><span class="line"><span class="number">1</span> 独享锁：该锁每一次只能被一个线程所持有。</span><br><span class="line"><span class="number">2</span> 共享锁：该锁可被多个线程共有</span><br><span class="line"></span><br><span class="line"><span class="comment">// 互斥锁 / 读写锁</span></span><br><span class="line"><span class="number">1</span> 互斥锁:在访问共享资源之前对进行加锁操作，在访问完成之后进行解锁操作。 加锁后，任何其他试图再次加锁的线程会被阻塞，直到当前进程解锁</span><br><span class="line"><span class="number">2</span> 读写锁：既是互斥锁，又是共享锁，read模式是共享，write是互斥(排它锁)的</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分段锁</span></span><br><span class="line">分段锁: 其实是一种锁的设计，并不是具体的一种锁</span><br><span class="line">容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争</span><br><span class="line"></span><br><span class="line"><span class="comment">// 偏向锁 / 轻量级锁 / 重量级锁</span></span><br><span class="line"><span class="number">1</span> 偏向锁:是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。</span><br><span class="line">轻量级</span><br><span class="line"><span class="number">2</span> 轻量级锁:是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。</span><br><span class="line">重量级锁</span><br><span class="line"><span class="number">3</span> 重量级锁: 是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低</span><br></pre></td></tr></tbody></table></figure><h2 id="四-乐观锁-x2F-悲观锁"><a href="#四-乐观锁-x2F-悲观锁" class="headerlink" title="四 乐观锁/悲观锁"></a>四 乐观锁/悲观锁</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 悲观锁</span></span><br><span class="line"></span><br><span class="line">总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁</span><br><span class="line"></span><br><span class="line"><span class="comment">//乐观锁</span></span><br><span class="line">总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁</span><br></pre></td></tr></tbody></table></figure><h2 id="五-分布式锁"><a href="#五-分布式锁" class="headerlink" title="五 分布式锁"></a>五 分布式锁</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在分布式系统中访问共享资源就需要一种互斥机制，来防止彼此之间的互相干扰，以保证一致性，在这种情况下，就需要用到分布式锁</span><br><span class="line"></span><br><span class="line">为了保证一个方法或属性在高并发情况下的同一时间只能被同一个线程执行，在传统单体应用单机部署的情况下，可以使用并发处理相关的功能进行互斥控制。但是，随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的应用并不能提供分布式锁的能力。为了解决这个问题就需要一种跨机器的互斥机制来控制共享资源的访问，这就是分布式锁</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分布式锁的多种实现方式</span></span><br><span class="line">https:<span class="comment">//www.cnblogs.com/liuqingzheng/p/11080501.html</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf面试题</title>
      <link href="/2021/09/23/drf%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2021/09/23/drf%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="什么是restful规范"><a href="#什么是restful规范" class="headerlink" title="什么是restful规范"></a>什么是restful规范</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RESTful是一种定义Web API接口的设计风格，尤其适用于前后端分离的应用模式中。 </span><br><span class="line">数据的安全保障：url链接一般都采用https协议进行传输(数据交互中安全性) 接口特性表现：一看就知道是个api接口，用api关键字标识接口url：https://api.baidu.com </span><br><span class="line">多数据版本共存：在url链接中标识数据版本https://api.baidu.com/v1 </span><br><span class="line">数据即是资源，均使用名词（可复数），尽量不要出现动词 资源操作由请求方式决定（method）：提供请求方式来标识增删改查动作 过滤，通过在url上传参的形式传递搜索条件:例如url后面?=搜索，分页，游标</span><br></pre></td></tr></tbody></table></figure><h3 id="查找模板的顺序"><a href="#查找模板的顺序" class="headerlink" title="查找模板的顺序"></a>查找模板的顺序</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优先查找根目录下：template</span><br><span class="line">根据app的注册顺序去每个app的template目录中查找</span><br></pre></td></tr></tbody></table></figure><h3 id="drf组件提供的功能"><a href="#drf组件提供的功能" class="headerlink" title="drf组件提供的功能"></a>drf组件提供的功能</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、免除csrf认证</span><br><span class="line">2、视图（1.APIView、2.ListAPIview、3.ListModelMixin）</span><br><span class="line">3、权限</span><br><span class="line">4、认证</span><br><span class="line">5、解析器</span><br><span class="line">6、筛选器</span><br><span class="line">7、分页</span><br><span class="line">8、序列化和数据校验：</span><br><span class="line"><span class="code">    可以对queryset进行序列化，也可以对用户提交的数据进行校验</span></span><br><span class="line"><span class="code">    source：无需加括号，在源码内部会去判断是否可以执行，可执行自动加括号</span></span><br><span class="line"><span class="code">    SerializerMethodField定义钩子方法</span></span><br><span class="line"><span class="code">9、渲染器：把json数据渲染到drf自己的页面上</span></span><br></pre></td></tr></tbody></table></figure><h3 id="drf继承过哪些视图类，之间的区别"><a href="#drf继承过哪些视图类，之间的区别" class="headerlink" title="drf继承过哪些视图类，之间的区别"></a>drf继承过哪些视图类，之间的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、APIview</span><br><span class="line"><span class="code">    遵循了CBV模式，功能多但是需要自己写的代码也多</span></span><br><span class="line"><span class="code">    提供了免除csrf认证，版本处理、认证、权限、节流、解析器、筛选器、分页、序列化、渲染器</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">2、ListAPIView,RetrieveAPIView,CreateAPIView,UpdateAPIView,DestroyAPIView</span><br><span class="line"><span class="code">    第二种则在第一种的基础上，封装了许多我们需要自己的写的代码，许多功能的实现只需要给专属的变量名赋值就可以实现该功能</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">3、GenericViewSet、ListModelMixin,RetrieveModelMixin,CreateModelMixin,UpdateModelMixin,DestroyModelMixin</span></span><br><span class="line"><span class="code">    第三种则重构了APIView中的as_view()方法，结合请求方法和不同Mixin类的方法名从而进行执行不同的功能。与前面两种最主要的区别是url路由中as_view()方法中需要传值。</span></span><br><span class="line"><span class="code">     目前使用的主要目的是把第二种的bug(查询全部数据的功能和查询单个数据的功能无法在一个类中实现)实现在一个类中</span></span><br></pre></td></tr></tbody></table></figure><h3 id="GenericAPIView视图类的作用"><a href="#GenericAPIView视图类的作用" class="headerlink" title="GenericAPIView视图类的作用"></a>GenericAPIView视图类的作用</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作用：GenericAPIView主要为drf内部帮助我们提供增删查改的类，提供了执行流程和功能，我们在使用drf内置类做增删查改时，就可以通过自定义静态字段（类变量）或重写方法（get<span class="emphasis">_queryset、get_</span>serializer<span class="emphasis">_class）来做一些更高级的定制</span></span><br></pre></td></tr></tbody></table></figure><h3 id="drf版本的实现过程"><a href="#drf版本的实现过程" class="headerlink" title="drf版本的实现过程"></a>drf版本的实现过程</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">drf自带的版本类"DEFAULT<span class="emphasis">_VERSIONING_</span>CLASS": "rest<span class="emphasis">_framework.versioning.URLPathVersioning",</span></span><br><span class="line"><span class="emphasis">允许出现的版本"ALLOWED_</span>VERSIONS": ['v1', 'v2'],</span><br><span class="line">如果没有传版本，可以使用默认版本</span><br><span class="line"><span class="code">     default_version = api_settings.DEFAULT_VERSION</span></span><br><span class="line"><span class="code">设置url中获取版本的变量，默认是version</span></span><br><span class="line"><span class="code">     version_param = api_settings.VERSION_PARAM</span></span><br><span class="line"><span class="code">     </span></span><br><span class="line"><span class="code">过程：</span></span><br><span class="line"><span class="code">    当前端传来请求，执行了as_view()方法，如果设置了全局版本或者进入了设置了版本的功能函数，则会先执行APIview类中dispatch方法，之后再执行initial方法，然后进入self.determine_version方法，里面会先判断是否有versioning_class，如果没有就返回(None,None)，代表没有版本，有则执行versioning_class(URLPathVersioning)类中的determine_version方法，他会返回版本，里面会判断，如果获取到version为空则返回默认版本，并且还要判断是否存在允许出现的版本列表中，返回版本后再把版本号和版本分类分别赋值给request.version和request.versioning_scheme</span></span><br></pre></td></tr></tbody></table></figure><h3 id="drf组件认证的实现过程"><a href="#drf组件认证的实现过程" class="headerlink" title="drf组件认证的实现过程"></a>drf组件认证的实现过程</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当用户进行登录的时候，运行了登录类的as<span class="emphasis">_view()方法，</span></span><br><span class="line"><span class="emphasis"> 1、进入了APIView类的dispatch方法</span></span><br><span class="line"><span class="emphasis"> 2、执行了self.initialize_</span>request这个方法，是重定义request，并且得到了自己定义的认证类对象</span><br><span class="line"> 3、执行self.initial方法中的self.perform<span class="emphasis">_authentication，里面运行了user方法</span></span><br><span class="line"><span class="emphasis"> 4、再执行了user方法里面的self._</span>authenticate()方法</span><br><span class="line"> 5、然后执行了自己定义的类中的authenticate方法，自己定义的类继承了BaseAuthentication类，里面有  authenticate方法，如果自己定义的类中没有authenticate方法会报错。</span><br><span class="line"> 6、把从authenticate方法得到的user和auth赋值给user和auth方法</span><br><span class="line"> 7、这两个方法把user和auth的值赋值给了request.user：是登录用户的对象,request.auth：是认证的信息字典</span><br></pre></td></tr></tbody></table></figure><h3 id="drf组件权限的实现过程？"><a href="#drf组件权限的实现过程？" class="headerlink" title="drf组件权限的实现过程？"></a>drf组件权限的实现过程？</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当用户执行一个业务的时候，运行了as<span class="emphasis">_view方法</span></span><br><span class="line"><span class="emphasis">1、进入了APIView类的dispatch方法</span></span><br><span class="line"><span class="emphasis">2、进入self.initial方法中的self.check_</span>permissions(request)方法</span><br><span class="line">3、里面执行了for循环，把每个权限类实例化对象，</span><br><span class="line">4、执行自己定义的权限类里面的has<span class="emphasis">_permission方法，里面会判断request.user是否存在</span></span><br><span class="line"><span class="emphasis">5、不存在就返回False，存在就返回True</span></span><br><span class="line"><span class="emphasis">6、之后执行self.permission_</span>denied报错方法，返回的是False就报错，可以自定义报错信息，在has<span class="emphasis">_permission方法中写message = {"status": False, "error": "登录成功之后才能评论"}，就实现了自定义报错</span></span><br><span class="line"><span class="emphasis">7、如果返回的是True就让他进入功能</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django-drf面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask面试题</title>
      <link href="/2020/11/24/flask%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/11/24/flask%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="如何改变Flask的默认地址和端口"><a href="#如何改变Flask的默认地址和端口" class="headerlink" title="如何改变Flask的默认地址和端口"></a>如何改变Flask的默认地址和端口</h3><p>在应用程序上调用run方法时，可以通过将修改的值传递给主机和端口参数来更改Flask的默认主机和端口。</p><h3 id="使用Flask框架有什么好处"><a href="#使用Flask框架有什么好处" class="headerlink" title="使用Flask框架有什么好处"></a>使用Flask框架有什么好处</h3><p>1、 它具有内置的开发服务器。<br>2、 它具有大量的第三方扩展。<br>3、 它具有一个很小的API，并且可以由Web开发人员快速学习。<br>4、 它符合WSGI。<br>5、 它支持Unicode。</p><h3 id="SQLite数据库是否内置Flask"><a href="#SQLite数据库是否内置Flask" class="headerlink" title="SQLite数据库是否内置Flask"></a>SQLite数据库是否内置Flask</h3><p>1、SQLite是Python内置的。<br>2、要在Flask中使用数据库，我们不需要安装任何其他的Flask-Extension。<br>3、在视图内部，我们可以导入SQLite并编写SQL查询以与数据库进行交互。<br>4、Flask开发人员通常使用Flask-SQLAlchemy，它消除了编写复杂SQL查询的需要，并且支持与SQLite数据库进行交互的ORM。</p><h3 id="Flask框架中的模板引擎是什么意思"><a href="#Flask框架中的模板引擎是什么意思" class="headerlink" title="Flask框架中的模板引擎是什么意思"></a>Flask框架中的模板引擎是什么意思</h3><p>1、模板是一个包含两种类型的数据的文件，即静态和动态，在运行期间填充模板中的动态数据。<br>2、Flask利用Jinja2模板引擎，使开发人员可以使用带有占位符的HTML模板来创建动态数据。<br>3、通过使用Flask的render_template方法以及所需的参数和值，可以在运行时填充这些占位符。</p><h3 id="Django和Flask有什么区别？为什么要选择Flask"><a href="#Django和Flask有什么区别？为什么要选择Flask" class="headerlink" title="Django和Flask有什么区别？为什么要选择Flask"></a>Django和Flask有什么区别？为什么要选择Flask</h3><p>1、Django是一个使用Python编程语言创建的Web开发框架。<br>2、它是功能齐全的Web应用程序框架，具有许多内置功能，例如Admin后端和具有迁移功能的ORM。<br>3、它创建时间早，更成熟。<br>4、Flask适用于快速开发用例。<br>5、Flask更适合开发不需要大型代码库的轻量级Web应用程序。它易于开发微服务或无服务器应用程序。<br>5、与Django相比，Flask简单易学且API更少。<br>6、随着行业追随将微服务作为容器的一部分的趋势，将Flask保留在您的Web开发工具包中很实用</p><h3 id="Flask中的g对象是什么？它与会话对象有何不同"><a href="#Flask中的g对象是什么？它与会话对象有何不同" class="headerlink" title="Flask中的g对象是什么？它与会话对象有何不同"></a>Flask中的g对象是什么？它与会话对象有何不同</h3><p>1、Flask的g对象用作全局命名空间，用于在应用程序上下文中保存任何数据。<br>2、g对象不适用于在请求之间存储数据。从某种意义上说，字母g代表global。<br>3、在某些情况下，当您需要在应用程序上下文中保留全局变量，而不是创建全局变量时，最好使用g对象，因为Flask中的每个请求都有一个单独的g对象。<br>4、Flask的g对象使我们免于意外修改自定义全局变量。</p><h3 id="您可以通过哪些方式连接Flask中的数据库"><a href="#您可以通过哪些方式连接Flask中的数据库" class="headerlink" title="您可以通过哪些方式连接Flask中的数据库"></a>您可以通过哪些方式连接Flask中的数据库</h3><p>1、Flask可用于大多数RDB模式，例如PostgreSQL，SQLite和MySQL。<br>2、要连接数据库，我们必须使用Flask-SQLAlchemy扩展。它使开发过程中的数据库交互和管理变得容易，而无需编写原始SQL查询。<br>3、原始SQL查询容易受到SQL注入攻击。对于使用NoSQL数据存储（例如MongoDB），我们可以使用Flask-MongoEngine扩展</p><h3 id="Flask蓝图的作用"><a href="#Flask蓝图的作用" class="headerlink" title="Flask蓝图的作用"></a>Flask蓝图的作用</h3><p>蓝图Blueprint实现模块化的应用<br>book_bp = Blueprint(‘book’, name）创建蓝图对象  </p><p>蓝图中使用路由@book_bp.route(‘url’)<br>在另一.py文件里导入和注册蓝图   </p><p>from book import book_bp<br>app.register_blueprint(book_bp)</p><p>作用:<br>  1、将不同的功能模块化<br>  2、构建大型应用<br>  3、优化项目结构<br>  4、增强可读性,易于维护（跟Django的view功能相似）</p><h3 id="Flask框架默认session处理机制"><a href="#Flask框架默认session处理机制" class="headerlink" title="Flask框架默认session处理机制"></a>Flask框架默认session处理机制</h3><p>1、Flask的默认session利用了Werkzeug的SecureCookie，把信息做序列化(pickle)后编码(base64)，放到cookie里了。<br>2、过期时间是通过cookie的过期时间实现的。<br>3、为了防止cookie内容被篡改，session会自动打上一个叫session的hash串，这个串是经过session内容、SECRET_KEY计算出来的，看得出，这种设计虽然不能保证session里的内容不泄露，但至少防止了不被篡改</p><h3 id="列举HTTP请求中的状态码"><a href="#列举HTTP请求中的状态码" class="headerlink" title="列举HTTP请求中的状态码"></a>列举HTTP请求中的状态码</h3><p>404 请求的url地址不存在<br>503 访问限制有权限<br>200 访问成功<br>302 重定向</p><p>1xx —— 元数据<br>2xx —— 正确的响应<br>3xx —— 重定向<br>4xx —— 客户端错误<br>5xx —— 服务端错误<br>100 Continue。客户端应当继续发送请求。<br>200 OK。请求已成功,请求所希望的响应头或数据体将随此响应返回。<br>201 Created。请求成功,并且服务器创建了新的资源。<br>301 Moved Permanently。请求的网页已永久移动到新位置。 服务器返回此响应(对GET或HEAD请求的响应)时,会自动将请求者转到新位置。</p><p>302 Found。服务器目前从不同位置的网页响应请求,但请求者应继续使用原有位置来进行以后的请求。<br>400 Bad Request。服务器不理解请求的语法。<br>401 Unauthorized。请求要求身份验证。对于需要登录的网页,服务器可能返回此响应。<br>403 Forbidden。服务器拒绝请求。<br>404 Not Found。服务器找不到请求的网页。<br>500 Internal Server Error。服务器遇到错误,无法完成请求。</p><h3 id="Flask-WTF是什么？有什么特点？"><a href="#Flask-WTF是什么？有什么特点？" class="headerlink" title="Flask-WTF是什么？有什么特点？"></a>Flask-WTF是什么？有什么特点？</h3><p>1、Flask-wtf是一个用于表单处理,校验并提供csrf验证的功能的扩展库<br>2、Flask-wtf能把正表单免受CSRF&lt;跨站请求伪造&gt;的攻击<br>3、Flask-WTF 提供 FileField 来处理文件上传，它在表单提交后，自动从 flask.request.files 中抽取数据。FileField 的 data 属性是一个 </p><h3 id="SQLAlchemy如何执行原生SQL"><a href="#SQLAlchemy如何执行原生SQL" class="headerlink" title="SQLAlchemy如何执行原生SQL"></a>SQLAlchemy如何执行原生SQL</h3><p>两种SQLAlchemy可以执行原生sql的方式<br>第一种是通过session(会话)对象执行execute方法</p><p>session = scoped_session(SessionFactory)<br>session.execute(‘insert users(name) values(:value)’, params={‘value’: ‘thanlon’})</p><p>第二种是通过cursor(游标)对象执行execute方法。</p><p>conn = engine.raw_connection()<br>cursor = conn.cursor()<br>cursor.execute(‘select * from users’)</p><h3 id="DBUtils模块的作用"><a href="#DBUtils模块的作用" class="headerlink" title="DBUtils模块的作用"></a>DBUtils模块的作用</h3><p>作用:<br>    DBUtils模块的作用是实现数据库连接池，是为了解决“多线程情况下请求比较多时性能降低”的问题</p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乐观锁与悲观锁的实现</title>
      <link href="/2020/10/13/%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/10/13/%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="Django实现悲观锁"><a href="#Django实现悲观锁" class="headerlink" title="Django实现悲观锁"></a>Django实现悲观锁</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在Django中使用悲观锁锁定一个对象，需要使用到select<span class="emphasis">_for_</span>update()方法，悲观锁本质上是一个行级锁，能够锁定所有匹配的行，直至事务结束</span><br><span class="line">例如在一个类中写一个post方法，在方法里面写表名.object.select<span class="emphasis">_for_</span>update().get(id=x)再return Response</span><br><span class="line">函数视图，锁定所有符合条件的文章对象列表。</span><br><span class="line"> from django.db import transaction</span><br><span class="line"></span><br><span class="line"> with transaction.atomic():</span><br><span class="line"><span class="code">     entries = Entry.objects.select_for_update().filter(author=request.user)</span></span><br><span class="line"><span class="code">     for entry in entries:</span></span><br><span class="line"><span class="code">         ...</span></span><br><span class="line"><span class="code">一般情况下如果其他事务锁定了相关行，那么本次查询将被阻塞，直到锁被释放。如果不想要使查询阻塞的话，使用select_for_update(nowait=True)。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">当你同时使用select<span class="emphasis">_for_</span>update与select<span class="emphasis">_related方法时，select_</span>related指定的相关对象也会被锁定。你可以通过select<span class="emphasis">_for_</span>update(of=(...))方法指定需要锁定的关联对象</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">select<span class="emphasis">_for_</span>update方法必须与事务(transaction)同时使用。</span><br><span class="line">MySQL版本要在8.0.1+ 以上才支持 nowait和 of选项</span><br></pre></td></tr></tbody></table></figure><h3 id="Django实现乐观锁"><a href="#Django实现乐观锁" class="headerlink" title="Django实现乐观锁"></a>Django实现乐观锁</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">乐观锁实现一般使用记录版本号，为数据表增加一个版本标识(version)字段，每次对数据的更新操作成功后都对版本号执行+1操作。每次执行更新操作时都去判断当前版本号是不是该条数据的最新版本号，如果不是说明数据已经同时被修改过了，则丢弃更新，需要重新获取目标对象再进行更新。</span><br><span class="line"></span><br><span class="line">Django项目中实现乐观锁可以借助于django-concurrency这个第三方库, 它可以给模型增加一个version字段，每次执行save操作时会自动给版本号+1。</span><br><span class="line"></span><br><span class="line"> from django.db import models</span><br><span class="line"> from concurrency.fields import IntegerVersionField</span><br><span class="line"></span><br><span class="line"> class ConcurrentModel( models.Model ):</span><br><span class="line"><span class="code">     version = IntegerVersionField( )</span></span><br><span class="line"><span class="code">     name = models.CharField(max_length=100)</span></span><br><span class="line"><span class="code">下例中a和b同时获取了pk=1的模型对象信息，并尝试对其name字段进行修改。由于a.save()方法调用成功以后对象的版本号version已经加1，b再调用b.save()方法时将会报RecordModifiedError的错误，这样避免了a，b同时修改同一对象信息造成数据冲突。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"> a = ConcurrentModel.objects.get(pk=1)</span><br><span class="line"> a.name = '1'</span><br><span class="line"></span><br><span class="line"> b = ConcurrentModel.objects.get(pk=1)</span><br><span class="line"> b.name = '2'</span><br><span class="line"></span><br><span class="line"> a.save()</span><br><span class="line"> b.save()</span><br></pre></td></tr></tbody></table></figure><h3 id="什么时候该用悲观锁，什么时候该用乐观锁"><a href="#什么时候该用悲观锁，什么时候该用乐观锁" class="headerlink" title="什么时候该用悲观锁，什么时候该用乐观锁"></a>什么时候该用悲观锁，什么时候该用乐观锁</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">并发量：如果并发量不大且不允许脏读，可以使用悲观锁解决并发问题；但如果系统的并发非常大的话,悲观锁定会带来非常大的性能问题, 建议乐观锁。</span><br><span class="line"></span><br><span class="line">响应速度：如果需要非常高的响应速度，建议采用乐观锁方案，成功就执行，不成功就失败，不需要等待其他并发去释放锁。乐观锁并未真正加锁，效率高。</span><br><span class="line"></span><br><span class="line">冲突频率：如果冲突频率非常高，建议采用悲观锁，保证成功率。冲突频率大，选择乐观锁会需要多次重试才能成功，代价比较大。</span><br><span class="line"></span><br><span class="line">重试代价：如果重试代价大，建议采用悲观锁。悲观锁依赖数据库锁，效率低。更新失败的概率比较低。</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>paramiko模块</title>
      <link href="/2020/10/03/paramiko%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/10/03/paramiko%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Paramiko是用python语言写的一个模块，远程连接到Linux服务器，查看上面的日志状态，批量配置远程服务器，文件上传，文件下载等</p><span id="more"></span><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>paramiko是一个基于SSH用于连接远程服务器并执行相关操作（SSHClient和SFTPClinet,即一个是远程连接，一个是上传下载服务），使用该模块可以对远程服务器进行命令或文件操作，值得一说的是，fabric和ansible内部的远程管理就是使用的paramiko来现实<br>ssh是一个协议，OpenSSH是其中一个开源实现，paramiko是Python的一个库，实现了SSHv2协议(底层使用cryptography)。</p><p>有了Paramiko以后，我们就可以在Python代码中直接使用SSH协议对远程服务器执行操作，而不是通过ssh命令对远程服务器进行操作。</p><p>由于paramiko属于第三方库，所以需要使用如下命令先行安装<br>pip3 install paramiko</p><h3 id="Paramiko介绍"><a href="#Paramiko介绍" class="headerlink" title="Paramiko介绍"></a>Paramiko介绍</h3><p>paramiko包含两个核心组件: SSHClient和SFTPClient。</p><p><strong>SSHClient</strong>的作用类似于Linux的ssh命令，是对SSH会话的封装，该类封装了传输(Transport)，通道(Channel)及SFTPClient建立的方法(open_sftp)，通常用于执行远程命令。<br><strong>SFTPClient</strong>的作用类似与Linux的sftp命令，是对SFTP客户端的封装，用以实现远程文件操作，如文件上传、下载、修改文件权限等操作</p><p>Paramiko中的几个基础名词：<br>1、Channel: 是一种类Socket，一种安全的SSH传输通道；<br>2、Transport: 是一种加密的会话，使用时会同步创建了一个加密的Tunnels(通道)，这个Tunnels叫做Channel；<br>3、Session: 是client与Server保持连接的对象，用connect()/start_client()/start_server()开始会话。</p><h3 id="Paramiko的基本使用"><a href="#Paramiko的基本使用" class="headerlink" title="Paramiko的基本使用"></a>Paramiko的基本使用</h3><p><strong>SSHClient常用的方法介绍</strong></p><p><strong>connect()</strong>: 实现远程服务器的连接与认证，对于该方法只有hostname是必传参数。<br>常用参数<br>hostname 连接的目标主机<br>port=SSH_PORT 指定端口<br>username=None 验证的用户名<br>password=None 验证的用户密码<br>pkey=None 私钥方式用于身份验证<br>key_filename=None 一个文件名或文件列表，指定私钥文件<br>timeout=None 可选的tcp连接超时时间<br>allow_agent=True, 是否允许连接到ssh代理，默认为True 允许<br>look_for_keys=True 是否在~/.ssh中搜索私钥文件，默认为True 允许<br>compress=False, 是否打开压缩</p><p><strong>set_missing_host_key_policy()</strong>: 设置远程服务器没有在know_hosts文件中记录时的应对策略。目前支持三种策略<br>设置连接的远程主机没有本地主机密钥或HostKeys对象时的策略，目前支持三种：<br><strong>AutoAddPolicy</strong> 自动添加主机名及主机密钥到本地HostKeys对象，不依赖load_system_host_key的配置。即新建立ssh连接时不需要再输入yes或no进行确认<br><strong>WarningPolicy</strong> 用于记录一个未知的主机密钥的python警告。并接受，功能上和AutoAddPolicy类似，但是会提示是新连接<br><strong>RejectPolicy</strong> 自动拒绝未知的主机名和密钥，依赖load_system_host_key的配置。此为默认选项</p><p><strong>exec_command()</strong>: 在远程服务器执行Linux命令的方法。</p><p><strong>open_sftp()</strong>: 在当前ssh会话的基础上创建一个sftp会话。该方法会返回一个SFTPClient对象<br>利用SSHClient对象的open_sftp()方法，可以直接返回一个基于当前连接的sftp对象，可以进行文件的上传等操作.<br>sftp = client.open_sftp()<br>sftp.put(‘local.txt’,’remote.txt’)</p><p><strong>SSHClient常用的方法举例</strong><br>import paramiko<br>实例化SSHClient<br>ssh_client = paramiko.SSHClient()<br>自动添加策略，保存服务器的主机名和密钥信息，如果不添加，那么不再本地know_hosts文件中记录的主机将无法连接 ，此方法必须放在connect方法的前面<br>ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>连接SSH服务端，以用户名和密码进行认证 ，调用connect方法连接服务器<br>ssh_client.connect(hostname=’192.168.137.105’, port=22, username=’root’, password=’123456’)<br>打开一个Channel并执行命令  结果放到stdout中，如果有错误将放到stderr中<br>stdin, stdout, stderr = ssh_client.exec_command(‘df -hT ‘)<br>stdout 为正确输出，stderr为错误输出，同时是有1个变量有值   # 打印执行结果  print(stdout.read().decode(‘utf-8’))<br>关闭SSHClient连接<br>ssh_client.close()</p><p><strong>密钥连接方式</strong></p><p>配置私人密钥文件位置<br>private = paramiko.RSAKey.from_private_key_file(‘/root/.ssh/id_rsa’)<br>实例化SSHClient<br>ssh_client = paramiko.SSHClient()<br>自动添加策略，保存服务器的主机名和密钥信息，如果不添加，那么不再本地know_hosts文件中记录的主机将无法连接<br>ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>连接SSH服务端，以用户名和密码进行认证<br>ssh_client.connect(<br>hostname=’192.168.137.100’,<br>port=22,<br>username=’root’,<br>pkey=private<br>)</p><p><strong>SFTPClient常用方法介绍</strong></p><p>SFTPCLient作为一个sftp的客户端对象，根据ssh传输协议的sftp会话，实现远程文件操作，如上传、下载、权限、状态<br>from_transport(cls,t) 创建一个已连通的SFTP客户端通道<br>put(localpath, remotepath, callback=None, confirm=True) 将本地文件上传到服务器<br>参数confirm：是否调用stat()方法检查文件状态，返回ls -l的结果<br>get(remotepath, localpath, callback=None) 从服务器下载文件到本地<br>mkdir() 在服务器上创建目录<br>remove() 在服务器上删除目录<br>rename() 在服务器上重命名目录<br>stat() 查看服务器文件状态<br>listdir() 列出服务器目录下的文件</p><p><strong>SFTPClient常用方法举例</strong></p><p>import paramiko<br>实例化一个transport对象<br>tran = paramiko.Transport((‘192.168.137.100’, 22))<br>连接SSH服务端，使用password<br>tran.connect(username=”root”, password=’123456’)<br>或使用配置私人密钥文件位置<br>private = paramiko.RSAKey.from_private_key_file(‘/root/.ssh/id_rsa’)<br>连接SSH服务端，使用pkey指定私钥<br>tran.connect(username=”root”, pkey=private)<br>获取SFTP实例<br>sftp = paramiko.SFTPClient.from_transport(tran)<br>设置上传的本地/远程文件路径<br>local_path = “/home/1.txt”<br>remote_path = “/tmp/1.txt”<br>执行上传动作<br>sftp.put(local_path, remote_path)<br>执行下载动作<br>sftp.get(remote_path, local_path)<br>关闭Transport通道<br>tran.close()</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>concurrent模块</title>
      <link href="/2020/09/27/concurrent%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/09/27/concurrent%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="关于concurrent模块"><a href="#关于concurrent模块" class="headerlink" title="关于concurrent模块"></a>关于concurrent模块</h3><p>今天来讲下 python 的另外一个自带库 concurrent 。<br>concurrent 是在 Python3.2 中引入的，只用几行代码就可以编写出线程池/进程池。<br>计算型任务效率和 mutiprocessing.pool 提供的 poll 和 ThreadPoll 相比不分伯仲，而且在 IO 型任务由于引入了 Future 的概念效率要高数倍。<br>而threading的话还要自己维护相关的队列防止死锁，代码的可读性也会下降，相反 concurrent 提供的线程池却非常的便捷，不用自己操心死锁以及编写线程池代码，由于异步的概念 IO 型任务也更有优势<br>concurrent 主要提供了 ThreadPoolExecutor 和 ProcessPoolExecutor 。一个多线程，一个多进程。但 concurrent 本质上都是对 threading 和 mutiprocessing 的封装。看它的源码可以知道，所以最底层并没有异步。<br>ThreadPoolExecutor 自己提供了任务队列，不需要自己写了。而所谓的线程池，它只是简单的比较当前的 threads 数量和定义的 max_workers 的大小，小于 max_workers 就允许任务创建线程执行任务</p><h3 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3><p>通过 ThreadPoolExecutor 类创建线程池对象，max_workers 设置最大运行线程数数。<br>使用 ThreadPoolExecutor 的好处是不用担心线程死锁问题，让多线程编程更简洁<br>from concurrent import futures<br>pool = futures.ThreadPoolExecutor(max_workers = 2)</p><h3 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h3><p>submit(self, fn, *args, **kwargs):<br>fn：需要异步执行的函数<br>*args,**kwargs：fn 接受的参数</p><p>该方法的作用就是提交一个可执行的回调task，它返回一个Future对象。可以看出此方法不会阻塞主线程的执行。<br>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="https://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">https://www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>for url in urls:<br>    task = pool.submit(get_request,url)<br>    print(‘{}主线程’.format(datetime.datetime.now()))<br>    time.sleep(2)</p><p>输出结果<br>2021-03-12 15:29:10.780141:主线程<br>2021-03-12 15:29:10.865425:<a href="https://www.baidu.com/">https://www.baidu.com</a>  200<br>2021-03-12 15:29:10.923062:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200<br>2021-03-12 15:29:10.940930:<a href="https://www.jd.com/">https://www.jd.com</a>  200</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map(self, fn, *iterables, timeout=None, chunksize=1):<br>fn：需要异步执行的函数<br>*iterables：可迭代对象</p><p>map 第二个参数是可迭代对象，比如 list、tuple 等，写法相对简单。map 方法也不会阻塞主线程的执行<br>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="https://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">https://www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>tasks = pool.map(get_request,urls)<br>print(‘{}:主线程’.format(datetime.datetime.now()))<br>time.sleep(2)</p><p>输出结果<br>2021-03-12 16:14:04.854452:主线程<br>2021-03-12 16:14:04.938870:<a href="https://www.baidu.com/">https://www.baidu.com</a>  200<br>2021-03-12 16:14:05.033849:<a href="https://www.jd.com/">https://www.jd.com</a>  200<br>2021-03-12 16:14:05.048952:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200</p><h3 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h3><p>如果要等待子线程执行完之后再执行主线程要怎么办呢，可以通过 wait 。</p><p>wait(fs, timeout=None, return_when=ALL_COMPLETED):<br>fs：所有任务 tasks<br>return_when：有三个参数 FIRST_COMPLETED：只要有一个子线程完成则返回结果。<br>             FIRST_EXCEPTION：只要有一个子线程抛异常则返回结果，若没有异常则等同于ALL_COMPLETED。<br>             ALL_COMPLETED：默认参数，等待所有子线程完成</p><p>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="https://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">https://www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>tasks =[]<br>for url in urls:<br>    task = pool.submit(get_request,url)<br>    tasks.append(task)<br>futures.wait(tasks)<br>print(‘{}:主线程’.format(datetime.datetime.now()))<br>time.sleep(2)</p><p>输出结果<br>2021-03-12 16:30:13.437042:<a href="https://www.baidu.com/">https://www.baidu.com</a>  200<br>2021-03-12 16:30:13.552700:<a href="https://www.jd.com/">https://www.jd.com</a>  200<br>2021-03-12 16:30:14.117325:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200<br>2021-03-12 16:30:14.118284:主线程</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>as_completed(fs, timeout=None)</p><p>所有任务 tasks<br>使用 concurrent.futures 操作 多线程/多进程 过程中，很多函数报错并不会直接终止程序，而是什么都没发生。使用 as_completed 可以捕获异常，代码如下<br>import requests,datetime,time<br>from concurrent import futures</p><p>def get_request(url):<br>    r = requests.get(url)<br>    print(‘{}:{}  {}’.format(datetime.datetime.now(),url,r.status_code))</p><p>urls = [‘<a href="http://www.baidu.com&amp;/#39;,'https://www.tmall.com','https://www.jd.com']">www.baidu.com','https://www.tmall.com','https://www.jd.com']</a><br>创建线程池<br>pool = futures.ThreadPoolExecutor(max_workers = 2)<br>tasks =[]<br>for url in urls:<br>    task = pool.submit(get_request,url)<br>    tasks.append(task)<br>异常捕获<br>errors = futures.as_completed(tasks)<br>for error in errors:<br>    # error.result()       等待子线程都完成，并抛出异常，中断主线程<br>    # 捕获子线程异常，不会终止主线程继续运行<br>    print(error.exception())<br>futures.wait(tasks)<br>print(‘{}:主线程’.format(datetime.datetime.now()))<br>time.sleep(2)</p><p>输出结果<br>Invalid URL ‘<a href="http://www.baidu.com&amp;/#39;">www.baidu.com'</a>: No schema supplied. Perhaps you meant <a href="http://www.baidu.com/">http://www.baidu.com</a>?<br>2021-03-12 17:24:26.984933:<a href="https://www.tmall.com/">https://www.tmall.com</a>  200<br>None<br>2021-03-12 17:24:26.993939:<a href="https://www.jd.com/">https://www.jd.com</a>  200<br>None<br>2021-03-12 17:24:26.994937:主线程</p><p>多进程编程与之类似，将 ThreadPoolExecutor 替换成 ProcessPoolExecutor</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多进程包multiprocessing的使用</title>
      <link href="/2020/09/27/multiprocess%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/09/27/multiprocess%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><p>Python提供了非常好用的多进程包multiprocessing，你只需要定义一个函数，Python会替你完成其他所有事情。借助这个包，可以轻松完成从单进程到并发执行的转换。</p><h3 id="新建单一进程"><a href="#新建单一进程" class="headerlink" title="新建单一进程"></a>新建单一进程</h3><p>如果我们新建少量进程，可以如下：<br>import multiprocessing<br>import time<br>def func(msg):<br>  for i in xrange(3):<br>    print msg<br>    time.sleep(1)<br>if <strong>name</strong> == “<strong>main</strong>“:<br>  p = multiprocessing.Process(target=func, args=(“hello”, ))<br>  p.start()<br>  p.join()<br>  print “Sub-process done.”</p><h3 id="使用进程池"><a href="#使用进程池" class="headerlink" title="使用进程池"></a>使用进程池</h3><p>是的，你没有看错，不是线程池。它可以让你跑满多核CPU，而且使用方法非常简单。<br>注意要用apply_async，如果落下async，就变成阻塞版本了。<br>processes=4是最多并发进程数量。</p><p>import multiprocessing<br>import time<br>def func(msg):<br>  for i in xrange(3):<br>    print msg<br>    time.sleep(1)<br>if <strong>name</strong> == “<strong>main</strong>“:<br>  pool = multiprocessing.Pool(processes=4)<br>  for i in xrange(10):<br>    msg = “hello %d” %(i)<br>    pool.apply_async(func, (msg, ))<br>  pool.close()<br>  pool.join()<br>  print “Sub-process(es) done.”</p><h3 id="使用Pool，并需要关注结果"><a href="#使用Pool，并需要关注结果" class="headerlink" title="使用Pool，并需要关注结果"></a>使用Pool，并需要关注结果</h3><p>更多的时候，我们不仅需要多进程执行，还需要关注每个进程的执行结果，如下：</p><p>import multiprocessing<br>import time<br>def func(msg):<br>  for i in xrange(3):<br>    print msg<br>    time.sleep(1)<br>  return “done “ + msg<br>if <strong>name</strong> == “<strong>main</strong>“:<br>  pool = multiprocessing.Pool(processes=4)<br>  result = []<br>  for i in xrange(10):<br>    msg = “hello %d” %(i)<br>    result.append(pool.apply_async(func, (msg, )))<br>  pool.close()<br>  pool.join()<br>  for res in result:<br>    print res.get()<br>  print “Sub-process(es) done.”</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis缓存</title>
      <link href="/2020/08/10/Redis%E7%BC%93%E5%AD%98/"/>
      <url>/2020/08/10/Redis%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><p>redis<strong>缓存穿透</strong></p><p>你所要查询的key并不存在于redis缓存中，这时又有大连的请求查询这个key，就会使得数据库负载过大，就像是穿过了缓存直接击中数据库，很容易把数据库给打挂了<br>解决方案：<br>第一种方法呢就是数据库查询不到的key直接保存在redis中，再次查询数据库的时候，缓存层直接返回空<br>第二种方法就涉及到了一个叫布隆过滤器的东西，本质上是一个二进制数组，以空间换时间，以低内存空间解决缓存穿透的问题，将所有存在的key提前存入布隆过滤器，在请求进入缓存之前，布隆过滤器进行拦截，若不存在直接返回空</p><p>redis<strong>缓存击穿</strong></p><p>某一个热点的key失效了，大量的请求直接到达数据库<br>解决方法：<br>第一种设置永不过期<br>第二种就是加互斥锁，互斥锁就是同一时刻只有一个线程能够进行访问，加了互斥锁之后第一个访问完后，缓存中的数据将会被重建，之后直接从缓存中取就可以 </p><p>redis<strong>缓存雪崩</strong></p><p>可能是redis宕机了，也可能是有很多key设置了统一过期时间<br>解决方案：<br>第一种构建高可用的Redis缓存：搭建Redis集群，提高Redis的容灾性<br>第二种使用熔断机制：对存储层增加限流措施，当请求超出限制时，对其提供降级措施，例如：当请求到达一定阈值，直接返回“系统繁忙“等提示，防止过多的请求到达数据库上，这样可以保证一部分用户还可以使用，其他用户多刷新几次也能得到结果</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django面试题</title>
      <link href="/2020/08/08/Django%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/08/08/Django%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="Django的生命周期"><a href="#Django的生命周期" class="headerlink" title="Django的生命周期"></a>Django的生命周期</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、当用户在浏览器输入url，此时浏览器会生成请求头和请求体随之发送给服务端。</span><br><span class="line">2、url经过Django中的wsgi时完成请求对象创建</span><br><span class="line">3、经过Django的中间件，到路由系统匹配路由</span><br><span class="line">4、完成匹配后进入相应的view视图，执行相关代码返回执行结果</span><br><span class="line">5、Django把客户端想要的数据作为字符串返回客户端</span><br><span class="line">6、客户端接收数据，再渲染到页面展现给用户</span><br></pre></td></tr></tbody></table></figure><img src="https://s2.loli.net/2022/06/12/AK93GHI4SJM7afn.png" alt="image-20220603144648987" style="zoom:50%;"><h3 id="Django内置组件"><a href="#Django内置组件" class="headerlink" title="Django内置组件"></a>Django内置组件</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin，from，modelfrom，model</span><br></pre></td></tr></tbody></table></figure><h3 id="FBV和CBV"><a href="#FBV和CBV" class="headerlink" title="FBV和CBV"></a>FBV和CBV</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FBV:基于函数的视图函数</span><br><span class="line">CBV:基于类的视图函数</span><br></pre></td></tr></tbody></table></figure><h3 id="session和cookie"><a href="#session和cookie" class="headerlink" title="session和cookie"></a>session和cookie</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">区别：</span><br><span class="line"><span class="code">    cookie数据存放于客户的浏览器中，session的数据存于服务器中，cookie不是很安全，他人可以分析存放于本地的cookie并进行cookie欺骗，若从安全面考虑则应该使用session，session会在一定的时间内保存在服务器上。当访问量增多，会比较占用服务器的性能，所以建议将登陆信息等重要的信息存放在session中，其他信息则放在cookie中</span></span><br></pre></td></tr></tbody></table></figure><h3 id="HTTP请求常见的方式"><a href="#HTTP请求常见的方式" class="headerlink" title="HTTP请求常见的方式"></a>HTTP请求常见的方式</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、opions 返回服务器针对特定资源所支持的HTML请求方法，允许客户端查看服务器性能</span><br><span class="line">2、Get 向特定资源发出请求</span><br><span class="line">3、post 向指定资源位置提交数据进行处理请求（提交表单，上传文件），又可能导致新的资源的建立或原有资源的修改</span><br><span class="line">4、put 向指定资源位置上传最新内容</span><br><span class="line">5、head</span><br><span class="line">6、delete</span><br><span class="line">7、trace</span><br><span class="line">8、connect</span><br></pre></td></tr></tbody></table></figure><h3 id="MVC和MTV模式"><a href="#MVC和MTV模式" class="headerlink" title="MVC和MTV模式"></a>MVC和MTV模式</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Django的MTV模式本质上和MVC是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同。</span><br><span class="line">Django的MTV分别是指： </span><br><span class="line">   M 代表模型（Model）： 负责业务对象和数据库的关系映(ORM) </span><br><span class="line">   T 代表模板 (Template)：负责如何把页面展示给用户(html) </span><br><span class="line">   V 代表视图（View）： 负责业务逻辑，并在适当时候调用Model和Template。 </span><br><span class="line">   除了以上三层之外，还需要一个URL分发器，它的作用是将一个个URL的页面请求分发给不同的View处理，View再调用相应Model Template    优势：低耦合，开发快捷，部署方便，可重用性高，维护成本低。</span><br></pre></td></tr></tbody></table></figure><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象关系映射</span><br><span class="line">优点：ORM使得数据库的交互更加简单了，并且不用考虑开始的sql语句，实现快速开发</span><br><span class="line">缺陷:sql封装死了 有时候查询速度很慢</span><br></pre></td></tr></tbody></table></figure><h3 id="中间件的4种方法及应用场景"><a href="#中间件的4种方法及应用场景" class="headerlink" title="中间件的4种方法及应用场景"></a>中间件的4种方法及应用场景</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">自定义中间件必须继承MiddlewareMixin</span><br><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">方法：</span><br><span class="line"><span class="code">    process_request</span></span><br><span class="line"><span class="code">    process_view</span></span><br><span class="line"><span class="code">    process_exception   view中出现错误执行该方法</span></span><br><span class="line"><span class="code">    process_response</span></span><br><span class="line"><span class="code">    process_template_responseprocess  函数中有render执行</span></span><br></pre></td></tr></tbody></table></figure><h3 id="什么是wsgi、uwsgi、uWSGI"><a href="#什么是wsgi、uwsgi、uWSGI" class="headerlink" title="什么是wsgi、uwsgi、uWSGI"></a>什么是wsgi、uwsgi、uWSGI</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wsgi:</span><br><span class="line"><span class="code">    是web网关接口，是一套协议，用于接收用户请求并将请求进行初次封装，随即将请求交给web框架</span></span><br><span class="line"><span class="code">    实现wsgi协议的模块：</span></span><br><span class="line"><span class="code">        1、wsgiref：本质上就是编写一个socket服务端，用于接收用户请求（django）</span></span><br><span class="line"><span class="code">        2、werkzeug：本质上就是编写一个socket服务端，用于接收用户请求（flask）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">uwsgi:</span><br><span class="line"><span class="code">    与wsgi一样是一种通信协议，它是uWSGI服务器的独占协议，用于定义传输信息的类型</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">uWSGI:</span><br><span class="line"><span class="code">    是一个web服务器，实现了wsgi协议，uWSGI协议，http协议</span></span><br></pre></td></tr></tbody></table></figure><p>ORM中的方法</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、model.表名.objects.all() 获取表中所有对象，结果是对象列表</span><br><span class="line">2、model.表名.objects.get(条件) 获取符合条件的对象</span><br><span class="line">3、model.表名.objects.filter(条件) 筛选所有符合条件的对象</span><br><span class="line">4、model.表名.objects.exclude(条件) 筛选所有不合符条件的对象</span><br><span class="line">5、model.表名.objects.all().values() 字典列表 values()括号内不指定则显示全部，若有指定则显示指定的</span><br><span class="line">6、model.表名.objects.all().values<span class="emphasis">_list() 元祖列表 括号内指定同上</span></span><br><span class="line"><span class="emphasis">7、model.表名.objects.all().order_</span>by('id') 按照ID升序</span><br><span class="line">8、model.表名.objects.all().order<span class="emphasis">_by('-id') 按ID降序</span></span><br><span class="line"><span class="emphasis">9、model.表名.objects.all().order_</span>by('a','-id') 先按a升序，a字段相同的按ID降序</span><br><span class="line">10、model.表名.objects.all().order<span class="emphasis">_by('-id').reverse() 对结果反转，reverse前必须排序，否则无效；或在model中表类下中的Meta中指定ordering=('id',) 注意逗号不能少</span></span><br><span class="line"><span class="emphasis">11、distinct() 去重</span></span><br><span class="line"><span class="emphasis">12、model.表名.objects.filter().exists() 判断列表是否有东西，返回true或false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="ORM中三种能写sql语句的方法"><a href="#ORM中三种能写sql语句的方法" class="headerlink" title="ORM中三种能写sql语句的方法"></a>ORM中三种能写sql语句的方法</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、execute 直接访问数据库，避开模型层</span><br><span class="line">2、extra </span><br><span class="line">3、raw for p in Person.objects.raw('SELECT <span class="emphasis">* FROM myapp_person')   print(p)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="ORM批量处理数据"><a href="#ORM批量处理数据" class="headerlink" title="ORM批量处理数据"></a>ORM批量处理数据</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">插入数据：</span><br><span class="line"><span class="code">    创建一个对象列表，然后调用bulk_create方法，一次性将列表中的数据插入数据库</span></span><br><span class="line"><span class="code">    product_list_to_insert = list()</span></span><br><span class="line"><span class="code">    for x in range(10):</span></span><br><span class="line"><span class="code">        product_list_to_insert.append(Product(name='product name' + str(x),price=x))</span></span><br><span class="line"><span class="code">        Product.objects.bulk_create(product_list_to_insert)</span></span><br><span class="line"><span class="code">更新数据:先进行数据过滤，再调用update方法一次性更新</span></span><br><span class="line"><span class="code">    Product.objects.filter(name_contains='name').update(name='new name')</span></span><br><span class="line"><span class="code">删除数据：先进行数据过滤，然后再调用delete方法删除</span></span><br><span class="line"><span class="code">    Product.objects.filter(name_contains='name query').delete()</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></tbody></table></figure><h3 id="CSRF实现机制"><a href="#CSRF实现机制" class="headerlink" title="CSRF实现机制"></a>CSRF实现机制</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、查看中间件是否启用，未启用则启动中间件</span><br><span class="line">2、post请求</span><br><span class="line">3、验证码</span><br><span class="line">4、表单中添加{% csrf<span class="emphasis">_token %}标签</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Django中提供了runserver为什么不能用户来部署项目-runserver和uWSGI的区别"><a href="#Django中提供了runserver为什么不能用户来部署项目-runserver和uWSGI的区别" class="headerlink" title="Django中提供了runserver为什么不能用户来部署项目(runserver和uWSGI的区别)"></a>Django中提供了runserver为什么不能用户来部署项目(runserver和uWSGI的区别)</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、runserver方法是调试Django时用到的运行方式，是Django自带的</span><br><span class="line">   WSGI server运行主要在测试和开发中使用，runserver开启的是单进程</span><br><span class="line">2、uWSGI是一个web服务器，实现了wsgi协议，uWSGI协议，http协议，它具有超快的性能，低内存占用和多app管理等优点，与nginx搭配可构成一个生产环境，能够将用户访问请求和应用app隔开，实现真正的部署</span><br></pre></td></tr></tbody></table></figure><h3 id="calss-Meta中原信息字段有哪些"><a href="#calss-Meta中原信息字段有哪些" class="headerlink" title="calss Meta中原信息字段有哪些"></a>calss Meta中原信息字段有哪些</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、app<span class="emphasis">_label 应用场景：模型类不在默认的应用程序包下的models文件中，这时候需要指定你这个模型类是哪个应用程序的</span></span><br><span class="line"><span class="emphasis">2、db_</span>table 应用场景：用于指定自定义数据库表名</span><br><span class="line">3、db<span class="emphasis">_tablespace 应用场景：通过该字段指定模型对应的数据库表放在哪个数据库表空间</span></span><br><span class="line"><span class="emphasis">4、verbose_</span>name 应用场景：给模型类起名字，注释</span><br><span class="line">5、verbose<span class="emphasis">_name_</span>plural 应用场景：模型的复数形式是什么</span><br><span class="line">6、ordering 应用场景：对象返回的记录结果集是按哪个字段排序的</span><br></pre></td></tr></tbody></table></figure><h3 id="get和filter方法的区别"><a href="#get和filter方法的区别" class="headerlink" title="get和filter方法的区别"></a>get和filter方法的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入参数：</span><br><span class="line"><span class="code">    get的参数只能是model中定义的字段，只支持严格匹配</span></span><br><span class="line"><span class="code">    filter的参数可以使字段，也可以是扩展的where查询关键字，如in like</span></span><br><span class="line"><span class="code">返回值：</span></span><br><span class="line"><span class="code">    get返回值是一个定义的model对象</span></span><br><span class="line"><span class="code">    filter返回值是一个新的queryset对象，然后可以对queryset再进行查询，再返回新的qureyset对象，支持链式操作，queryset是一个集合对象，支持迭代、遍历、切片等，但不同等于list</span></span><br><span class="line"><span class="code">异常：</span></span><br><span class="line"><span class="code">    get只有一条记录返回的时候才正常，也就是说明get查询的字段必须是主键或唯一约束的字段，其余的都会抛异常</span></span><br><span class="line"><span class="code">    filter有没有匹配记录都不会抛异常</span></span><br></pre></td></tr></tbody></table></figure><h3 id="http请求的执行流程"><a href="#http请求的执行流程" class="headerlink" title="http请求的执行流程"></a>http请求的执行流程</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、域名解析</span><br><span class="line">2、建立连接</span><br><span class="line">3、接收请求 接收客户端访问某一资源的请求</span><br><span class="line"><span class="code">    单进程I/O   多进程I/O    复用I/O</span></span><br><span class="line"><span class="code">4、处理请求</span></span><br><span class="line"><span class="code">5、访问资源</span></span><br><span class="line"><span class="code">6、构建响应报文</span></span><br><span class="line"><span class="code">7、发送响应报文</span></span><br><span class="line"><span class="code">8、记录日志</span></span><br></pre></td></tr></tbody></table></figure><h3 id="select-related和prefetch-related的区别"><a href="#select-related和prefetch-related的区别" class="headerlink" title="select_related和prefetch_related的区别"></a>select_related和prefetch_related的区别</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有外键关系存在时，可以很好的减少数据库的请求次数，减轻数据库的压力，提高性能</span><br><span class="line">select<span class="emphasis">_related通过表关系join关联查询，一次性获取所有数据，只进行一次sql查询</span></span><br><span class="line"><span class="emphasis">prefetch_</span>related分别查询每一个表，根据之间的关系进行处理，执行两次sql查询</span><br></pre></td></tr></tbody></table></figure><h4 id="Django中orm如何设置读写分离"><a href="#Django中orm如何设置读写分离" class="headerlink" title="Django中orm如何设置读写分离"></a>Django中orm如何设置读写分离</h4><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、手动设置：通过using(db<span class="emphasis">_name)来指定使用的数据库</span></span><br><span class="line"><span class="emphasis">2、自动读写分离：</span></span><br><span class="line"><span class="emphasis">    1、定义类</span></span><br><span class="line"><span class="emphasis">    2、配置settings文件，在其中指定DATEBASE</span></span><br></pre></td></tr></tbody></table></figure><h3 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定义：远程过程调用(RPC)是一种协议，程序可使用这种协议向网络中的另一台计算机上的程序请求服务</span><br><span class="line">1、RPC采用客户机/服务器模式，请求程序就是一个客户机，而服务提供程序就是一个服务器</span><br><span class="line">2、客户机调用进程发送一个有进程参数的调用信息到服务进程，等待应答。在服务端，进程保持睡眠状态直至调用信息到达，当第一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，继续等待下一个调用信息</span><br><span class="line">3、客户端调用进程接收答复信息，获得进程结果，调用继续执行</span><br></pre></td></tr></tbody></table></figure><h3 id="如何实现用户的登陆认证"><a href="#如何实现用户的登陆认证" class="headerlink" title="如何实现用户的登陆认证"></a>如何实现用户的登陆认证</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、cookie session</span><br><span class="line">2、token登陆成功后生成加密字符串</span><br><span class="line">3、JWT就是一种用户在登录后生成token并把token存放于前端，后端不需要维护用户的状态信息但是可以进行验证token有效性的认证及状态管理方式</span><br><span class="line">4、最后一步签名的过程其实是对头部以及负载的内容进行签名处理，防止内容被篡改，提高安全性</span><br></pre></td></tr></tbody></table></figure><h3 id="django-rest-framework框架中都有哪些组件"><a href="#django-rest-framework框架中都有哪些组件" class="headerlink" title="django rest framework框架中都有哪些组件"></a>django rest framework框架中都有哪些组件</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、序列化组件：serializers 对queryset序列化以及对请求数据格式教研</span><br><span class="line">2、认证组件：写一个类并注册到认证类 在类的方法中编写认证逻辑</span><br><span class="line">3、权限组件：写一个类并注册到权限类 在类的方法中编写认证逻辑</span><br><span class="line">4、频率组件：写一个类并注册到频率类 在类的方法中编写认证逻辑</span><br><span class="line">5、渲染器：定义数据如何渲染至页面，在渲染器类中注册</span><br><span class="line">6、分页：对获取到的数据进行分页处理</span><br><span class="line"><span class="code">    1、基本分页：pagenumberpagination</span></span><br><span class="line"><span class="code">    2、偏移分页：limitoffsetpagination</span></span><br><span class="line"><span class="code">    3、游标分页：Cursorpagination</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用orm和原生sql的优缺点"><a href="#使用orm和原生sql的优缺点" class="headerlink" title="使用orm和原生sql的优缺点"></a>使用orm和原生sql的优缺点</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、orm的开发速度快，操作简单，但是执行速度较慢，在处理多表联查等复杂操作时orm语法会变得复杂</span><br><span class="line">2、sql开发速度慢，但是执行速度快，性能强</span><br></pre></td></tr></tbody></table></figure><h3 id="F、Q查询"><a href="#F、Q查询" class="headerlink" title="F、Q查询"></a>F、Q查询</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F作用：两个字段之间做比较，专门取对象中某列值的操作</span><br><span class="line">Q作用：对对象进行复杂查询，支持特殊操作符运算来组合生成不同的Q对象</span><br></pre></td></tr></tbody></table></figure><h3 id="你能列举几个减少数据库查询次数的方法吗"><a href="#你能列举几个减少数据库查询次数的方法吗" class="headerlink" title="你能列举几个减少数据库查询次数的方法吗"></a>你能列举几个减少数据库查询次数的方法吗</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、利用Django queryset的惰性和自带缓存的特性</span><br><span class="line"></span><br><span class="line">2、使用select<span class="emphasis">_related和prefetch_</span>related方法在数据库层面进行Join操作</span><br><span class="line"></span><br><span class="line">3、使用缓存</span><br></pre></td></tr></tbody></table></figure><h3 id="Django的模型继承有哪几种方式-它们有什么区别以及何时使用它们"><a href="#Django的模型继承有哪几种方式-它们有什么区别以及何时使用它们" class="headerlink" title="Django的模型继承有哪几种方式? 它们有什么区别以及何时使用它们?"></a>Django的模型继承有哪几种方式? 它们有什么区别以及何时使用它们?</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 抽象模型继承(abstract model)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 多表模型继承(multi-table inheritance)</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 代理模型(proxy model)</span><br><span class="line"></span><br><span class="line">它们的区别如下:</span><br><span class="line"></span><br><span class="line"><span class="code">    1、Django不会为抽象模型在数据库中生成自己的数据表。父类Meta中的abstract=True也不会传递给子类。如果你发现多模型有很多共同字段时，需使用抽象模型继承。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    2、多表模型继承与抽象模型继承最大的区别在于Django也会为父类模型建立自己的数据表，同时隐式地在父类和子类之间建立一个一对一关系。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    3、如果我们只想改变某个模型的行为方法，而不是添加额外的字段或创建额外的数据表，我们就可以使用代理模型(proxy model)。设置一个代理模型，需要在子类模型Meta选项中设置proxy=True， Django不会为代理模型生成新的数据表</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深浅拷贝</title>
      <link href="/2020/08/08/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/08/08/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><h3 id="一、深浅copy"><a href="#一、深浅copy" class="headerlink" title="一、深浅copy"></a><strong>一、深浅copy</strong></h3><p><strong>1、赋值运算</strong></p><p><img src="https://s2.loli.net/2022/06/11/mkIqjbKXiYtL4a8.png" alt="image-20220611151019511"></p><p><strong>注意</strong>：l2 = l1是一个指向，是赋值，和深浅copy无关</p><p>2、浅<strong>copy</strong></p><p>其实列表是一个个的槽位，每一个槽位存储的是该对象的内存地址</p><p><img src="https://s2.loli.net/2022/06/11/B8zqfNFJuDi3XVc.png" alt="image-20220611151229683"></p><p><img src="https://s2.loli.net/2022/06/11/XwmLQiN3YHOBUpy.png" alt="image-20220611151251385"></p><p><strong>小结</strong>：</p><p>浅copy：会在内存中新开辟一个空间，存放这个copy的列表，但是列表里面的内容还是沿用之前对象的内存地址</p><p>3、深<strong>copy</strong></p><p><img src="https://s2.loli.net/2022/06/11/JDp1vHY6wxAIURq.png" alt="image-20220611151433932"></p><p><img src="https://s2.loli.net/2022/06/11/YKXF9luhUOfDaH7.png" alt="image-20220611151450570"></p><p><strong>小结</strong>：</p><p>深copy：会在内存中开辟新空间，将原列表以及列表里面的可变数据类型重新创建一份，不可变数据类型则沿用之前的。</p><p><strong>为什么Python默认的拷贝方式是浅拷贝</strong>？</p><p>时间角度：浅拷贝花费时间更少。</p><p>空间角度：浅拷贝花费内存更少。</p><p>效率角度：浅拷贝只拷贝顶层数据，一般情况下比深拷贝效率高。</p><p><strong>总结</strong>：</p><p>不可变对象在赋值时会开辟新空间。</p><p>可变对象在赋值时，修改一个的值，另一个也会发生改变。</p><p>深、浅拷贝对不可变对象拷贝时，不开辟新空间，相当于赋值操作。</p><p>浅拷贝在拷贝时，只拷贝第一层中的引用，如果元素是可变对象，并且被修改，那么拷贝的对象也会发生变化。</p><p>深拷贝在拷贝时，会逐层进行拷贝，直到所有的引用都是不可变对象为止。</p><p>Python 有多种方式实现浅拷贝，copy模块的copy 函数 ，对象的 copy 函数 ，工厂方法，切片等。</p><p>大多数情况下，编写程序时，都是使用浅拷贝，除非有特定的需求。</p><p>浅拷贝的优点：拷贝速度快，占用空间少，拷贝效率高 </p>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django必会十三招</title>
      <link href="/2020/06/24/Django%E5%BF%85%E4%BC%9A%E5%8D%81%E4%B8%89%E6%8B%9B/"/>
      <url>/2020/06/24/Django%E5%BF%85%E4%BC%9A%E5%8D%81%E4%B8%89%E6%8B%9B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="必会十三招"><a href="#必会十三招" class="headerlink" title="必会十三招"></a>必会十三招</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.all()            所有元素</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.filter()         过滤</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   我们在利用主键字段筛选数据时，可以不考虑主键字段叫什么，直接使用pk代替</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">3.get()</span></span><br><span class="line"><span class="string">4.values()         </span></span><br><span class="line"><span class="string">   获取指定字段对应的数据，返回的结果是queryset对象(列表套字典的形式)</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">5.values_list()</span></span><br><span class="line"><span class="string">   获取指定字段对应的数据，返回的结果是queryset对象(列表套元祖的形式)</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">6.count()          统计所查询数据的个数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7.first()          所查询数据的第一个 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8.last()           所查询数据的最后一个</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">9.order_by()       默认是升序，在字段前加上负号即可改为降序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">10.reverse()       生效前提是必须已经排序过了的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">11.exclude()       排除什么在外</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">12.distinct()      去重(主键也得相同)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">13.exist()         判断数据是否有值，结果返回布尔值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CBV和FBV、from表单</title>
      <link href="/2020/06/24/Django%E7%AC%AC%E4%BA%94%E5%A4%A9/"/>
      <url>/2020/06/24/Django%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="JsonResponse类的使用"><a href="#JsonResponse类的使用" class="headerlink" title="JsonResponse类的使用"></a>JsonResponse类的使用</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">json格式的数据：进行跨语言数据传输</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="string">'''支持的数据类型：str，list, tuple, dict, set'''</span></span><br><span class="line"><span class="comment"># 序列化出来的数据是可以看得懂的，就是一个字符串</span></span><br><span class="line">dumps</span><br><span class="line">loads</span><br><span class="line"></span><br><span class="line">dump</span><br><span class="line">load</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="string">'''支持的数据类型：python中的所有数据类型'''</span></span><br><span class="line"><span class="comment"># 序列化出来的结果看不懂，因为结果是一个二进制</span></span><br><span class="line"><span class="comment"># pickle序列化出的来的数据只能在python中使用</span></span><br><span class="line">dumps</span><br><span class="line">loads</span><br><span class="line"></span><br><span class="line">dump</span><br><span class="line">load</span><br><span class="line"></span><br><span class="line"><span class="comment"># js中如何序列化？</span></span><br><span class="line">JSON.stringify()  <span class="comment"># 序列化</span></span><br><span class="line">JSON.parse()      <span class="comment"># 反序列化</span></span><br><span class="line"></span><br><span class="line">**在形参和实参中的用法不一样</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># print(123)</span></span><br><span class="line">    <span class="comment"># return HttpResponse('ok')</span></span><br><span class="line">    <span class="comment"># return redirect()</span></span><br><span class="line">    <span class="comment"># return render()</span></span><br><span class="line">    user_dict = {<span class="string">'username'</span>:<span class="string">'ly很帅'</span>, <span class="string">'password'</span>:<span class="number">123</span>}</span><br><span class="line">    l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="comment"># json_str = json.dumps(l, ensure_ascii=False)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># return HttpResponse(json_str)</span></span><br><span class="line">    <span class="comment"># return JsonResponse(user_dict, json_dumps_params={'ensure_ascii':False})</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(l,safe=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="form表单上传文件"><a href="#form表单上传文件" class="headerlink" title="form表单上传文件"></a>form表单上传文件</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">上传文件注意事项：</span><br><span class="line"><span class="number">1.</span> 必须是post请求</span><br><span class="line">    <span class="number">2.</span> enctype=<span class="string">'multipart/form-data'</span></span><br><span class="line">    </span><br><span class="line">后端：</span><br><span class="line">在request.FILES中接收文件数据，其他数据一律按照请求方式接收</span><br><span class="line">    </span><br><span class="line">form表单可以传递的数据格式：</span><br><span class="line"><span class="number">1.</span> urlencoded</span><br><span class="line">    <span class="number">2.</span> form-data</span><br><span class="line"> <span class="comment"># 不能提交json格式的数据</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''提交json格式的数据：</span></span><br><span class="line"><span class="string">1. ajax</span></span><br><span class="line"><span class="string">2. 第三方工具</span></span><br><span class="line"><span class="string">postman</span></span><br><span class="line"><span class="string">apizza</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">    </span><br><span class="line">数据格式：</span><br><span class="line"><span class="number">1.</span> urlencoded</span><br><span class="line">    <span class="number">2.</span> form-data</span><br><span class="line">    <span class="number">3.</span> json格式</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="built_in">print</span>(request.FILES)</span><br><span class="line">        file_obj = request.FILES.get(<span class="string">'myfile'</span>)</span><br><span class="line">        <span class="built_in">print</span>(file_obj.name)  <span class="comment"># 文件名</span></span><br><span class="line">        <span class="keyword">import</span> random</span><br><span class="line">        <span class="keyword">import</span> uuid</span><br><span class="line">        aa = <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">'.png'</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(aa, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj:</span><br><span class="line">                f.write(line)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'upload_file.html'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="CBV和FBV"><a href="#CBV和FBV" class="headerlink" title="CBV和FBV"></a>CBV和FBV</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FBV: function based view</span><br><span class="line">CBV: <span class="keyword">class</span> <span class="title class_">based</span> view</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'get'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'get'</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'post'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'POST'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#  url(r'^indexCbv/', views.IndexView.as_view()),</span></span><br></pre></td></tr></tbody></table></figure><h3 id="CBV的源码"><a href="#CBV的源码" class="headerlink" title="CBV的源码"></a>CBV的源码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">如何通过请求方式确定的方法？</span><br><span class="line"></span><br><span class="line"><span class="comment">#############入口################################</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">            self = cls(**initkwargs)  <span class="comment"># self = IndexView(**initkwargs)</span></span><br><span class="line">            <span class="comment"># self =&gt; IndexView</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line"><span class="comment">##############核心方法################################</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># GET POST  =&gt; get post</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            <span class="comment"># 反射：get set has del</span></span><br><span class="line">            handler = <span class="built_in">getattr</span>(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="keyword">return</span> handler(request, *args, **kwargs)  <span class="comment"># get(request, *args, **kwargs)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 传值</span><br><span class="line"><span class="comment"># 跟变量相关的都使用双括号 {{}}</span></span><br><span class="line"><span class="comment"># 跟逻辑相关的都使用 {%  %}</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''模板文件中取值一律使用点语法 . '''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在模板文件里面的函数，不用加括号，会自动加括号调用， 不能传递参数</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="模板语法之过滤器"><a href="#模板语法之过滤器" class="headerlink" title="模板语法之过滤器"></a>模板语法之过滤器</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相当于python里面的内置方法</span></span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">{{变量|过滤器:参数}}</span><br><span class="line">    </span><br><span class="line">过滤器有很多个，大概有六七十，我们需要使用<span class="number">5</span>个左右</span><br><span class="line"><span class="number">1.</span> length</span><br><span class="line"><span class="number">2.</span> defalut</span><br><span class="line"><span class="number">3.</span> date</span><br><span class="line"><span class="number">4.</span> filesizeformat</span><br><span class="line"><span class="number">5.</span> safe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤器里面最大传两个参数，至少一个参数</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CBV和FBV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django路由层</title>
      <link href="/2020/06/23/Django%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
      <url>/2020/06/23/Django%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="路由层"><a href="#路由层" class="headerlink" title="路由层"></a>路由层</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 路由匹配, urls.py中</span><br><span class="line"></span><br><span class="line"><span class="comment"># APPEND_SLASH = False 控制django是否自动加斜杠匹配</span></span><br><span class="line"></span><br><span class="line">url(<span class="string">r'^testadd/$'</span>, views.testadd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配规则：从上到下只要正则表达式匹配成功，就不会往下匹配了</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">get请求的传参方式？</span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/test/?a=1</span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/test/1</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></tbody></table></figure><h3 id="无名分组和有名分组"><a href="#无名分组和有名分组" class="headerlink" title="无名分组和有名分组"></a>无名分组和有名分组</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无名分组</span></span><br><span class="line">url(<span class="string">r'^test/(\d+)'</span>, views.test),</span><br><span class="line"><span class="comment"># 会把括号中匹配的数字当成位置参数传给视图函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组</span></span><br><span class="line">url(<span class="string">r'^test/(?P&lt;aaaa&gt;\d{2})$'</span>, views.test), <span class="comment"># # 会把括号中匹配的数字当成关键字参数传给视图函数</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反向解析其实就是通过一个路由的别名，可以得到该别名所在的这行路由的完整地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由是可以起别名的</span></span><br><span class="line"><span class="comment"># 反向解析</span></span><br><span class="line">url(<span class="string">r'^v1/v2/v3/v4/v5/test/'</span>, views.test, name=<span class="string">'test'</span>),</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"><span class="comment"># 1. 后端反向解析</span></span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="string">'test'</span>)) <span class="comment"># /test/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带参数的反向解析</span></span><br><span class="line"><span class="comment"># 1. 后端反向解析</span></span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="string">'test'</span>, args=(<span class="number">11111</span>, ))) <span class="comment"># /test/</span></span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="string">'test'</span>, kwargs={<span class="string">'aaa'</span>: <span class="number">1111</span>})) <span class="comment"># /test/</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''无名有名不能混合使用，可以单个多次使用'''</span></span><br><span class="line"><span class="comment"># url(r'^test/(\d+)/(\d+)/(\d+)/(\d+)', views.test, name='test'),</span></span><br><span class="line">    url(<span class="string">r'^test/(?P&lt;aaa&gt;\d+)/(?P&lt;bbb&gt;\d+)/(?P&lt;ccc&gt;\d+)/(\d+)'</span>, views.test, name=<span class="string">'test'</span>),</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重点</span></span><br><span class="line">以后我们的django项目会越来越大，那么就会导致总路由文件会越来越大，就会非常难维护，我们会把总路由分开到不同的应用下面</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">django的每一个应用都支持有自己的</span></span><br><span class="line"><span class="string">urls.py</span></span><br><span class="line"><span class="string">templates</span></span><br><span class="line"><span class="string">static</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 怎么样把这些应用串起来？就是使用路由分发。</span></span><br><span class="line"><span class="comment"># 使用路由分发一般都是多个应用</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 路由分发</span></span><br><span class="line">    <span class="string">'''第一种方式'''</span></span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> urls <span class="keyword">as</span> app01_urls</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> urls <span class="keyword">as</span> app02_urls</span><br><span class="line">    url(<span class="string">r'^app01/'</span>, include(app01_urls)),</span><br><span class="line">    url(<span class="string">r'^app02/'</span>, include(app02_urls)),</span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"> 强调：路由分发时，总路由第一个参数一定不能加$</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二种方式</span></span><br><span class="line">url(<span class="string">r'^app01/'</span>, include(<span class="string">'app01.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^app02/'</span>, include(<span class="string">'app02.urls'</span>)),</span><br></pre></td></tr></tbody></table></figure><h3 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当多个应用出现相同的别名时，反向解析就没办法识别了</span></span><br><span class="line">  url(<span class="string">r'^app01/'</span>, include(<span class="string">'app01.urls'</span>, namespace=<span class="string">'app01'</span>)),</span><br><span class="line">  url(<span class="string">r'^app02/'</span>, include(<span class="string">'app02.urls'</span>, namespace=<span class="string">'app02'</span>)),</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">print</span>(reverse(<span class="string">'app01:index'</span>))</span><br><span class="line"> <span class="built_in">print</span>(reverse(<span class="string">'app02:index'</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对不同的项目，创建出来一个新的python环境，类似于是一个新的python解释器</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM</title>
      <link href="/2020/06/22/Django%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
      <url>/2020/06/22/Django%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="ORM的概念"><a href="#ORM的概念" class="headerlink" title="ORM的概念"></a>ORM的概念</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 什么是ORM？</span><br><span class="line">关系映射对象</span><br><span class="line">    <span class="comment"># 不但在python中有，在其他语言中也有</span></span><br><span class="line"><span class="number">2.</span> 特点：</span><br><span class="line">在操作数据库的时候，不用在写原生SQL语句</span><br><span class="line">    <span class="string">'''相对而言，执行效率低了'''</span></span><br><span class="line"><span class="number">3.</span> ORM书写的位置：</span><br><span class="line">在models.py文件中</span><br><span class="line"><span class="number">4.</span> 如何使用？</span><br><span class="line">类名    &gt;&gt;&gt;   表名</span><br><span class="line">     对象    &gt;&gt;&gt;   记录</span><br><span class="line">     属性    &gt;&gt;&gt;    字段</span><br><span class="line"> <span class="number">5.</span> 如何来创建表？</span><br><span class="line"><span class="comment"># 创建一张表出来,必须继承models</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="comment"># 组合索引，联合索引</span></span><br><span class="line">    <span class="comment"># id int primary key auto_increment</span></span><br><span class="line">    <span class="built_in">id</span> = models.IntegerField(primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># username, max_length必须写</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)  <span class="comment"># varchar(32)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># password, orm支持自定义数据类型</span></span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>)  <span class="comment"># char()</span></span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span> 类写完之后，一定要执行数据库迁移命令，才能真正的创建出来数据表</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">python36 manage.py makemigrations</span></span><br><span class="line"><span class="string">python36 manage.py migrate</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">    <span class="comment"># 凡是跟数据相关的操作都要执行以上两句话</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充：ORM不能创建数据库，必须提前把库创建完成</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字段的增删改查"><a href="#字段的增删改查" class="headerlink" title="字段的增删改查"></a>字段的增删改查</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string">        如果你的表有主键，并且主键名也叫id，那么可以省略不写，自动创建</span></span><br><span class="line"><span class="string">        如果你的主键名不叫id，那么，就需要指定了</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 创建一张表出来,必须继承models</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="comment"># 组合索引，联合索引</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        如果你的表有主键，并且主键名也叫id，那么可以省略不写，自动创建</span></span><br><span class="line"><span class="string">        如果你的主键名不叫id，那么，就需要指定了</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># id int primary key auto_increment</span></span><br><span class="line">    <span class="built_in">id</span> = models.IntegerField(primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># username, max_length必须写</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)  <span class="comment"># varchar(32)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># password, orm支持自定义数据类型</span></span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>)  <span class="comment"># char() </span></span><br></pre></td></tr></tbody></table></figure><h3 id="ORM数据的增删改查"><a href="#ORM数据的增删改查" class="headerlink" title="ORM数据的增删改查"></a>ORM数据的增删改查</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加数据</span></span><br><span class="line">    <span class="comment"># sql: insert into t1 ()...</span></span><br><span class="line">    <span class="comment"># ORM:</span></span><br><span class="line">    <span class="comment"># 第一种方式</span></span><br><span class="line">    <span class="comment"># res=models.User.objects.create(username='ly', password=123)</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        返回值是当前插入的数据对象</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># print(res.username)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二种方式：</span></span><br><span class="line">    <span class="comment"># obj=models.User(username='ly1', password=123)</span></span><br><span class="line">    <span class="comment"># obj.save() # 这句话才是真正的操作数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改:第一种方式</span></span><br><span class="line">    <span class="comment"># sql:update db1 set username = '', password = '' where id=1 and ...</span></span><br><span class="line">    <span class="comment"># orm:</span></span><br><span class="line">    <span class="comment"># models.User.objects.filter(id=1).update(username='LY')</span></span><br><span class="line">    <span class="comment"># models.User.objects.filter(pk=1).update(username='LY')</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'''返回值是影响的行数'''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二种方式</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=1).all()[0]</span></span><br><span class="line">    <span class="comment"># filter里面的条件是and关系</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=1, username='aaaa11').first()  # [0]</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=1).first()  # [0]</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(username='aaaa').filter(password=123).all()  # [0]</span></span><br><span class="line">    <span class="string">'''只要返回值是QuerySet对象，那么，就可以一直点queryset提供的方法'''</span></span><br><span class="line">    <span class="comment"># print(res) # &lt;QuerySet [&lt;User: User object&gt;]&gt;</span></span><br><span class="line">    <span class="comment"># print(res.username)</span></span><br><span class="line">    <span class="comment"># print(res.password)</span></span><br><span class="line">    <span class="comment"># res.username = 'aaaa'</span></span><br><span class="line">    <span class="comment"># res.save()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除:delete from user where id = 1</span></span><br><span class="line">    models.User.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>).delete()</span><br></pre></td></tr></tbody></table></figure><h3 id="ORM创建表关系"><a href="#ORM创建表关系" class="headerlink" title="ORM创建表关系"></a>ORM创建表关系</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql是关系型数据库</span></span><br><span class="line"></span><br><span class="line">一对一：</span><br><span class="line"><span class="string">'''外键字段建在任何一方都可以，但是，推荐建在使用频率比较高的一张表'''</span></span><br><span class="line">一对多</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">外键字段建在多的一方</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">多对多</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">外键字段不建在任何一张表，而是，建在第三张表中</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">eg：</span><br><span class="line"></span><br><span class="line">图书表</span><br><span class="line">    出版社表</span><br><span class="line">    作者表</span><br><span class="line">    作者详情表</span><br><span class="line">    </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    图书和出版社是一对多，图书是多，出版社是一</span></span><br><span class="line"><span class="string">    图书和作者是多对多的关系</span></span><br><span class="line"><span class="string">    作者和作者详情表是一对一</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 不常用的数据我们称之为冷数据，</span></span><br><span class="line">    <span class="comment"># 常用的数据我们称之为热数据</span></span><br><span class="line">    <span class="comment"># ORM创建表关系</span></span><br><span class="line">    <span class="comment"># 1. 先创建这张表的基础字段，</span></span><br><span class="line">    <span class="comment"># 2. 在回头创建外键字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 出版社表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        float</span></span><br><span class="line"><span class="string">        double</span></span><br><span class="line"><span class="string">        decimal(5, 2) 999999.99</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># decimal(8, 2)</span></span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># publish_id = models.ForeignKey(to='Publish', to_field='id')</span></span><br><span class="line">    publish_id = models.ForeignKey(to=<span class="string">'Publish'</span>)  <span class="comment"># 如果关联的是id字段，那么可以省略不写</span></span><br><span class="line">    <span class="comment"># publish_id = models.ForeignKey(to=Publish)  # 如果关联的是id字段，那么可以省略不写</span></span><br><span class="line"></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        authors是一个虚拟字段，不会真正的在book表中创建出来这个字段</span></span><br><span class="line"><span class="string">        这个字段是关联第三张表的</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publish</span>(models.Model):</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">'AuthorDetail'</span>)</span><br><span class="line"><span class="comment"># 作者详情表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorDetail</span>(models.Model):</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">   </span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django之ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django三板斧</title>
      <link href="/2020/06/21/Django%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/2020/06/21/Django%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="django三板斧"><a href="#django三板斧" class="headerlink" title="django三板斧"></a>django三板斧</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django自动重启的现象叫‘热更新’</span></span><br><span class="line"><span class="comment"># 如果setting.py文件中DEBUG = False，则必须在ALLOWED_HOSTS = []中填写对应ip地址或者*号</span></span><br><span class="line"><span class="number">1.</span> HttpResponse</span><br><span class="line"><span class="number">2.</span> render</span><br><span class="line"><span class="number">3.</span> redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'123'</span>)</span><br><span class="line">    <span class="comment"># 暂且记忆返回值是字符串类型</span></span><br><span class="line">    <span class="comment"># return HttpResponse('hello django!')  # 返回给浏览器了</span></span><br><span class="line">    ctime = time.strftime(<span class="string">'%Y-%m-%d %X'</span>)</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">locals</span>())</span><br><span class="line">    <span class="comment"># return render(request, 'index.html', {'ctime11111':ctime, 'a':1, 'b':2})</span></span><br><span class="line">    <span class="comment"># return render(request, 'index.html', locals())</span></span><br><span class="line">    <span class="comment"># return redirect('http://www.baidu.com')</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/admin/'</span>)  <span class="comment"># ip+port/admin 括号内可跟链接地址，直接跳转</span></span><br></pre></td></tr></tbody></table></figure><h3 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">什么是静态文件</span><br><span class="line">css, js, jq, bootstrap, img...</span><br><span class="line"> eg:</span><br><span class="line">    以登录功能为例</span><br><span class="line"> <span class="comment"># 静态文件的存储路径一般是static，默认是没有这个文件夹的，所以，需要我们自己手动创建出来这个文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在static文件夹中还可以继续根据不同的功能进行划分</span></span><br><span class="line">js</span><br><span class="line">css</span><br><span class="line">lib</span><br><span class="line">img</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/static/css/bootstrap.min.css不能访问是因为后盾没有开放可访问的路径</span></span><br><span class="line"></span><br><span class="line">{<span class="comment"># 动态引入 #}</span></span><br><span class="line">    {% load static %}</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"{% static 'css/bootstrap-theme.min.css'%}"</span>&gt;</span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/aaaaa/'</span></span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>),  <span class="comment"># 这样一配置完成，静态路径的根就是static</span></span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static1'</span>),  <span class="comment"># 这样一配置完成，静态路径的根就是static</span></span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static2'</span>),  <span class="comment"># 这样一配置完成，静态路径的根就是static</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1. 什么都不写，提交到当前页面</span></span><br><span class="line"><span class="string">2. 全写：https://passport.baidu.com/v2/api/?login</span></span><br><span class="line"><span class="string">3. 只写后缀</span></span><br><span class="line"><span class="string">/login/  =&gt; 自动补全ip和端口</span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/login/</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">面试题：get和post的区别？</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/login/?a=<span class="number">1</span>&amp;b=<span class="number">2</span>&amp;c=<span class="number">3</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    get请求：</span></span><br><span class="line"><span class="string">    1. get没有请求体</span></span><br><span class="line"><span class="string">    2. 对数据大小的限制是4KB</span></span><br><span class="line"><span class="string">    3. 不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息</span></span><br><span class="line"><span class="string">    post请求：</span></span><br><span class="line"><span class="string">    1. post有请求体</span></span><br><span class="line"><span class="string">    2. 理论上对数据大小没有限制</span></span><br><span class="line"><span class="string">    3. 相对安全</span></span><br><span class="line"><span class="string">    '''</span>     </span><br><span class="line">    </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">MySQL中可能会出现的安全问题：SQL注入</span></span><br><span class="line"><span class="string">前端当中可能会出现的安全问题：xss攻击</span></span><br><span class="line"><span class="string">django中会出现的安全问题：csrf跨站请求</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 1. 如何判断请求方式？</span></span><br><span class="line">    <span class="built_in">print</span>(request)  <span class="comment"># &lt;WSGIRequest: GET '/login/'&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(request.method, <span class="built_in">type</span>(request.method))  <span class="comment"># GET &lt;WSGIRequest: GET '/login/'&gt;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment">#  2. 如何获取post请求方式的数据？</span></span><br><span class="line">        <span class="comment"># print(request.POST) # QueryDict: {'user': ['ly'], 'password': ['123']}&gt;</span></span><br><span class="line">        <span class="comment"># print(request.POST.get('username')) # ly</span></span><br><span class="line">        <span class="comment"># # get只能拿最后一个值</span></span><br><span class="line">        <span class="comment"># print(request.POST.get('hobby')) # ly</span></span><br><span class="line">        <span class="comment"># print(request.POST.getlist('hobby')) # 拿到所有的值</span></span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">'ly'</span> <span class="keyword">and</span> password ==<span class="string">'123'</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'登录成功'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'密码错误'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>,  )</span><br></pre></td></tr></tbody></table></figure><h3 id="django连接mysql"><a href="#django连接mysql" class="headerlink" title="django连接mysql"></a>django连接mysql</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接mysql的配置</span></span><br><span class="line">  <span class="string">'default'</span>: {</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'db8_3'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'123'</span>,</span><br><span class="line">        <span class="string">'CHARSET'</span>:<span class="string">'utf8'</span></span><br><span class="line">    }</span><br><span class="line">        </span><br><span class="line"><span class="comment"># django默认的操作mysql的模块是MySQLdb</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">在python3.6版本以下，需要加入下面两句话</span></span><br><span class="line"><span class="string">        需要先安装pymysql</span></span><br><span class="line"><span class="string">        pip3 install pymysql</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        import pymysql</span></span><br><span class="line"><span class="string">        pymysql.install_as_MySQLdb()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Django</title>
      <link href="/2020/06/20/%E5%88%9D%E8%AF%86Django/"/>
      <url>/2020/06/20/%E5%88%9D%E8%AF%86Django/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span id="more"></span><h3 id="web应用概念"><a href="#web应用概念" class="headerlink" title="web应用概念"></a>web应用概念</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">http的默认端口号：<span class="number">80</span></span><br><span class="line">https的默认端口号：<span class="number">443</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> web应用是什么？</span><br><span class="line">通过浏览器访问的应用都是</span><br><span class="line"><span class="number">2.</span> 软件开发模式：</span><br><span class="line">服务端需要具备的特征：<span class="number">24</span>小时对外提供服务</span><br><span class="line">C/S：client: 客户端， server: 服务端</span><br><span class="line">    B/S：browser: 浏览器，server：服务端</span><br><span class="line">    <span class="comment"># 本质上B/S架构也是C/S架构</span></span><br><span class="line"><span class="number">3.</span> Web应用程序的优点</span><br><span class="line"><span class="number">1.</span> 只需要一个浏览器</span><br><span class="line">    <span class="number">2.</span> 节省资源</span><br><span class="line">    <span class="number">3.</span> 客户端不需要主动更新，服务端更新即可</span><br><span class="line"><span class="number">4.</span> Web应用程序的缺点</span><br><span class="line"><span class="number">1.</span> 一旦服务端出现问题，客户端立马受影响</span><br><span class="line">    <span class="number">2.</span> 兼容性问题</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    web框架：就是在固定的位置书写固定的代码</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    python中的三大主流框架：</span><br><span class="line">    <span class="number">1.</span> Django框架：</span><br><span class="line">        大而全，类似于航空母舰</span><br><span class="line">        <span class="number">2.</span> flask框架：</span><br><span class="line">        小而精，依赖于第三方模块</span><br><span class="line">         <span class="number">3.</span> tornado框架：</span><br><span class="line">        异步高性能框架</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h3 id="MVC和MTV模式"><a href="#MVC和MTV模式" class="headerlink" title="MVC和MTV模式"></a>MVC和MTV模式</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> MVC:</span><br><span class="line">    M: model(跟数据打交道的)</span><br><span class="line">        V: View(视图， 页面)</span><br><span class="line">        C: controller(控制器，主要写逻辑的)</span><br><span class="line">        S:service (服务层)</span><br><span class="line"><span class="number">2.</span> MTV:</span><br><span class="line">    M: model(模型层：跟数据相关的)</span><br><span class="line">        T:template(模板：html页面)  </span><br><span class="line">        V：view(主要写逻辑的)</span><br></pre></td></tr></tbody></table></figure><h3 id="django下载与安装"><a href="#django下载与安装" class="headerlink" title="django下载与安装"></a>django下载与安装</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> django的版本问题：</span><br><span class="line">django1.x: 老项目再用</span><br><span class="line">    django2.x：新项目再用</span><br><span class="line">    django3.x：刚出来的</span><br><span class="line">    </span><br><span class="line"> <span class="comment"># 我们学习使用django1.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装django</span></span><br><span class="line">pip3 install django (最新版本)</span><br><span class="line">pip3 install django==<span class="number">1.1</span><span class="number">.29</span></span><br><span class="line"></span><br><span class="line">如何验证django是否安装成功？</span><br><span class="line"><span class="comment"># 在cmd中， 输入django-admin，如果有输出信息，就代表安装成功</span></span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h3 id="创建django项目"><a href="#创建django项目" class="headerlink" title="创建django项目"></a>创建django项目</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''你可以提前切换到项目要保存的位置'''</span></span><br><span class="line"><span class="number">1.</span> 命令行创建</span><br><span class="line">django-admin startproject 项目名</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> pycharm创建</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span> 命令行创建和pycharm创建的区别:</span><br><span class="line">     <span class="number">1.</span> pycharm创建：</span><br><span class="line">        自动生成templates文件夹</span><br><span class="line">        settings.py文件：</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        TEMPLATES = [</span></span><br><span class="line"><span class="string">                            {</span></span><br><span class="line"><span class="string">                                'BACKEND': 'django.template.backends.django.DjangoTemplates',</span></span><br><span class="line"><span class="string">                                'DIRS': [os.path.join(BASE_DIR, 'templates')]</span></span><br><span class="line"><span class="string">                                </span></span><br><span class="line"><span class="string">                                }</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">     <span class="number">2.</span> 命令行创建：</span><br><span class="line">    没有templates文件夹</span><br><span class="line">        settings.py文件：</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        TEMPLATES = [</span></span><br><span class="line"><span class="string">    {</span></span><br><span class="line"><span class="string">                            'BACKEND': 'django.template.backends.django.DjangoTemplates',</span></span><br><span class="line"><span class="string">                            'DIRS': [],</span></span><br><span class="line"><span class="string">                            }</span></span><br><span class="line"><span class="string">             ]</span></span><br><span class="line"><span class="string">        '''</span></span><br></pre></td></tr></tbody></table></figure><h3 id="启动django项目"><a href="#启动django项目" class="headerlink" title="启动django项目"></a>启动django项目</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''前提：先切换到manage.py所在的文件夹下面'''</span></span><br><span class="line"><span class="number">1.</span> 命令行启动</span><br><span class="line">python3 manage.py runserver</span><br><span class="line">    python3 manage.py runserver <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line">    python3 manage.py runserver <span class="number">8080</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">'''django的默认端口号：8000'''</span></span><br><span class="line"><span class="number">2.</span> pycharm启动</span><br><span class="line">点击pycharm绿色按钮</span><br></pre></td></tr></tbody></table></figure><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用：application  app</span></span><br><span class="line"></span><br><span class="line">我们刚刚创建的项目就类似于是一所大学，而创建的应用就类似于大学里面的二级学院</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">用户模块  user</span><br><span class="line">    订单模块  order</span><br><span class="line">    收货地址管理 :address</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">如何创建应用？</span><br><span class="line"><span class="number">1.</span> 命令行创建</span><br><span class="line">    <span class="comment"># python manage.py startapp 应用名</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        应用名：最好见名知意，就命名为：app01, app02...</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 一个django项目至少要有一个应用</span></span><br><span class="line">    <span class="number">2.</span> pycharm创建</span><br><span class="line">     Tools =&gt; run manage.py task</span><br><span class="line">    <span class="number">3.</span> 应用创建完成之后，第一件事去配置文件中注册应用</span><br><span class="line">    <span class="comment">###################################################</span></span><br><span class="line">        INSTALLED_APPS = [</span><br><span class="line">            <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">            <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">            <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">            <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">            <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">            <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">            <span class="string">'app01'</span>,</span><br><span class="line">            <span class="string">'app02'</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">###################################################</span></span><br></pre></td></tr></tbody></table></figure><h3 id="主要文件介绍"><a href="#主要文件介绍" class="headerlink" title="主要文件介绍"></a>主要文件介绍</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysite1  <span class="comment"># 项目名</span></span><br><span class="line">    app01  <span class="comment"># 应用名</span></span><br><span class="line">        migrations <span class="comment"># 迁移数据库的时候，会把迁移记录保存到这里来</span></span><br><span class="line">        __init__.py</span><br><span class="line">        admin.py   <span class="comment"># django自带的后台管理系统</span></span><br><span class="line">        apps.py    <span class="comment"># 忽略</span></span><br><span class="line">        models.py  <span class="comment"># 模型层，以后跟数据库相关的都在这个里面</span></span><br><span class="line">        tests.py   <span class="comment"># 测试脚本</span></span><br><span class="line">        views.py   <span class="comment"># view层，主要用来写逻辑的</span></span><br><span class="line">mysite1</span><br><span class="line">    __init__.py</span><br><span class="line">    settings.py   <span class="comment"># 整个django项目的全局配置文件</span></span><br><span class="line">    urls.py       <span class="comment"># 路由层，写的是路径与函数的对应关系</span></span><br><span class="line">    wsgi.py  <span class="comment"># wsgiref服务器， WSGI协议，uwsgi服务器</span></span><br><span class="line">templates         <span class="comment"># 写html页面的地方</span></span><br><span class="line">db.sqlite3        <span class="comment"># django自带的小型数据库， mysql，oracle</span></span><br><span class="line">manage.py  <span class="comment"># 启动文件，入口文件</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
